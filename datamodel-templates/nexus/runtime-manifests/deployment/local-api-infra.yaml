---
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: nexus-etcd-defrag 
spec:
  successfulJobsHistoryLimit: 1
  failedJobsHistoryLimit: 1
  schedule: "0,30 * * * *"
  jobTemplate:
    spec:
      template:
        metadata:
          annotations:
            sidecar.istio.io/inject: "false"
        spec:
          serviceAccountName: default
          restartPolicy: OnFailure
          containers:
          - name: etcd-defrag
            image: gcr.io/nsx-sm/etcd-kubectl:latest
            imagePullPolicy: IfNotPresent
            command:
            - "/bin/bash"
            - "-c"
            - |
              set -euxo pipefail
              ETCDCTL_API=3 etcdctl --endpoints=nexus-etcd:2379 endpoint status --write-out=table
              ETCDCTL_API=3 etcdctl --endpoints=nexus-etcd:2379 defrag --cluster
              ETCDCTL_API=3 etcdctl --endpoints=nexus-etcd:2379 endpoint status --write-out=table
              echo "etcd defragmented successfully!"
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: nexus-k8scert-secret-permission  
rules:
- apiGroups:
  - ""
  resources:
  - "secrets"
  verbs:
  - get
  - watch
  - list
  - create
  - delete
  - patch
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: nexus-k8scerts-service-account
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: nexus-k8scert-create-secret-rbac
subjects:
- kind: ServiceAccount
  name: nexus-k8scerts-service-account
roleRef:
  kind: Role
  name: nexus-k8scert-secret-permission
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: batch/v1
kind: Job
metadata:
  name: nexus-k8scert-creation-job  
spec:
  template:
    metadata:
      annotations:
        "sidecar.istio.io/inject": "false"
    spec:
      serviceAccountName: nexus-k8scerts-service-account
      containers:
      - name: k8scert-creation
        image: "gcr.io/mesh7-public-images/tools:latest"
        command:
        - "/bin/bash"
        - "-c"
        - |
          set -e
          openssl rand -out /root/.rnd -hex 256
          openssl genrsa -out /tmp/ca.key 2048
          openssl req -x509 -new -nodes -key /tmp/ca.key -subj "/CN=nexus-apiserver" -days 10000 -out /tmp/ca.crt
          kubectl create secret generic nexus-customapi-ca --from-file=/tmp/ca.key --from-file=/tmp/ca.crt -n $KUBERNETES_POD_NAMESPACE --dry-run -o yaml | kubectl apply -f -
        env:
          - name: KUBERNETES_POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
      restartPolicy: Never
  backoffLimit: 4
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nexus-kube-apiserver
  labels:
    app: nexus-kube-apiserver
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nexus-kube-apiserver
  template:
    metadata:
      annotations:
        "sidecar.istio.io/inject": "false"
      labels:
        app: nexus-kube-apiserver
    spec:
      initContainers:
      - name: check-etcd-server
        image: "gcr.io/mesh7-public-images/tools:latest"
        command:
            - /bin/bash
            - -c
            - |
              #!/bin/bash
              URL="http://nexus-etcd:2379/health"
              max_retries=20
              counter=0
              while [[ $counter -lt $max_retries ]]; do
                    status=$(curl -s -o /dev/null -I -w "%{http_code}" -XGET $URL)
                    if [ $status == "200" ]; then
                        echo "$URL is reachable"
                        exit 0
                    else
                        counter=$((counter +1))
                        sleep 5
                    fi
              done
      containers:
      - command:
        - kube-apiserver
        - --insecure-bind-address=0.0.0.0
        - --etcd-servers=http://nexus-etcd:2379
        - --service-account-key-file=/custom/k8s/certs/ca.crt
        - --service-cluster-ip-range=10.24.0.0/16
        - --cert-dir=/etc/kubernetes/certs
        - --endpoint-reconciler-type=none
        - --port=8080
        image: gcr.io/nsx-sm/k8s.gcr.io/kube-apiserver:v1.18.0
        ports:
          - containerPort: 8080
        env:
        - name: KUBERNETES_POD_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        name: kube-apiserver
        resources:
          requests:
            cpu: 500m
            memory: 500Mi
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        livenessProbe:
          failureThreshold: 8
          httpGet:
            path: /healthz
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 15
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 15    
        volumeMounts:
            - name: nexus-customapi-ca
              mountPath: "/custom/k8s/certs"
              readOnly: true
      restartPolicy: Always
      securityContext: {}
      volumes:
      - name: nexus-customapi-ca
        secret:
            secretName: nexus-customapi-ca
---
apiVersion: v1
kind: Service
metadata:
  name: nexus-apiserver 
spec:
  type: ClusterIP
  ports:
    - protocol: TCP
      name: http
      port: 8080
      targetPort: 8080
    - protocol: TCP
      port: 6443
      name: https
      targetPort: 6443
  selector:
      app: nexus-kube-apiserver
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nexus-kube-controllermanager
spec:
  replicas: 1
  selector:
    matchLabels:
      name: nexus-kube-controllermanager
  template:
    metadata:
      annotations:
        "sidecar.istio.io/inject": "false"
      labels:
        name: nexus-kube-controllermanager
    spec:
      initContainers:
      - name: check-etcd-server
        image: "gcr.io/mesh7-public-images/tools:latest"
        command:
            - /bin/bash
            - -c
            - |
              #!/bin/bash
              URL="http://nexus-apiserver:8080/version"
              max_retries=20
              counter=0
              while [[ $counter -lt $max_retries ]]; do
                    status=$(curl -s -o /dev/null -I -w "%{http_code}" -XGET $URL)
                    if [ $status == "200" ]; then
                        echo "$URL is reachable"
                        exit 0
                    else
                        counter=$((counter +1))
                        sleep 5
                    fi
              done
      containers:
      - command:
        - kube-controller-manager
        - --service-account-private-key-file=/custom/k8s/certs/ca.key
        - --leader-elect=false
        - --master=nexus-apiserver:8080
        - --use-service-account-credentials=true
        - --authentication-skip-lookup=true
        image: gcr.io/nsx-sm/k8s.gcr.io/kube-controller-manager:v1.18.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 8
          httpGet:
            path: /healthz
            port: 10257
            scheme: HTTPS
          initialDelaySeconds: 15
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 15
        name: kube-controllermanager
        resources:
          requests:
            cpu: 500m
            memory: 500Mi
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
            - name: nexus-customapi-ca
              mountPath: "/custom/k8s/certs"
              readOnly: true
      restartPolicy: Always
      securityContext: {}
      volumes:
      - name: nexus-customapi-ca
        secret:
            secretName: nexus-customapi-ca
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nexus-proxy-container 
  labels:
    app: nexus-proxy-container
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nexus-proxy-container
  template:
    metadata:
      annotations:
        "sidecar.istio.io/inject": "false"
      labels:
        app: nexus-proxy-container
    spec:
      containers:
      - name: proxy-container
        image: "gcr.io/nsx-sm/m7/debug-container:latest"
        command: [ "kubectl","--server=http://nexus-apiserver:8080","proxy","--address=0.0.0.0","--disable-filter=true","--v=1" ]
        ports:
          - containerPort: 8001
        resources:
          requests:
            cpu: 100m
            memory: 200Mi
          limits:
            cpu: 100m
            memory: 200Mi
        imagePullPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: nexus-proxy-container
spec:
  ports:
    - protocol: TCP
      name: http
      port: 80
      targetPort: 8001
  selector:
      app: nexus-proxy-container
