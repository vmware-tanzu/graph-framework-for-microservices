apiVersion: apps/v1
kind: Deployment
metadata:
  name: nexus-authz
  namespace: {{.Values.global.namespace}}
  labels:
    control-plane: authz
spec:
  selector:
    matchLabels:
      control-plane: authz
  replicas: 1
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: manager
      labels:
        control-plane: authz
    spec:
      initContainers:
        - name: check-nexus-proxy-container
          image: "gcr.io/mesh7-public-images/tools:latest"
          command:
            - /bin/bash
            - -c
            - |
              #!/bin/bash
              set -x
              URL="http://nexus-proxy-container/api/v1/namespaces"
              max_retries=20
              counter=0
              while [[ $counter -lt $max_retries ]]; do
                    status=$(curl -s -o /dev/null -I -w "%{http_code}" -XGET $URL)
                    if [ $status == "200" ]; then
                        echo "$URL is reachable"
                        exit 0
                    else
                        counter=$((counter +1))
                        sleep 5
                    fi
              done
      containers:
        -
          image: {{.Values.global.registry}}/authz:{{ required "Please provide global.authz.tag value using --set-string option!" .Values.global.authz.tag }}
          name: authz
          env:
            - name: KUBECONFIG
              value: /kubeconfig/kubeconfig
            - name: INGRESS_CONTROLLER_NAME
              value: nexus-ingress-nginx-controller
            - name: DEFAULT_BACKEND_SERVICE_NAME
              value: nexus-nginx
            - name: DEFAULT_BACKEND_SERVICE_PORT
              value: "80"
            - name: LOG_LEVEL
              value: DEBUG
            - name: GATEWAY_MODE
              {{- if eq .Values.global.nexusAdmin true }}
              value: "admin"
              {{- else }}
              value: "tenant"
              {{- end }}
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
          livenessProbe:
            httpGet:
              path: /healthz
              port: 8081
            initialDelaySeconds: 15
            periodSeconds: 20
          readinessProbe:
            httpGet:
              path: /readyz
              port: 8081
            initialDelaySeconds: 5
            periodSeconds: 10
          # TODO(user): Configure the resources accordingly based on the project requirements.
          # More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
          resources:
            limits:
              cpu: 500m
              memory: 128Mi
            requests:
              cpu: 10m
              memory: 64Mi
          volumeMounts:
            - mountPath: /kubeconfig
              name: admin-config
            - mountPath: /etc/kubecerts
              name: nexus-admin-secret
              readOnly: false
      volumes:
        - name: admin-config
          configMap:
            name: nexus-admin-config
        - name: nexus-admin-secret
          secret:
            secretName: nexus-apiserver-cacerts
      {{- if ne .Values.global.imagepullsecret "" }}
      imagePullSecrets:
      - name: {{.Values.global.imagepullsecret}}
      {{end}}
      terminationGracePeriodSeconds: 10
      securityContext:
        runAsUser: 0
        runAsGroup: 0
---
apiVersion: v1
kind: Service
metadata:
  name: nexus-authz
  namespace: {{.Values.global.namespace}}
spec:
  ports:
  - protocol: TCP
    name: http
    port: 80
    targetPort: 80
  selector:
    control-plane: authz
