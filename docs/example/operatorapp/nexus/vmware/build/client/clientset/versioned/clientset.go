/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package versioned

import (
	"fmt"
	engineeringvmwarev1 "vmware/build/client/clientset/versioned/typed/engineering.vmware.org/v1"
	hrvmwarev1 "vmware/build/client/clientset/versioned/typed/hr.vmware.org/v1"
	managementvmwarev1 "vmware/build/client/clientset/versioned/typed/management.vmware.org/v1"
	orgchartvmwarev1 "vmware/build/client/clientset/versioned/typed/orgchart.vmware.org/v1"
	rolevmwarev1 "vmware/build/client/clientset/versioned/typed/role.vmware.org/v1"

	discovery "k8s.io/client-go/discovery"
	rest "k8s.io/client-go/rest"
	flowcontrol "k8s.io/client-go/util/flowcontrol"
)

type Interface interface {
	Discovery() discovery.DiscoveryInterface
	EngineeringVmwareV1() engineeringvmwarev1.EngineeringVmwareV1Interface
	HrVmwareV1() hrvmwarev1.HrVmwareV1Interface
	ManagementVmwareV1() managementvmwarev1.ManagementVmwareV1Interface
	OrgchartVmwareV1() orgchartvmwarev1.OrgchartVmwareV1Interface
	RoleVmwareV1() rolevmwarev1.RoleVmwareV1Interface
}

// Clientset contains the clients for groups. Each group has exactly one
// version included in a Clientset.
type Clientset struct {
	*discovery.DiscoveryClient
	engineeringVmwareV1 *engineeringvmwarev1.EngineeringVmwareV1Client
	hrVmwareV1          *hrvmwarev1.HrVmwareV1Client
	managementVmwareV1  *managementvmwarev1.ManagementVmwareV1Client
	orgchartVmwareV1    *orgchartvmwarev1.OrgchartVmwareV1Client
	roleVmwareV1        *rolevmwarev1.RoleVmwareV1Client
}

// EngineeringVmwareV1 retrieves the EngineeringVmwareV1Client
func (c *Clientset) EngineeringVmwareV1() engineeringvmwarev1.EngineeringVmwareV1Interface {
	return c.engineeringVmwareV1
}

// HrVmwareV1 retrieves the HrVmwareV1Client
func (c *Clientset) HrVmwareV1() hrvmwarev1.HrVmwareV1Interface {
	return c.hrVmwareV1
}

// ManagementVmwareV1 retrieves the ManagementVmwareV1Client
func (c *Clientset) ManagementVmwareV1() managementvmwarev1.ManagementVmwareV1Interface {
	return c.managementVmwareV1
}

// OrgchartVmwareV1 retrieves the OrgchartVmwareV1Client
func (c *Clientset) OrgchartVmwareV1() orgchartvmwarev1.OrgchartVmwareV1Interface {
	return c.orgchartVmwareV1
}

// RoleVmwareV1 retrieves the RoleVmwareV1Client
func (c *Clientset) RoleVmwareV1() rolevmwarev1.RoleVmwareV1Interface {
	return c.roleVmwareV1
}

// Discovery retrieves the DiscoveryClient
func (c *Clientset) Discovery() discovery.DiscoveryInterface {
	if c == nil {
		return nil
	}
	return c.DiscoveryClient
}

// NewForConfig creates a new Clientset for the given config.
// If config's RateLimiter is not set and QPS and Burst are acceptable,
// NewForConfig will generate a rate-limiter in configShallowCopy.
func NewForConfig(c *rest.Config) (*Clientset, error) {
	configShallowCopy := *c
	if configShallowCopy.RateLimiter == nil && configShallowCopy.QPS > 0 {
		if configShallowCopy.Burst <= 0 {
			return nil, fmt.Errorf("burst is required to be greater than 0 when RateLimiter is not set and QPS is set to greater than 0")
		}
		configShallowCopy.RateLimiter = flowcontrol.NewTokenBucketRateLimiter(configShallowCopy.QPS, configShallowCopy.Burst)
	}
	var cs Clientset
	var err error
	cs.engineeringVmwareV1, err = engineeringvmwarev1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.hrVmwareV1, err = hrvmwarev1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.managementVmwareV1, err = managementvmwarev1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.orgchartVmwareV1, err = orgchartvmwarev1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.roleVmwareV1, err = rolevmwarev1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}

	cs.DiscoveryClient, err = discovery.NewDiscoveryClientForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	return &cs, nil
}

// NewForConfigOrDie creates a new Clientset for the given config and
// panics if there is an error in the config.
func NewForConfigOrDie(c *rest.Config) *Clientset {
	var cs Clientset
	cs.engineeringVmwareV1 = engineeringvmwarev1.NewForConfigOrDie(c)
	cs.hrVmwareV1 = hrvmwarev1.NewForConfigOrDie(c)
	cs.managementVmwareV1 = managementvmwarev1.NewForConfigOrDie(c)
	cs.orgchartVmwareV1 = orgchartvmwarev1.NewForConfigOrDie(c)
	cs.roleVmwareV1 = rolevmwarev1.NewForConfigOrDie(c)

	cs.DiscoveryClient = discovery.NewDiscoveryClientForConfigOrDie(c)
	return &cs
}

// New creates a new Clientset for the given RESTClient.
func New(c rest.Interface) *Clientset {
	var cs Clientset
	cs.engineeringVmwareV1 = engineeringvmwarev1.New(c)
	cs.hrVmwareV1 = hrvmwarev1.New(c)
	cs.managementVmwareV1 = managementvmwarev1.New(c)
	cs.orgchartVmwareV1 = orgchartvmwarev1.New(c)
	cs.roleVmwareV1 = rolevmwarev1.New(c)

	cs.DiscoveryClient = discovery.NewDiscoveryClient(c)
	return &cs
}
