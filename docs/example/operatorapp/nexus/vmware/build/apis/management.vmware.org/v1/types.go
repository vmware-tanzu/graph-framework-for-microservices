// Code generated by nexus. DO NOT EDIT.

package v1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	"vmware/build/common"
)

// +k8s:openapi-gen=true
type Child struct {
	Group string `json:"group" yaml:"group"`
	Kind  string `json:"kind" yaml:"kind"`
	Name  string `json:"name" yaml:"name"`
}

// +k8s:openapi-gen=true
type Link struct {
	Group string `json:"group" yaml:"group"`
	Kind  string `json:"kind" yaml:"kind"`
	Name  string `json:"name" yaml:"name"`
}

// +k8s:openapi-gen=true
type NexusStatus struct {
	SourceGeneration int64 `json:"sourceGeneration" yaml:"sourceGeneration"`
	RemoteGeneration int64 `json:"remoteGeneration" yaml:"remoteGeneration"`
}

/* ------------------- CRDs definitions ------------------- */

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type Leader struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              LeaderSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            LeaderNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type LeaderNexusStatus struct {
	Status LeaderState `json:"status,omitempty" yaml:"status,omitempty"`
	Nexus  NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *Leader) CRDName() string {
	return "leaders.management.vmware.org"
}

func (c *Leader) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type LeaderSpec struct {
	Designation    string           `json:"designation" yaml:"designation"`
	Name           string           `json:"name" yaml:"name"`
	EmployeeID     int              `json:"employeeID" yaml:"employeeID"`
	EngManagersGvk map[string]Child `json:"engManagersGvk,omitempty" yaml:"engManagersGvk,omitempty" nexus:"children"`
	HRGvk          *Child           `json:"hRGvk,omitempty" yaml:"hRGvk,omitempty" nexus:"child"`
	RoleGvk        *Link            `json:"roleGvk,omitempty" yaml:"roleGvk,omitempty" nexus:"link"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type LeaderList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []Leader `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type Mgr struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              MgrSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            MgrNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type MgrNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *Mgr) CRDName() string {
	return "mgrs.management.vmware.org"
}

func (c *Mgr) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type MgrSpec struct {
	Name          string `json:"name" yaml:"name"`
	EmployeeID    int    `json:"employeeID" yaml:"employeeID"`
	DevelopersGvk *Child `json:"developersGvk,omitempty" yaml:"developersGvk,omitempty" nexus:"child"`
	OpsGvk        *Child `json:"opsGvk,omitempty" yaml:"opsGvk,omitempty" nexus:"child"`
	RoleGvk       *Link  `json:"roleGvk,omitempty" yaml:"roleGvk,omitempty" nexus:"link"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type MgrList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []Mgr `json:"items" yaml:"items"`
}

// +k8s:openapi-gen=true
type LeaderState struct {
	IsOnVacations            bool
	DaysLeftToEndOfVacations int
}
