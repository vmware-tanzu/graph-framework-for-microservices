package graph

import (
	"context"
	"encoding/json"
	"fmt"

	log "github.com/sirupsen/logrus"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/client-go/rest"

	qm "github.com/vmware-tanzu/graph-framework-for-microservices/nexus/generated/query-manager"
	nexus_client "{{.BaseImportPath}}nexus-client"
	"{{.BaseImportPath}}nexus-gql/graph/model"
)

var c = GrpcClients{
		mtx: sync.Mutex{},
		Clients: map[string]GrpcClient{},
}
var nc *nexus_client.Clientset

func InitNexusClientSet() error {
	if nc == nil {
		k8sApiConfig := getK8sAPIEndpointConfig()
		nexusClient, err := nexus_client.NewForConfig(k8sApiConfig)
		if err != nil {
			return fmt.Errorf("failed to get k8s client config: %s", err)
		}
		nc = nexusClient
		nc.SubscribeAll()
		log.Debugf("Subscribed to all nodes in datamodel")
	}
	return nil
}

func getParentName(parentLabels map[string]interface{}, key string) string {
    if v, ok := parentLabels[key]; ok && v != nil {
	    return v.(string)
	}
	return ""
}

//////////////////////////////////////
// Nexus K8sAPIEndpointConfig
//////////////////////////////////////
func getK8sAPIEndpointConfig() *rest.Config {
    var (
		config *rest.Config
		err    error
	)
	filePath := os.Getenv("KUBECONFIG")
	if filePath != "" {
		config, err = clientcmd.BuildConfigFromFlags("", filePath)
		if err != nil {
			return nil
		}
	} else {
	    config, err = rest.InClusterConfig()
	    if err != nil {
		    return nil
	    }
	}
	config.RateLimiter = flowcontrol.NewTokenBucketRateLimiter(200, 300)
	return config
}
{{- range $key, $node := .Nodes }}
{{- if $node.IsParentNode }}
{{- if $node.IsSingletonNode }}
//////////////////////////////////////
// Singleton Resolver for Parent Node
// PKG: {{$node.PkgName}}, NODE: {{$node.PkgName}}
//////////////////////////////////////
func getRootResolver() (*model.{{$node.PkgName}}{{$node.NodeName}}, error) {
	if nc == nil {
		log.Debugf("nc is nil in getRootResolver calling initNexusClientSet")
        initNCErr := InitNexusClientSet()
        if initNCErr != nil{
            log.Errorf("[getRootResolver]Error initializing nexus client: %s", initNCErr)
            return nil, nil
        }
	}

	v{{$node.NodeName}}, err := nc.Get{{$node.PkgName}}{{$node.NodeName}}(context.TODO())
	if err != nil {
		log.Errorf("[getRootResolver]Error getting {{$node.NodeName}} node %s", err)
		return nil, nil
	}
	if v{{$node.NodeName}} == nil{
	    log.Errorf("[getRootResolver]Error getting Root node %s", err)
	    return nil, nil
	}
	{{ $node.Alias }}
	{{ $node.ReturnType }}
	log.Debugf("[getRootResolver]Output {{$node.NodeName}} object %+v", ret)
	return ret, nil
}
{{- else }}
//////////////////////////////////////
// Non Singleton Resolver for Parent Node
// PKG: {{$node.PkgName}}, NODE: {{$node.PkgName}}
//////////////////////////////////////
func getRootResolver(id *string) ([]*model.{{$node.PkgName}}{{$node.NodeName}}, error) {
	if nc == nil {
		k8sApiConfig := getK8sAPIEndpointConfig()
		nexusClient, err := nexus_client.NewForConfig(k8sApiConfig)
		if err != nil {
			return nil, fmt.Errorf("failed to get k8s client config: %s", err)
		}
		nc = nexusClient
		nc.SubscribeAll()
		log.Debugf("Subscribed to all nodes in datamodel")
	}

	var v{{$node.NodeName}}List []*model.{{$node.PkgName}}{{$node.NodeName}}
	if id != nil && *id != "" {
		log.Debugf("[getRootResolver]Id: %q", *id)
		v{{$node.NodeName}}, err := nc.Get{{$node.PkgName}}{{$node.NodeName}}(context.TODO(), *id)
		if err != nil {
			log.Errorf("[getRootResolver]Error getting {{$node.NodeName}} node %q: %s", *id, err)
			return nil, nil
		}
		{{ $node.Alias }}
		{{ $node.ReturnType }}
		v{{$node.NodeName}}List = append(v{{$node.NodeName}}List, ret)
		log.Debugf("[getRootResolver]Output {{$node.NodeName}} objects %+v", v{{$node.NodeName}}List)
		return v{{$node.NodeName}}List, nil
	}

	log.Debugf("[getRootResolver]Id is empty, process all {{$node.NodeName}}s")

	v{{$node.NodeName}}ListObj, err := nc.{{$node.PkgName}}().List{{$node.GroupResourceNameTitle}}(context.TODO(), metav1.ListOptions{})
	if err != nil {
		log.Errorf("[getRootResolver]Error getting {{$node.NodeName}} node %s", err)
		return nil, nil
	}
	for _,i := range v{{$node.NodeName}}ListObj{
		v{{$node.NodeName}}, err := nc.Get{{$node.PkgName}}{{$node.NodeName}}(context.TODO(), i.DisplayName())
		if err != nil {
			log.Errorf("[getRootResolver]Error getting {{$node.NodeName}} node %q : %s", i.DisplayName(), err)
			continue
		}
		{{ $node.Alias }}
		{{ $node.ReturnType }}
		v{{$node.NodeName}}List = append(v{{$node.NodeName}}List, ret)
	}

	log.Debugf("[getRootResolver]Output {{$node.NodeName}} objects %v", v{{$node.NodeName}}List)
	return v{{$node.NodeName}}List, nil
}
{{ end }}{{end}}
{{- range $key, $query := $node.CustomQueries }}
// Custom query
func get{{$node.PkgName}}{{$node.NodeName}}{{$query.Name}}Resolver(obj *model.{{$node.PkgName}}{{$node.NodeName}}, {{ range $key, $arg := $query.Args }} {{$arg.Name}} *{{$arg.Type}}, {{ end }}) ({{- if eq $query.ApiType 0 }}*model.NexusGraphqlResponse{{- else if eq $query.ApiType 1 }}*model.TimeSeriesData {{- end}}, error) {
	parentLabels := make(map[string]string)
	if obj != nil {
		for k, v := range obj.ParentLabels {
			val, ok := v.(string)
			if ok {
				parentLabels[k] = val
			}
		}
	}
	{{- if eq $query.ApiType 0 }}
	query := &graphql.GraphQLQuery{
		Query: "{{$query.Name}}",
		UserProvidedArgs: map[string]string{
			{{- range $key, $arg := $query.Args }}
			"{{$arg.Name}}": pointerToString({{$arg.Name}}),
			{{- end }}
		},
		Hierarchy: parentLabels,
	}

	resp, err := c.Request("{{$query.ServiceEndpoint.Domain}}:{{$query.ServiceEndpoint.Port}}", nexus.GraphQLQueryApi, query)
	if err != nil {
		return nil, err
	}
	return resp.(*model.NexusGraphqlResponse), nil
	{{- else if eq $query.ApiType 1 }}
	metricArgs := &qm.MetricArg{
		QueryType: "/{{$query.Name}}",
		{{- range $key, $arg := $query.Args }}
		{{- if eq $arg.Name "StartTime" }}
		StartTime: *StartTime,
		{{- else if eq $arg.Name "EndTime" }}
		EndTime: *EndTime,
		{{- else if eq $arg.Name "Metric" }}
		Metric: *Metric,
		{{- else if eq $arg.Name "TimeInterval" }}
		TimeInterval: *TimeInterval,
		{{- end }}
		{{- end }}
		Hierarchy: parentLabels,
		UserProvidedArgs: map[string]string{
			{{- range $key, $arg := $query.Args }}
			{{- if and (ne $arg.Name "StartTime") (ne $arg.Name "EndTime") (ne $arg.Name "Metric") (ne $arg.Name "TimeInterval")}}
			"{{$arg.Name}}": pointerToString({{$arg.Name}}),
			{{- end }}
			{{- end }}
		},
	}
	resp, err := c.Request("{{$query.ServiceEndpoint.Domain}}:{{$query.ServiceEndpoint.Port}}", nexus.GetMetricsApi, metricArgs)
	if err != nil {
		return nil, err
	}
	return resp.(*model.TimeSeriesData), nil
	{{- end }}
}{{- end -}}
{{- end -}}
{{- range $key, $node := .Nodes }}
{{- range $key, $child := $node.ChildFields }}
{{- if $child.IsSingleton }}
//////////////////////////////////////
// CHILD RESOLVER (Singleton)
// FieldName: {{$child.FieldName}} Node: {{$child.NodeName}} PKG: {{$child.PkgName}}
//////////////////////////////////////
func get{{$child.PkgName}}{{$child.NodeName}}{{$child.FieldName}}Resolver(obj *model.{{$child.PkgName}}{{$child.NodeName}}) (*model.{{$child.FieldTypePkgPath}}, error) {
	log.Debugf("[get{{$child.PkgName}}{{$child.NodeName}}{{$child.FieldName}}Resolver]Parent Object %+v", obj)
	v{{$child.BaseTypeName}}, err := {{$child.ChainAPI}}.Get{{$child.FieldName}}(context.TODO())
	if err != nil {
	    log.Errorf("[get{{$child.PkgName}}{{$child.NodeName}}{{$child.FieldName}}Resolver]Error getting {{$child.NodeName}} node %s", err)
        return &model.{{$child.FieldTypePkgPath}}{}, nil
    }
	{{ $child.Alias }}
    for k, v := range obj.ParentLabels {
        parentLabels[k] = v
    }
	{{ $child.ReturnType }}

    log.Debugf("[get{{$child.PkgName}}{{$child.NodeName}}{{$child.FieldName}}Resolver]Output object %+v", ret)
	return ret, nil
}
{{- else }}
//////////////////////////////////////
// CHILD RESOLVER (Non Singleton)
// FieldName: {{$child.FieldName}} Node: {{$child.NodeName}} PKG: {{$child.PkgName}}
//////////////////////////////////////
func get{{$child.PkgName}}{{$child.NodeName}}{{$child.FieldName}}Resolver(obj *model.{{$child.PkgName}}{{$child.NodeName}}, id *string) (*model.{{$child.FieldTypePkgPath}}, error) {
	log.Debugf("[get{{$child.PkgName}}{{$child.NodeName}}{{$child.FieldName}}Resolver]Parent Object %+v", obj)
	if id != nil && *id != "" {
	     log.Debugf("[get{{$child.PkgName}}{{$child.NodeName}}{{$child.FieldName}}Resolver]Id %q", *id)
		v{{$child.BaseTypeName}}, err := {{$child.ChainAPI}}.Get{{$child.FieldName}}(context.TODO(), *id)
		if err != nil {
			log.Errorf("[get{{$child.PkgName}}{{$child.NodeName}}{{$child.FieldName}}Resolver]Error getting {{$child.FieldName}} node %q : %s", *id, err)
			return &model.{{$child.FieldTypePkgPath}}{}, nil
		}
		{{ $child.Alias }}
		for k, v := range obj.ParentLabels {
			parentLabels[k] = v
		}
		{{ $child.ReturnType }}

		log.Debugf("[get{{$child.PkgName}}{{$child.NodeName}}{{$child.FieldName}}Resolver]Output object %v", ret)
		return ret, nil
	}
	log.Debug("[get{{$child.PkgName}}{{$child.NodeName}}{{$child.FieldName}}Resolver]Id is empty, process all {{$child.FieldName}}s")
	v{{$child.BaseTypeName}}Parent, err := {{$child.LinkAPI}}
	if err != nil {
	    log.Errorf("[get{{$child.PkgName}}{{$child.NodeName}}{{$child.FieldName}}Resolver]Failed to get parent node %s", err)
        return &model.{{$child.FieldTypePkgPath}}{}, nil
    }
	v{{$child.BaseTypeName}}, err := v{{$child.BaseTypeName}}Parent.Get{{$child.FieldName}}(context.TODO())
	if err != nil {
	    log.Errorf("[get{{$child.PkgName}}{{$child.NodeName}}{{$child.FieldName}}Resolver]Error getting {{$child.FieldName}} node %s", err)
        return &model.{{$child.FieldTypePkgPath}}{}, nil
    }
	{{ $child.Alias }}
    for k, v := range obj.ParentLabels {
        parentLabels[k] = v
    }
	{{ $child.ReturnType }}

	log.Debugf("[get{{$child.PkgName}}{{$child.NodeName}}{{$child.FieldName}}Resolver]Output object %v", ret)

	return ret, nil
}
{{ end }}{{ end }}
{{- range $key, $link := $node.LinkFields }}
//////////////////////////////////////
// LINK RESOLVER
// FieldName: {{$link.FieldName}} Node: {{$link.NodeName}} PKG: {{$link.PkgName}}
//////////////////////////////////////
func get{{$link.PkgName}}{{$link.NodeName}}{{$link.FieldName}}Resolver(obj *model.{{$link.PkgName}}{{$link.NodeName}}) (*model.{{$link.FieldTypePkgPath}}, error) {
    log.Debugf("[get{{$link.PkgName}}{{$link.NodeName}}{{$link.FieldName}}Resolver]Parent Object %+v", obj)
	v{{$link.BaseTypeName}}Parent, err := {{$link.LinkAPI}}
	if err != nil {
	    log.Errorf("[get{{$link.PkgName}}{{$link.NodeName}}{{$link.FieldName}}Resolver]Error getting parent node %s", err)
        return &model.{{$link.FieldTypePkgPath}}{}, nil
    }
	v{{$link.BaseTypeName}}, err := v{{$link.BaseTypeName}}Parent.Get{{$link.FieldName}}(context.TODO())
	if err != nil {
		log.Errorf("[get{{$link.PkgName}}{{$link.NodeName}}{{$link.FieldName}}Resolver]Error getting {{$link.FieldName}} object %s", err)
        return &model.{{$link.FieldTypePkgPath}}{}, nil
    }
	{{ $link.Alias }}
    for k, v := range obj.ParentLabels {
        parentLabels[k] = v
    }
	{{ $link.ReturnType }}
	log.Debugf("[get{{$link.PkgName}}{{$link.NodeName}}{{$link.FieldName}}Resolver]Output object %v", ret)

	return ret, nil
}
{{ end }}
{{- range $key, $children := $node.ChildrenFields }}
//////////////////////////////////////
// CHILDREN RESOLVER
// FieldName: {{$children.FieldName}} Node: {{$children.NodeName}} PKG: {{$children.PkgName}}
//////////////////////////////////////
func get{{$children.PkgName}}{{$children.NodeName}}{{$children.FieldName}}Resolver(obj *model.{{$children.PkgName}}{{$children.NodeName}}, id *string) ([]*model.{{$children.FieldTypePkgPath}}, error) {
	log.Debugf("[get{{$children.PkgName}}{{$children.NodeName}}{{$children.FieldName}}Resolver]Parent Object %+v", obj)
	var v{{$children.FieldTypePkgPath}}List []*model.{{$children.FieldTypePkgPath}}
	if id != nil && *id != "" {
		log.Debugf("[get{{$children.PkgName}}{{$children.NodeName}}{{$children.FieldName}}Resolver]Id %q", *id)
		{{ if $children.IsSingleton }}v{{$children.BaseTypeName}}, err := {{$children.ChainAPI}}.Get{{$children.FieldName}}(context.TODO()){{ else }}v{{$children.BaseTypeName}}, err := {{$children.ChainAPI}}.Get{{$children.FieldName}}(context.TODO(), *id){{ end }}
		if err != nil {
			log.Errorf("[get{{$children.PkgName}}{{$children.NodeName}}{{$children.FieldName}}Resolver]Error getting {{$children.FieldName}} node %q : %s", *id, err)
            return v{{$children.FieldTypePkgPath}}List, nil
        }
		{{ $children.Alias }}
        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		{{ $children.ReturnType }}
		v{{$children.FieldTypePkgPath}}List = append(v{{$children.FieldTypePkgPath}}List, ret)

		log.Debugf("[get{{$children.PkgName}}{{$children.NodeName}}{{$children.FieldName}}Resolver]Output {{$children.FieldName}} objects %v", v{{$children.FieldTypePkgPath}}List)

		return v{{$children.FieldTypePkgPath}}List, nil
	}

	log.Debug("[get{{$children.PkgName}}{{$children.NodeName}}{{$children.FieldName}}Resolver]Id is empty, process all {{$children.FieldName}}s")

	v{{$children.BaseTypeName}}Parent, err := {{$children.LinkAPI}}
	if err != nil {
	    log.Errorf("[get{{$children.PkgName}}{{$children.NodeName}}{{$children.FieldName}}Resolver]Error getting parent node %s", err)
        return v{{$children.FieldTypePkgPath}}List, nil
    }
	v{{$children.BaseTypeName}}AllObj, err := v{{$children.BaseTypeName}}Parent.GetAll{{$children.FieldName}}(context.TODO())
	if err != nil {
	    log.Errorf("[get{{$children.PkgName}}{{$children.NodeName}}{{$children.FieldName}}Resolver]Error getting {{$children.FieldName}} objects %s", err)
        return v{{$children.FieldTypePkgPath}}List, nil
    }
	for _, i := range v{{$children.BaseTypeName}}AllObj {
		{{ if $children.IsSingleton }}v{{$children.BaseTypeName}}, err := {{$children.ChainAPI}}.Get{{$children.FieldName}}(context.TODO()){{ else }}v{{$children.BaseTypeName}}, err := {{$children.ChainAPI}}.Get{{$children.FieldName}}(context.TODO(), i.DisplayName()){{ end }}
		if err != nil {
	        log.Errorf("[get{{$children.PkgName}}{{$children.NodeName}}{{$children.FieldName}}Resolver]Error getting {{$children.FieldName}} node %q : %s", i.DisplayName(), err)
            continue
		}
		{{ $children.Alias }}
		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		{{ $children.ReturnType }}
		v{{$children.FieldTypePkgPath}}List = append(v{{$children.FieldTypePkgPath}}List, ret)
	}

	log.Debugf("[get{{$children.PkgName}}{{$children.NodeName}}{{$children.FieldName}}Resolver]Output {{$children.FieldName}} objects %v", v{{$children.FieldTypePkgPath}}List)

	return v{{$children.FieldTypePkgPath}}List, nil
}
{{ end }}
{{- range $key, $links := $node.LinksFields }}
//////////////////////////////////////
// LINKS RESOLVER
// FieldName: {{$links.FieldName}} Node: {{$links.NodeName}} PKG: {{$links.PkgName}}
//////////////////////////////////////
func get{{$links.PkgName}}{{$links.NodeName}}{{$links.FieldName}}Resolver(obj *model.{{$links.PkgName}}{{$links.NodeName}}, id *string) ([]*model.{{$links.FieldTypePkgPath}}, error) {
	log.Debugf("[get{{$links.PkgName}}{{$links.NodeName}}{{$links.FieldName}}Resolver]Parent Object %+v", obj)
	var v{{$links.FieldTypePkgPath}}List []*model.{{$links.FieldTypePkgPath}}
	if id != nil && *id != "" {
		log.Debugf("[get{{$links.PkgName}}{{$links.NodeName}}{{$links.FieldName}}Resolver]Id %q", *id)
		v{{$links.BaseTypeName}}Parent, err := {{$links.LinkAPI}}
		if err != nil {
			log.Errorf("[get{{$links.PkgName}}{{$links.NodeName}}{{$links.FieldName}}Resolver]Error getting {{$links.FieldName}} %q : %s", *id, err)
			return v{{$links.FieldTypePkgPath}}List, nil
		}
		v{{$links.BaseTypeName}}, err := v{{$links.BaseTypeName}}Parent.Get{{$links.FieldName}}(context.TODO(), *id)
		if err != nil {
			log.Errorf("[get{{$links.PkgName}}{{$links.NodeName}}{{$links.FieldName}}Resolver]Error getting {{$links.FieldName}} %q : %s", *id, err)
			return v{{$links.FieldTypePkgPath}}List, nil
		}
		{{ $links.Alias }}
        for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		{{ $links.ReturnType }}
		v{{$links.FieldTypePkgPath}}List = append(v{{$links.FieldTypePkgPath}}List, ret)

		log.Debugf("[get{{$links.PkgName}}{{$links.NodeName}}{{$links.FieldName}}Resolver]Output {{$links.FieldName}} objects %v", v{{$links.FieldTypePkgPath}}List)

		return v{{$links.FieldTypePkgPath}}List, nil
	}

	log.Debug("[get{{$links.PkgName}}{{$links.NodeName}}{{$links.FieldName}}Resolver]Id is empty, process all {{$links.FieldName}}s")

	v{{$links.BaseTypeName}}Parent, err := {{$links.LinkAPI}}
	if err != nil {
	    log.Errorf("[get{{$links.PkgName}}{{$links.NodeName}}{{$links.FieldName}}Resolver]Error getting parent node %s", err)
        return v{{$links.FieldTypePkgPath}}List, nil
    }
	v{{$links.BaseTypeName}}AllObj, err := v{{$links.BaseTypeName}}Parent.GetAll{{$links.FieldName}}(context.TODO())
	if err != nil {
	    log.Errorf("[get{{$links.PkgName}}{{$links.NodeName}}{{$links.FieldName}}Resolver]Error getting {{$links.FieldName}} %s", err)
        return v{{$links.FieldTypePkgPath}}List, nil
    }
	for _, i := range v{{$links.BaseTypeName}}AllObj {
		v{{$links.BaseTypeName}}Parent, err := {{$links.LinkAPI}}
		if err != nil {
			log.Errorf("[get{{$links.PkgName}}{{$links.NodeName}}{{$links.FieldName}}Resolver]Error getting parent node %s, skipping...", err)
            continue
		}
		v{{$links.BaseTypeName}}, err := v{{$links.BaseTypeName}}Parent.Get{{$links.FieldName}}(context.TODO(), i.DisplayName())
		if err != nil {
	        log.Errorf("[get{{$links.PkgName}}{{$links.NodeName}}{{$links.FieldName}}Resolver]Error getting {{$links.FieldName}} node %q : %s, skipping...", i.DisplayName(), err)
			continue
		}
		{{ $links.Alias }}
		for k, v := range obj.ParentLabels {
            parentLabels[k] = v
        }
		{{ $links.ReturnType }}
		v{{$links.FieldTypePkgPath}}List = append(v{{$links.FieldTypePkgPath}}List, ret)
	}
	log.Debugf("[get{{$links.PkgName}}{{$links.NodeName}}{{$links.FieldName}}Resolver]List of {{$links.FieldName}} object %v", v{{$links.FieldTypePkgPath}}List)
	return v{{$links.FieldTypePkgPath}}List, nil
}
{{ end }}{{ end }}
