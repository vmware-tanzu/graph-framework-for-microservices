// Code generated by nexus. DO NOT EDIT.

// Nexus client is a shim layer working over k8s API meant to simplify graph operation on nexus nodes.
// Features of nexus client:
// - create/get/update/delete/list of nexus nodes,
// - name hashing to avoid name collision between objects with same name but different parents,
// - ability to get, create and delete child of given parent object,
// - ability to add link and remove link to given object,
// - recursive delete of object and all it's children.
// To initialize client use NewForConfig function with Rest Config as a parameter. After that you can start using
// nexus client. You can check example in: https://gitlab.eng.vmware.com/nsx-allspark_users/nexus-sdk/docs/-/tree/master/example/crudapp

package nexus_client

import (
	"context"
	"encoding/json"
	customerrors "errors"
	"fmt"
	"sync"
	"time"

	"github.com/sirupsen/logrus"
	"k8s.io/apimachinery/pkg/api/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	"k8s.io/client-go/rest"
	cache "k8s.io/client-go/tools/cache"

	baseClientset "../../example/test-utils/output-group-name-with-hyphen-datamodel/crd_generated/client/clientset/versioned"
	fakeBaseClienset "../../example/test-utils/output-group-name-with-hyphen-datamodel/crd_generated/client/clientset/versioned/fake"
	"../../example/test-utils/output-group-name-with-hyphen-datamodel/crd_generated/common"
	"../../example/test-utils/output-group-name-with-hyphen-datamodel/crd_generated/helper"

	baseconfigtsmtanzuvmwarecomv1 "../../example/test-utils/output-group-name-with-hyphen-datamodel/crd_generated/apis/config.tsm-tanzu.vmware.com/v1"
	baseprojecttsmtanzuvmwarecomv1 "../../example/test-utils/output-group-name-with-hyphen-datamodel/crd_generated/apis/project.tsm-tanzu.vmware.com/v1"
	baseroottsmtanzuvmwarecomv1 "../../example/test-utils/output-group-name-with-hyphen-datamodel/crd_generated/apis/root.tsm-tanzu.vmware.com/v1"

	informerconfigtsmtanzuvmwarecomv1 "../../example/test-utils/output-group-name-with-hyphen-datamodel/crd_generated/client/informers/externalversions/config.tsm-tanzu.vmware.com/v1"
	informerprojecttsmtanzuvmwarecomv1 "../../example/test-utils/output-group-name-with-hyphen-datamodel/crd_generated/client/informers/externalversions/project.tsm-tanzu.vmware.com/v1"
	informerroottsmtanzuvmwarecomv1 "../../example/test-utils/output-group-name-with-hyphen-datamodel/crd_generated/client/informers/externalversions/root.tsm-tanzu.vmware.com/v1"
)

var log = logrus.New()

type Clientset struct {
	baseClient   baseClientset.Interface
	configTsmV1  *ConfigTsmV1
	projectTsmV1 *ProjectTsmV1
	rootTsmV1    *RootTsmV1
}

type subscription struct {
	informer cache.SharedIndexInformer
	stop     chan struct{}
}

// subscriptionMap will store crd string as key and value as subscription type,
// for example key="roots.orgchart.vmware.org" and value=subscription{}
var subscriptionMap = sync.Map{}

func subscribe(key string, informer cache.SharedIndexInformer) {
	s := subscription{
		informer: informer,
		stop:     make(chan struct{}),
	}
	go s.informer.Run(s.stop)
	subscriptionMap.Store(key, s)
}

func (c *Clientset) SubscribeAll() {
	var key string

	key = "configs.config.tsm-tanzu.vmware.com"
	if _, ok := subscriptionMap.Load(key); !ok {
		informer := informerconfigtsmtanzuvmwarecomv1.NewConfigInformer(c.baseClient, 0, cache.Indexers{})
		subscribe(key, informer)
	}

	key = "projects.project.tsm-tanzu.vmware.com"
	if _, ok := subscriptionMap.Load(key); !ok {
		informer := informerprojecttsmtanzuvmwarecomv1.NewProjectInformer(c.baseClient, 0, cache.Indexers{})
		subscribe(key, informer)
	}

	key = "roots.root.tsm-tanzu.vmware.com"
	if _, ok := subscriptionMap.Load(key); !ok {
		informer := informerroottsmtanzuvmwarecomv1.NewRootInformer(c.baseClient, 0, cache.Indexers{})
		subscribe(key, informer)
	}

}

func (c *Clientset) UnsubscribeAll() {
	subscriptionMap.Range(func(key, s interface{}) bool {
		close(s.(subscription).stop)
		subscriptionMap.Delete(key)
		return true
	})
}

// NewForConfig returns Client which can be which can be used to connect to database
func NewForConfig(config *rest.Config) (*Clientset, error) {
	baseClient, err := baseClientset.NewForConfig(config)
	if err != nil {
		return nil, err
	}
	client := &Clientset{}
	client.baseClient = baseClient
	client.configTsmV1 = newConfigTsmV1(client)
	client.projectTsmV1 = newProjectTsmV1(client)
	client.rootTsmV1 = newRootTsmV1(client)

	return client, nil
}

// NewFakeClient creates simple client which can be used for unit tests
func NewFakeClient() *Clientset {
	client := &Clientset{}
	client.baseClient = fakeBaseClienset.NewSimpleClientset()
	client.configTsmV1 = newConfigTsmV1(client)
	client.projectTsmV1 = newProjectTsmV1(client)
	client.rootTsmV1 = newRootTsmV1(client)

	return client
}

type PatchOp struct {
	Op    string      `json:"op"`
	Path  string      `json:"path"`
	Value interface{} `json:"value,omitempty"`
}

type Patch []PatchOp

func (p Patch) Marshal() ([]byte, error) {
	return json.Marshal(p)
}

func (c *Clientset) Config() *ConfigTsmV1 {
	return c.configTsmV1
}
func (c *Clientset) Project() *ProjectTsmV1 {
	return c.projectTsmV1
}
func (c *Clientset) Root() *RootTsmV1 {
	return c.rootTsmV1
}

type ConfigTsmV1 struct {
	client *Clientset
}

func newConfigTsmV1(client *Clientset) *ConfigTsmV1 {
	return &ConfigTsmV1{
		client: client,
	}
}

type ProjectTsmV1 struct {
	client *Clientset
}

func newProjectTsmV1(client *Clientset) *ProjectTsmV1 {
	return &ProjectTsmV1{
		client: client,
	}
}

type RootTsmV1 struct {
	client *Clientset
}

func newRootTsmV1(client *Clientset) *RootTsmV1 {
	return &RootTsmV1{
		client: client,
	}
}

// GetConfigByName returns object stored in the database under the hashedName which is a hash of display
// name and parents names. Use it when you know hashed name of object.
func (group *ConfigTsmV1) GetConfigByName(ctx context.Context, hashedName string) (*ConfigConfig, error) {
	key := "configs.config.tsm-tanzu.vmware.com"
	if s, ok := subscriptionMap.Load(key); ok {
		item, exists, err := s.(subscription).informer.GetStore().GetByKey(hashedName)
		if !exists {
			return nil, err
		}

		result, _ := item.(*baseconfigtsmtanzuvmwarecomv1.Config)
		return &ConfigConfig{
			client: group.client,
			Config: result,
		}, nil
	} else {
		retryCount := 12
		for {
			result, err := group.client.baseClient.
				ConfigTsmV1().
				Configs().Get(ctx, hashedName, metav1.GetOptions{})
			if err != nil {
				log.Errorf("Failed to Get Configs: %+v", err)
				if errors.IsTimeout(err) || customerrors.Is(err, context.DeadlineExceeded) {
					log.Errorf("[Retry Count: %d ] %+v", retryCount, err)
					if retryCount == 0 {
						log.Error("Max Retry exceed on Get Configs")
						return nil, err
					}
					retryCount -= 1
					time.Sleep(5 * time.Second)
				} else {
					log.Errorf("Unexpected Error: %+v", err)
					return nil, err
				}
			}
			return &ConfigConfig{
				client: group.client,
				Config: result,
			}, nil
		}
	}
}

// ForceReadConfigByName read object directly from the database under the hashedName which is a hash of display
// name and parents names. Use it when you know hashed name of object.
func (group *ConfigTsmV1) ForceReadConfigByName(ctx context.Context, hashedName string) (*ConfigConfig, error) {
	result, err := group.client.baseClient.
		ConfigTsmV1().
		Configs().Get(ctx, hashedName, metav1.GetOptions{})
	if err != nil {
		return nil, err
	}

	return &ConfigConfig{
		client: group.client,
		Config: result,
	}, nil
}

// DeleteConfigByName deletes object stored in the database under the hashedName which is a hash of
// display name and parents names. Use it when you know hashed name of object.
func (group *ConfigTsmV1) DeleteConfigByName(ctx context.Context, hashedName string) (err error) {

	err = group.client.baseClient.
		ConfigTsmV1().
		Configs().Delete(ctx, hashedName, metav1.DeleteOptions{})
	if err != nil {
		return err
	}

	return
}

// CreateConfigByName creates object in the database without hashing the name.
// Use it directly ONLY when objToCreate.Name is hashed name of the object.
func (group *ConfigTsmV1) CreateConfigByName(ctx context.Context,
	objToCreate *baseconfigtsmtanzuvmwarecomv1.Config) (*ConfigConfig, error) {
	if objToCreate.GetLabels() == nil {
		objToCreate.Labels = make(map[string]string)
	}
	if _, ok := objToCreate.Labels[common.DISPLAY_NAME_LABEL]; !ok {
		objToCreate.Labels[common.DISPLAY_NAME_LABEL] = objToCreate.GetName()
	}
	if objToCreate.Labels[common.DISPLAY_NAME_LABEL] == "" {
		objToCreate.Labels[common.DISPLAY_NAME_LABEL] = helper.DEFAULT_KEY
	}
	if objToCreate.Labels[common.DISPLAY_NAME_LABEL] != helper.DEFAULT_KEY {
		return nil, NewSingletonNameError(objToCreate.Labels[common.DISPLAY_NAME_LABEL])
	}

	result, err := group.client.baseClient.
		ConfigTsmV1().
		Configs().Create(ctx, objToCreate, metav1.CreateOptions{})
	if err != nil {
		if customerrors.Is(err, context.DeadlineExceeded) {
			log.Errorf("context deadline exceeded, on creating GNS: %+v", objToCreate)
			return nil, context.DeadlineExceeded
		} else if customerrors.Is(err, context.Canceled) {
			log.Errorf("context cancelled, on creating GNS: %+v", objToCreate)
			return nil, context.Canceled
		} else {
			log.Errorf("Unexpected Error: %+v", err)
			return nil, err
		}
	}

	return &ConfigConfig{
		client: group.client,
		Config: result,
	}, nil
}

// UpdateConfigByName updates object stored in the database under the hashedName which is a hash of
// display name and parents names.
func (group *ConfigTsmV1) UpdateConfigByName(ctx context.Context,
	objToUpdate *baseconfigtsmtanzuvmwarecomv1.Config) (*ConfigConfig, error) {
	if objToUpdate.Labels[common.DISPLAY_NAME_LABEL] != helper.DEFAULT_KEY {
		return nil, NewSingletonNameError(objToUpdate.Labels[common.DISPLAY_NAME_LABEL])
	}
	// ResourceVersion must be set for update
	if objToUpdate.ResourceVersion == "" {
		current, err := group.client.baseClient.
			ConfigTsmV1().
			Configs().Get(ctx, objToUpdate.GetName(), metav1.GetOptions{})
		if err != nil {
			if customerrors.Is(err, context.DeadlineExceeded) {
				log.Errorf("context deadline exceeded, on creating GNS: %+v", objToUpdate)
				return nil, context.DeadlineExceeded
			} else if customerrors.Is(err, context.Canceled) {
				log.Errorf("context cancelled, on creating GNS: %+v", objToUpdate)
				return nil, context.Canceled
			} else {
				log.Errorf("Unexpected Error: %+v", err)
				return nil, err
			}
		}
		objToUpdate.ResourceVersion = current.ResourceVersion
	}

	var patch Patch
	patch = append(patch, PatchOp{
		Op:    "replace",
		Path:  "/metadata",
		Value: objToUpdate.ObjectMeta,
	})

	patchValueFieldX :=
		objToUpdate.Spec.FieldX
	patchOpFieldX := PatchOp{
		Op:    "replace",
		Path:  "/spec/fieldX",
		Value: patchValueFieldX,
	}
	patch = append(patch, patchOpFieldX)

	patchValueFieldY :=
		objToUpdate.Spec.FieldY
	patchOpFieldY := PatchOp{
		Op:    "replace",
		Path:  "/spec/fieldY",
		Value: patchValueFieldY,
	}
	patch = append(patch, patchOpFieldY)

	patchValueMyStructField :=
		objToUpdate.Spec.MyStructField
	patchOpMyStructField := PatchOp{
		Op:    "replace",
		Path:  "/spec/myStructField",
		Value: patchValueMyStructField,
	}
	patch = append(patch, patchOpMyStructField)

	marshaled, err := patch.Marshal()
	if err != nil {
		return nil, err
	}
	result, err := group.client.baseClient.
		ConfigTsmV1().
		Configs().Patch(ctx, objToUpdate.GetName(), types.JSONPatchType, marshaled, metav1.PatchOptions{}, "")
	if err != nil {
		return nil, err
	}

	return &ConfigConfig{
		client: group.client,
		Config: result,
	}, nil
}

// ListConfigs returns slice of all existing objects of this type. Selectors can be provided in opts parameter.
func (group *ConfigTsmV1) ListConfigs(ctx context.Context,
	opts metav1.ListOptions) (result []*ConfigConfig, err error) {
	key := "configs.config.tsm-tanzu.vmware.com"
	if s, ok := subscriptionMap.Load(key); ok {
		items := s.(subscription).informer.GetStore().List()
		result = make([]*ConfigConfig, len(items))
		for k, v := range items {
			item, _ := v.(*baseconfigtsmtanzuvmwarecomv1.Config)
			result[k] = &ConfigConfig{
				client: group.client,
				Config: item,
			}
		}
	} else {
		list, err := group.client.baseClient.ConfigTsmV1().
			Configs().List(ctx, opts)
		if err != nil {
			return nil, err
		}
		result = make([]*ConfigConfig, len(list.Items))
		for k, v := range list.Items {
			item := v
			result[k] = &ConfigConfig{
				client: group.client,
				Config: &item,
			}
		}
	}
	return
}

type ConfigConfig struct {
	client *Clientset
	*baseconfigtsmtanzuvmwarecomv1.Config
}

// Delete removes obj and all it's children from the database.
func (obj *ConfigConfig) Delete(ctx context.Context) error {
	err := obj.client.Config().DeleteConfigByName(ctx, obj.GetName())
	if err != nil {
		return err
	}
	obj.Config = nil
	return nil
}

// Update updates spec of object in database. Children and Link can not be updated using this function.
func (obj *ConfigConfig) Update(ctx context.Context) error {
	result, err := obj.client.Config().UpdateConfigByName(ctx, obj.Config)
	if err != nil {
		return err
	}
	obj.Config = result.Config
	return nil
}

// GetConfigConfig calculates the hashed name based on parents and
// returns given object
func (c *Clientset) GetConfigConfig(ctx context.Context) (result *ConfigConfig, err error) {
	hashedName := helper.GetHashedName("configs.config.tsm-tanzu.vmware.com", nil, helper.DEFAULT_KEY)
	return c.Config().GetConfigByName(ctx, hashedName)
}

func (c *Clientset) ConfigConfig() *configConfigTsmV1Chainer {
	parentLabels := make(map[string]string)
	parentLabels["configs.config.tsm-tanzu.vmware.com"] = helper.DEFAULT_KEY
	return &configConfigTsmV1Chainer{
		client:       c,
		name:         helper.DEFAULT_KEY,
		parentLabels: parentLabels,
	}
}

// AddConfigConfig calculates hashed name of the object based on
// parents names and creates it. objToCreate.Name is changed to the hashed name. Original name (helper.DEFAULT_KEY) is preserved in
// nexus/display_name label and can be obtained using DisplayName() method.
func (c *Clientset) AddConfigConfig(ctx context.Context,
	objToCreate *baseconfigtsmtanzuvmwarecomv1.Config) (result *ConfigConfig, err error) {
	if objToCreate.GetName() == "" {
		objToCreate.SetName(helper.DEFAULT_KEY)
	}
	if objToCreate.GetName() != helper.DEFAULT_KEY {
		return nil, NewSingletonNameError(objToCreate.GetName())
	}
	if objToCreate.Labels == nil {
		objToCreate.Labels = map[string]string{}
	}
	if objToCreate.Labels[common.IS_NAME_HASHED_LABEL] != "true" {
		objToCreate.Labels[common.DISPLAY_NAME_LABEL] = objToCreate.GetName()
		objToCreate.Labels[common.IS_NAME_HASHED_LABEL] = "true"
		hashedName := helper.GetHashedName(objToCreate.CRDName(), nil, objToCreate.GetName())
		objToCreate.Name = hashedName
	}
	return c.Config().CreateConfigByName(ctx, objToCreate)
}

// DeleteConfigConfig calculates hashedName of object based on
// parents and deletes given object
func (c *Clientset) DeleteConfigConfig(ctx context.Context) (err error) {
	hashedName := helper.GetHashedName("configs.config.tsm-tanzu.vmware.com", nil, helper.DEFAULT_KEY)
	return c.Config().DeleteConfigByName(ctx, hashedName)
}

type configConfigTsmV1Chainer struct {
	client       *Clientset
	name         string
	parentLabels map[string]string
}

func (c *configConfigTsmV1Chainer) Subscribe() {
	key := "configs.config.tsm-tanzu.vmware.com"
	if _, ok := subscriptionMap.Load(key); !ok {
		informer := informerconfigtsmtanzuvmwarecomv1.NewConfigInformer(c.client.baseClient, 0, cache.Indexers{})
		subscribe(key, informer)
	}
}

func (c *configConfigTsmV1Chainer) Unsubscribe() {
	key := "configs.config.tsm-tanzu.vmware.com"
	if s, ok := subscriptionMap.Load(key); ok {
		close(s.(subscription).stop)
		subscriptionMap.Delete(key)
	}
}

func (c *configConfigTsmV1Chainer) IsSubscribed() bool {
	key := "configs.config.tsm-tanzu.vmware.com"
	_, ok := subscriptionMap.Load(key)
	return ok
}

func (c *configConfigTsmV1Chainer) RegisterEventHandler(addCB func(obj *ConfigConfig), updateCB func(oldObj, newObj *ConfigConfig), deleteCB func(obj *ConfigConfig)) (cache.ResourceEventHandlerRegistration, error) {
	fmt.Println("RegisterEventHandler for ConfigConfig")
	var (
		registrationId cache.ResourceEventHandlerRegistration
		err            error
		informer       cache.SharedIndexInformer
	)
	key := "configs.config.tsm-tanzu.vmware.com"
	stopper := make(chan struct{})
	if s, ok := subscriptionMap.Load(key); ok {
		fmt.Println("Informer exists for ConfigConfig")
		sub := s.(subscription)
		informer = sub.informer
	} else {
		fmt.Println("Informer doesn't exists for ConfigConfig, so creating a new one")
		informer = informerconfigtsmtanzuvmwarecomv1.NewConfigInformer(c.client.baseClient, 0, cache.Indexers{})
		go informer.Run(stopper)
		subscribe(key, informer)
	}
	registrationId, err = informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
		AddFunc: func(obj interface{}) {
			nc := &ConfigConfig{
				client: c.client,
				Config: obj.(*baseconfigtsmtanzuvmwarecomv1.Config),
			}

			addCB(nc)
		},

		UpdateFunc: func(oldObj, newObj interface{}) {
			oldData := &ConfigConfig{
				client: c.client,
				Config: oldObj.(*baseconfigtsmtanzuvmwarecomv1.Config),
			}
			newData := &ConfigConfig{
				client: c.client,
				Config: newObj.(*baseconfigtsmtanzuvmwarecomv1.Config),
			}
			updateCB(oldData, newData)
		},

		DeleteFunc: func(obj interface{}) {
			nc := &ConfigConfig{
				client: c.client,
				Config: obj.(*baseconfigtsmtanzuvmwarecomv1.Config),
			}

			deleteCB(nc)
		},
	})
	return registrationId, err
}

func (c *configConfigTsmV1Chainer) RegisterAddCallback(cbfn func(obj *ConfigConfig)) (cache.ResourceEventHandlerRegistration, error) {
	fmt.Println("ConfigConfig -->  RegisterAddCallback!")
	var (
		registrationId cache.ResourceEventHandlerRegistration
		err            error
	)
	key := "configs.config.tsm-tanzu.vmware.com"
	stopper := make(chan struct{})
	if s, ok := subscriptionMap.Load(key); ok {
		fmt.Println("[ConfigConfig] ---SUBSCRIBE-INFORMER---->")
		sub := s.(subscription)
		registrationId, err = sub.informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
			AddFunc: func(obj interface{}) {
				nc := &ConfigConfig{
					client: c.client,
					Config: obj.(*baseconfigtsmtanzuvmwarecomv1.Config),
				}

				cbfn(nc)
			},
		})
	} else {
		fmt.Println("[ConfigConfig] ---NEW-INFORMER---->")
		informer := informerconfigtsmtanzuvmwarecomv1.NewConfigInformer(c.client.baseClient, 0, cache.Indexers{})
		registrationId, err = informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
			AddFunc: func(obj interface{}) {
				nc := &ConfigConfig{
					client: c.client,
					Config: obj.(*baseconfigtsmtanzuvmwarecomv1.Config),
				}

				cbfn(nc)
			},
		})
		go informer.Run(stopper)
	}
	return registrationId, err
}

func (c *configConfigTsmV1Chainer) RegisterUpdateCallback(cbfn func(oldObj, newObj *ConfigConfig)) (cache.ResourceEventHandlerRegistration, error) {
	fmt.Println("ConfigConfig -->  RegisterUpdateCallback!")
	var (
		registrationId cache.ResourceEventHandlerRegistration
		err            error
	)
	key := "configs.config.tsm-tanzu.vmware.com"
	stopper := make(chan struct{})
	if s, ok := subscriptionMap.Load(key); ok {
		fmt.Println("[ConfigConfig] ---SUBSCRIBE-INFORMER---->")
		sub := s.(subscription)
		registrationId, err = sub.informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
			UpdateFunc: func(oldObj, newObj interface{}) {
				oldData := &ConfigConfig{
					client: c.client,
					Config: oldObj.(*baseconfigtsmtanzuvmwarecomv1.Config),
				}
				newData := &ConfigConfig{
					client: c.client,
					Config: newObj.(*baseconfigtsmtanzuvmwarecomv1.Config),
				}
				cbfn(oldData, newData)
			},
		})
	} else {
		fmt.Println("[ConfigConfig] ---NEW-INFORMER---->")
		informer := informerconfigtsmtanzuvmwarecomv1.NewConfigInformer(c.client.baseClient, 0, cache.Indexers{})
		registrationId, err = informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
			UpdateFunc: func(oldObj, newObj interface{}) {
				oldData := &ConfigConfig{
					client: c.client,
					Config: oldObj.(*baseconfigtsmtanzuvmwarecomv1.Config),
				}
				newData := &ConfigConfig{
					client: c.client,
					Config: newObj.(*baseconfigtsmtanzuvmwarecomv1.Config),
				}
				cbfn(oldData, newData)
			},
		})
		go informer.Run(stopper)
	}
	return registrationId, err
}

func (c *configConfigTsmV1Chainer) RegisterDeleteCallback(cbfn func(obj *ConfigConfig)) (cache.ResourceEventHandlerRegistration, error) {
	fmt.Println("ConfigConfig -->  RegisterDeleteCallback!")
	var (
		registrationId cache.ResourceEventHandlerRegistration
		err            error
	)
	key := "configs.config.tsm-tanzu.vmware.com"
	stopper := make(chan struct{})
	if s, ok := subscriptionMap.Load(key); ok {
		fmt.Println("[ConfigConfig] ---SUBSCRIBE-INFORMER---->")
		sub := s.(subscription)
		registrationId, err = sub.informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
			DeleteFunc: func(obj interface{}) {
				nc := &ConfigConfig{
					client: c.client,
					Config: obj.(*baseconfigtsmtanzuvmwarecomv1.Config),
				}

				cbfn(nc)
			},
		})
	} else {
		fmt.Println("[ConfigConfig] ---NEW-INFORMER---->")
		informer := informerconfigtsmtanzuvmwarecomv1.NewConfigInformer(c.client.baseClient, 0, cache.Indexers{})
		registrationId, err = informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
			DeleteFunc: func(obj interface{}) {
				nc := &ConfigConfig{
					client: c.client,
					Config: obj.(*baseconfigtsmtanzuvmwarecomv1.Config),
				}

				cbfn(nc)
			},
		})
		go informer.Run(stopper)
	}
	return registrationId, err
}

// GetProjectByName returns object stored in the database under the hashedName which is a hash of display
// name and parents names. Use it when you know hashed name of object.
func (group *ProjectTsmV1) GetProjectByName(ctx context.Context, hashedName string) (*ProjectProject, error) {
	key := "projects.project.tsm-tanzu.vmware.com"
	if s, ok := subscriptionMap.Load(key); ok {
		item, exists, err := s.(subscription).informer.GetStore().GetByKey(hashedName)
		if !exists {
			return nil, err
		}

		result, _ := item.(*baseprojecttsmtanzuvmwarecomv1.Project)
		return &ProjectProject{
			client:  group.client,
			Project: result,
		}, nil
	} else {
		retryCount := 12
		for {
			result, err := group.client.baseClient.
				ProjectTsmV1().
				Projects().Get(ctx, hashedName, metav1.GetOptions{})
			if err != nil {
				log.Errorf("Failed to Get Projects: %+v", err)
				if errors.IsTimeout(err) || customerrors.Is(err, context.DeadlineExceeded) {
					log.Errorf("[Retry Count: %d ] %+v", retryCount, err)
					if retryCount == 0 {
						log.Error("Max Retry exceed on Get Projects")
						return nil, err
					}
					retryCount -= 1
					time.Sleep(5 * time.Second)
				} else {
					log.Errorf("Unexpected Error: %+v", err)
					return nil, err
				}
			}
			return &ProjectProject{
				client:  group.client,
				Project: result,
			}, nil
		}
	}
}

// ForceReadProjectByName read object directly from the database under the hashedName which is a hash of display
// name and parents names. Use it when you know hashed name of object.
func (group *ProjectTsmV1) ForceReadProjectByName(ctx context.Context, hashedName string) (*ProjectProject, error) {
	result, err := group.client.baseClient.
		ProjectTsmV1().
		Projects().Get(ctx, hashedName, metav1.GetOptions{})
	if err != nil {
		return nil, err
	}

	return &ProjectProject{
		client:  group.client,
		Project: result,
	}, nil
}

// DeleteProjectByName deletes object stored in the database under the hashedName which is a hash of
// display name and parents names. Use it when you know hashed name of object.
func (group *ProjectTsmV1) DeleteProjectByName(ctx context.Context, hashedName string) (err error) {

	result, err := group.client.baseClient.
		ProjectTsmV1().
		Projects().Get(ctx, hashedName, metav1.GetOptions{})
	if err != nil {
		if customerrors.Is(err, context.DeadlineExceeded) {
			log.Errorf("context deadline exceeded, on creating GNS: %+v", hashedName)
			return context.DeadlineExceeded
		} else if customerrors.Is(err, context.Canceled) {
			log.Errorf("context cancelled, on creating GNS: %+v", hashedName)
			return context.Canceled
		} else {
			log.Errorf("Unexpected Error: %+v", err)
			return err
		}
	}

	if result.Spec.ConfigGvk != nil {
		err := group.client.
			Config().
			DeleteConfigByName(ctx, result.Spec.ConfigGvk.Name)
		if err != nil && !errors.IsNotFound(err) {
			return err
		}
	}

	err = group.client.baseClient.
		ProjectTsmV1().
		Projects().Delete(ctx, hashedName, metav1.DeleteOptions{})
	if err != nil {
		return err
	}

	return
}

// CreateProjectByName creates object in the database without hashing the name.
// Use it directly ONLY when objToCreate.Name is hashed name of the object.
func (group *ProjectTsmV1) CreateProjectByName(ctx context.Context,
	objToCreate *baseprojecttsmtanzuvmwarecomv1.Project) (*ProjectProject, error) {
	if objToCreate.GetLabels() == nil {
		objToCreate.Labels = make(map[string]string)
	}
	if _, ok := objToCreate.Labels[common.DISPLAY_NAME_LABEL]; !ok {
		objToCreate.Labels[common.DISPLAY_NAME_LABEL] = objToCreate.GetName()
	}
	if objToCreate.Labels[common.DISPLAY_NAME_LABEL] == "" {
		objToCreate.Labels[common.DISPLAY_NAME_LABEL] = helper.DEFAULT_KEY
	}
	if objToCreate.Labels[common.DISPLAY_NAME_LABEL] != helper.DEFAULT_KEY {
		return nil, NewSingletonNameError(objToCreate.Labels[common.DISPLAY_NAME_LABEL])
	}

	objToCreate.Spec.ConfigGvk = nil

	result, err := group.client.baseClient.
		ProjectTsmV1().
		Projects().Create(ctx, objToCreate, metav1.CreateOptions{})
	if err != nil {
		if customerrors.Is(err, context.DeadlineExceeded) {
			log.Errorf("context deadline exceeded, on creating GNS: %+v", objToCreate)
			return nil, context.DeadlineExceeded
		} else if customerrors.Is(err, context.Canceled) {
			log.Errorf("context cancelled, on creating GNS: %+v", objToCreate)
			return nil, context.Canceled
		} else {
			log.Errorf("Unexpected Error: %+v", err)
			return nil, err
		}
	}

	return &ProjectProject{
		client:  group.client,
		Project: result,
	}, nil
}

// UpdateProjectByName updates object stored in the database under the hashedName which is a hash of
// display name and parents names.
func (group *ProjectTsmV1) UpdateProjectByName(ctx context.Context,
	objToUpdate *baseprojecttsmtanzuvmwarecomv1.Project) (*ProjectProject, error) {
	if objToUpdate.Labels[common.DISPLAY_NAME_LABEL] != helper.DEFAULT_KEY {
		return nil, NewSingletonNameError(objToUpdate.Labels[common.DISPLAY_NAME_LABEL])
	}
	// ResourceVersion must be set for update
	if objToUpdate.ResourceVersion == "" {
		current, err := group.client.baseClient.
			ProjectTsmV1().
			Projects().Get(ctx, objToUpdate.GetName(), metav1.GetOptions{})
		if err != nil {
			if customerrors.Is(err, context.DeadlineExceeded) {
				log.Errorf("context deadline exceeded, on creating GNS: %+v", objToUpdate)
				return nil, context.DeadlineExceeded
			} else if customerrors.Is(err, context.Canceled) {
				log.Errorf("context cancelled, on creating GNS: %+v", objToUpdate)
				return nil, context.Canceled
			} else {
				log.Errorf("Unexpected Error: %+v", err)
				return nil, err
			}
		}
		objToUpdate.ResourceVersion = current.ResourceVersion
	}

	var patch Patch
	patch = append(patch, PatchOp{
		Op:    "replace",
		Path:  "/metadata",
		Value: objToUpdate.ObjectMeta,
	})

	patchValueKey :=
		objToUpdate.Spec.Key
	patchOpKey := PatchOp{
		Op:    "replace",
		Path:  "/spec/key",
		Value: patchValueKey,
	}
	patch = append(patch, patchOpKey)

	patchValueField1 :=
		objToUpdate.Spec.Field1
	patchOpField1 := PatchOp{
		Op:    "replace",
		Path:  "/spec/field1",
		Value: patchValueField1,
	}
	patch = append(patch, patchOpField1)

	patchValueField2 :=
		objToUpdate.Spec.Field2
	patchOpField2 := PatchOp{
		Op:    "replace",
		Path:  "/spec/field2",
		Value: patchValueField2,
	}
	patch = append(patch, patchOpField2)

	marshaled, err := patch.Marshal()
	if err != nil {
		return nil, err
	}
	result, err := group.client.baseClient.
		ProjectTsmV1().
		Projects().Patch(ctx, objToUpdate.GetName(), types.JSONPatchType, marshaled, metav1.PatchOptions{}, "")
	if err != nil {
		return nil, err
	}

	return &ProjectProject{
		client:  group.client,
		Project: result,
	}, nil
}

// ListProjects returns slice of all existing objects of this type. Selectors can be provided in opts parameter.
func (group *ProjectTsmV1) ListProjects(ctx context.Context,
	opts metav1.ListOptions) (result []*ProjectProject, err error) {
	key := "projects.project.tsm-tanzu.vmware.com"
	if s, ok := subscriptionMap.Load(key); ok {
		items := s.(subscription).informer.GetStore().List()
		result = make([]*ProjectProject, len(items))
		for k, v := range items {
			item, _ := v.(*baseprojecttsmtanzuvmwarecomv1.Project)
			result[k] = &ProjectProject{
				client:  group.client,
				Project: item,
			}
		}
	} else {
		list, err := group.client.baseClient.ProjectTsmV1().
			Projects().List(ctx, opts)
		if err != nil {
			return nil, err
		}
		result = make([]*ProjectProject, len(list.Items))
		for k, v := range list.Items {
			item := v
			result[k] = &ProjectProject{
				client:  group.client,
				Project: &item,
			}
		}
	}
	return
}

type ProjectProject struct {
	client *Clientset
	*baseprojecttsmtanzuvmwarecomv1.Project
}

// Delete removes obj and all it's children from the database.
func (obj *ProjectProject) Delete(ctx context.Context) error {
	err := obj.client.Project().DeleteProjectByName(ctx, obj.GetName())
	if err != nil {
		return err
	}
	obj.Project = nil
	return nil
}

// Update updates spec of object in database. Children and Link can not be updated using this function.
func (obj *ProjectProject) Update(ctx context.Context) error {
	result, err := obj.client.Project().UpdateProjectByName(ctx, obj.Project)
	if err != nil {
		return err
	}
	obj.Project = result.Project
	return nil
}

// GetProjectProject calculates the hashed name based on parents and
// returns given object
func (c *Clientset) GetProjectProject(ctx context.Context) (result *ProjectProject, err error) {
	hashedName := helper.GetHashedName("projects.project.tsm-tanzu.vmware.com", nil, helper.DEFAULT_KEY)
	return c.Project().GetProjectByName(ctx, hashedName)
}

func (c *Clientset) ProjectProject() *projectProjectTsmV1Chainer {
	parentLabels := make(map[string]string)
	parentLabels["projects.project.tsm-tanzu.vmware.com"] = helper.DEFAULT_KEY
	return &projectProjectTsmV1Chainer{
		client:       c,
		name:         helper.DEFAULT_KEY,
		parentLabels: parentLabels,
	}
}

// AddProjectProject calculates hashed name of the object based on
// parents names and creates it. objToCreate.Name is changed to the hashed name. Original name (helper.DEFAULT_KEY) is preserved in
// nexus/display_name label and can be obtained using DisplayName() method.
func (c *Clientset) AddProjectProject(ctx context.Context,
	objToCreate *baseprojecttsmtanzuvmwarecomv1.Project) (result *ProjectProject, err error) {
	if objToCreate.GetName() == "" {
		objToCreate.SetName(helper.DEFAULT_KEY)
	}
	if objToCreate.GetName() != helper.DEFAULT_KEY {
		return nil, NewSingletonNameError(objToCreate.GetName())
	}
	if objToCreate.Labels == nil {
		objToCreate.Labels = map[string]string{}
	}
	if objToCreate.Labels[common.IS_NAME_HASHED_LABEL] != "true" {
		objToCreate.Labels[common.DISPLAY_NAME_LABEL] = objToCreate.GetName()
		objToCreate.Labels[common.IS_NAME_HASHED_LABEL] = "true"
		hashedName := helper.GetHashedName(objToCreate.CRDName(), nil, objToCreate.GetName())
		objToCreate.Name = hashedName
	}
	return c.Project().CreateProjectByName(ctx, objToCreate)
}

// DeleteProjectProject calculates hashedName of object based on
// parents and deletes given object
func (c *Clientset) DeleteProjectProject(ctx context.Context) (err error) {
	hashedName := helper.GetHashedName("projects.project.tsm-tanzu.vmware.com", nil, helper.DEFAULT_KEY)
	return c.Project().DeleteProjectByName(ctx, hashedName)
}

// GetConfig returns child of given type
func (obj *ProjectProject) GetConfig(ctx context.Context) (
	result *ConfigConfig, err error) {
	if obj.Spec.ConfigGvk == nil {
		return nil, NewChildNotFound(obj.DisplayName(), "Project.Project", "Config")
	}
	return obj.client.Config().GetConfigByName(ctx, obj.Spec.ConfigGvk.Name)
}

// AddConfig calculates hashed name of the child to create based on objToCreate.Name
// and parents names and creates it. objToCreate.Name is changed to the hashed name. Original name is preserved in
// nexus/display_name label and can be obtained using DisplayName() method.
func (obj *ProjectProject) AddConfig(ctx context.Context,
	objToCreate *baseconfigtsmtanzuvmwarecomv1.Config) (result *ConfigConfig, err error) {
	if objToCreate.Labels == nil {
		objToCreate.Labels = map[string]string{}
	}
	for _, v := range helper.GetCRDParentsMap()["projects.project.tsm-tanzu.vmware.com"] {
		objToCreate.Labels[v] = obj.Labels[v]
	}
	objToCreate.Labels["projects.project.tsm-tanzu.vmware.com"] = obj.DisplayName()
	if objToCreate.Labels[common.IS_NAME_HASHED_LABEL] != "true" {
		if objToCreate.GetName() == "" {
			objToCreate.SetName(helper.DEFAULT_KEY)
		}
		if objToCreate.GetName() != helper.DEFAULT_KEY {
			return nil, NewSingletonNameError(objToCreate.GetName())
		}
		objToCreate.Labels[common.DISPLAY_NAME_LABEL] = objToCreate.GetName()
		objToCreate.Labels[common.IS_NAME_HASHED_LABEL] = "true"
		hashedName := helper.GetHashedName(objToCreate.CRDName(), objToCreate.Labels, objToCreate.GetName())
		objToCreate.Name = hashedName
	}
	result, err = obj.client.Config().CreateConfigByName(ctx, objToCreate)
	updatedObj, getErr := obj.client.Project().GetProjectByName(ctx, obj.GetName())
	if getErr == nil {
		obj.Project = updatedObj.Project
	}
	return
}

// DeleteConfig calculates hashed name of the child to delete based on displayName
// and parents names and deletes it.

func (obj *ProjectProject) DeleteConfig(ctx context.Context) (err error) {
	if obj.Spec.ConfigGvk != nil {
		err = obj.client.
			Config().DeleteConfigByName(ctx, obj.Spec.ConfigGvk.Name)
		if err != nil {
			return err
		}
	}
	updatedObj, err := obj.client.
		Project().GetProjectByName(ctx, obj.GetName())
	if err == nil {
		obj.Project = updatedObj.Project
	}
	return
}

type projectProjectTsmV1Chainer struct {
	client       *Clientset
	name         string
	parentLabels map[string]string
}

func (c *projectProjectTsmV1Chainer) Subscribe() {
	key := "projects.project.tsm-tanzu.vmware.com"
	if _, ok := subscriptionMap.Load(key); !ok {
		informer := informerprojecttsmtanzuvmwarecomv1.NewProjectInformer(c.client.baseClient, 0, cache.Indexers{})
		subscribe(key, informer)
	}
}

func (c *projectProjectTsmV1Chainer) Unsubscribe() {
	key := "projects.project.tsm-tanzu.vmware.com"
	if s, ok := subscriptionMap.Load(key); ok {
		close(s.(subscription).stop)
		subscriptionMap.Delete(key)
	}
}

func (c *projectProjectTsmV1Chainer) IsSubscribed() bool {
	key := "projects.project.tsm-tanzu.vmware.com"
	_, ok := subscriptionMap.Load(key)
	return ok
}

func (c *projectProjectTsmV1Chainer) RegisterEventHandler(addCB func(obj *ProjectProject), updateCB func(oldObj, newObj *ProjectProject), deleteCB func(obj *ProjectProject)) (cache.ResourceEventHandlerRegistration, error) {
	fmt.Println("RegisterEventHandler for ProjectProject")
	var (
		registrationId cache.ResourceEventHandlerRegistration
		err            error
		informer       cache.SharedIndexInformer
	)
	key := "projects.project.tsm-tanzu.vmware.com"
	stopper := make(chan struct{})
	if s, ok := subscriptionMap.Load(key); ok {
		fmt.Println("Informer exists for ProjectProject")
		sub := s.(subscription)
		informer = sub.informer
	} else {
		fmt.Println("Informer doesn't exists for ProjectProject, so creating a new one")
		informer = informerprojecttsmtanzuvmwarecomv1.NewProjectInformer(c.client.baseClient, 0, cache.Indexers{})
		go informer.Run(stopper)
		subscribe(key, informer)
	}
	registrationId, err = informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
		AddFunc: func(obj interface{}) {
			nc := &ProjectProject{
				client:  c.client,
				Project: obj.(*baseprojecttsmtanzuvmwarecomv1.Project),
			}

			addCB(nc)
		},

		UpdateFunc: func(oldObj, newObj interface{}) {
			oldData := &ProjectProject{
				client:  c.client,
				Project: oldObj.(*baseprojecttsmtanzuvmwarecomv1.Project),
			}
			newData := &ProjectProject{
				client:  c.client,
				Project: newObj.(*baseprojecttsmtanzuvmwarecomv1.Project),
			}
			updateCB(oldData, newData)
		},

		DeleteFunc: func(obj interface{}) {
			nc := &ProjectProject{
				client:  c.client,
				Project: obj.(*baseprojecttsmtanzuvmwarecomv1.Project),
			}

			deleteCB(nc)
		},
	})
	return registrationId, err
}

func (c *projectProjectTsmV1Chainer) RegisterAddCallback(cbfn func(obj *ProjectProject)) (cache.ResourceEventHandlerRegistration, error) {
	fmt.Println("ProjectProject -->  RegisterAddCallback!")
	var (
		registrationId cache.ResourceEventHandlerRegistration
		err            error
	)
	key := "projects.project.tsm-tanzu.vmware.com"
	stopper := make(chan struct{})
	if s, ok := subscriptionMap.Load(key); ok {
		fmt.Println("[ProjectProject] ---SUBSCRIBE-INFORMER---->")
		sub := s.(subscription)
		registrationId, err = sub.informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
			AddFunc: func(obj interface{}) {
				nc := &ProjectProject{
					client:  c.client,
					Project: obj.(*baseprojecttsmtanzuvmwarecomv1.Project),
				}

				cbfn(nc)
			},
		})
	} else {
		fmt.Println("[ProjectProject] ---NEW-INFORMER---->")
		informer := informerprojecttsmtanzuvmwarecomv1.NewProjectInformer(c.client.baseClient, 0, cache.Indexers{})
		registrationId, err = informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
			AddFunc: func(obj interface{}) {
				nc := &ProjectProject{
					client:  c.client,
					Project: obj.(*baseprojecttsmtanzuvmwarecomv1.Project),
				}

				cbfn(nc)
			},
		})
		go informer.Run(stopper)
	}
	return registrationId, err
}

func (c *projectProjectTsmV1Chainer) RegisterUpdateCallback(cbfn func(oldObj, newObj *ProjectProject)) (cache.ResourceEventHandlerRegistration, error) {
	fmt.Println("ProjectProject -->  RegisterUpdateCallback!")
	var (
		registrationId cache.ResourceEventHandlerRegistration
		err            error
	)
	key := "projects.project.tsm-tanzu.vmware.com"
	stopper := make(chan struct{})
	if s, ok := subscriptionMap.Load(key); ok {
		fmt.Println("[ProjectProject] ---SUBSCRIBE-INFORMER---->")
		sub := s.(subscription)
		registrationId, err = sub.informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
			UpdateFunc: func(oldObj, newObj interface{}) {
				oldData := &ProjectProject{
					client:  c.client,
					Project: oldObj.(*baseprojecttsmtanzuvmwarecomv1.Project),
				}
				newData := &ProjectProject{
					client:  c.client,
					Project: newObj.(*baseprojecttsmtanzuvmwarecomv1.Project),
				}
				cbfn(oldData, newData)
			},
		})
	} else {
		fmt.Println("[ProjectProject] ---NEW-INFORMER---->")
		informer := informerprojecttsmtanzuvmwarecomv1.NewProjectInformer(c.client.baseClient, 0, cache.Indexers{})
		registrationId, err = informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
			UpdateFunc: func(oldObj, newObj interface{}) {
				oldData := &ProjectProject{
					client:  c.client,
					Project: oldObj.(*baseprojecttsmtanzuvmwarecomv1.Project),
				}
				newData := &ProjectProject{
					client:  c.client,
					Project: newObj.(*baseprojecttsmtanzuvmwarecomv1.Project),
				}
				cbfn(oldData, newData)
			},
		})
		go informer.Run(stopper)
	}
	return registrationId, err
}

func (c *projectProjectTsmV1Chainer) RegisterDeleteCallback(cbfn func(obj *ProjectProject)) (cache.ResourceEventHandlerRegistration, error) {
	fmt.Println("ProjectProject -->  RegisterDeleteCallback!")
	var (
		registrationId cache.ResourceEventHandlerRegistration
		err            error
	)
	key := "projects.project.tsm-tanzu.vmware.com"
	stopper := make(chan struct{})
	if s, ok := subscriptionMap.Load(key); ok {
		fmt.Println("[ProjectProject] ---SUBSCRIBE-INFORMER---->")
		sub := s.(subscription)
		registrationId, err = sub.informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
			DeleteFunc: func(obj interface{}) {
				nc := &ProjectProject{
					client:  c.client,
					Project: obj.(*baseprojecttsmtanzuvmwarecomv1.Project),
				}

				cbfn(nc)
			},
		})
	} else {
		fmt.Println("[ProjectProject] ---NEW-INFORMER---->")
		informer := informerprojecttsmtanzuvmwarecomv1.NewProjectInformer(c.client.baseClient, 0, cache.Indexers{})
		registrationId, err = informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
			DeleteFunc: func(obj interface{}) {
				nc := &ProjectProject{
					client:  c.client,
					Project: obj.(*baseprojecttsmtanzuvmwarecomv1.Project),
				}

				cbfn(nc)
			},
		})
		go informer.Run(stopper)
	}
	return registrationId, err
}

func (c *projectProjectTsmV1Chainer) Config() *configConfigTsmV1Chainer {
	parentLabels := c.parentLabels
	parentLabels["configs.config.tsm-tanzu.vmware.com"] = helper.DEFAULT_KEY
	return &configConfigTsmV1Chainer{
		client:       c.client,
		name:         helper.DEFAULT_KEY,
		parentLabels: parentLabels,
	}
}

// GetConfig calculates hashed name of the object based on it's parents and returns the object
func (c *projectProjectTsmV1Chainer) GetConfig(ctx context.Context) (result *ConfigConfig, err error) {
	hashedName := helper.GetHashedName("configs.config.tsm-tanzu.vmware.com", c.parentLabels, helper.DEFAULT_KEY)
	return c.client.Config().GetConfigByName(ctx, hashedName)
}

// AddConfig calculates hashed name of the child to create based on parents names and creates it.
// objToCreate.Name is changed to the hashed name. Original name ('default') is preserved in
// nexus/display_name label and can be obtained using DisplayName() method.
func (c *projectProjectTsmV1Chainer) AddConfig(ctx context.Context,
	objToCreate *baseconfigtsmtanzuvmwarecomv1.Config) (result *ConfigConfig, err error) {
	if objToCreate.GetName() == "" {
		objToCreate.SetName(helper.DEFAULT_KEY)
	}
	if objToCreate.GetName() != helper.DEFAULT_KEY {
		return nil, NewSingletonNameError(objToCreate.GetName())
	}
	if objToCreate.Labels == nil {
		objToCreate.Labels = map[string]string{}
	}
	for k, v := range c.parentLabels {
		objToCreate.Labels[k] = v
	}
	if objToCreate.Labels[common.IS_NAME_HASHED_LABEL] != "true" {
		objToCreate.Labels[common.DISPLAY_NAME_LABEL] = objToCreate.GetName()
		objToCreate.Labels[common.IS_NAME_HASHED_LABEL] = "true"
		hashedName := helper.GetHashedName("configs.config.tsm-tanzu.vmware.com", c.parentLabels, objToCreate.GetName())
		objToCreate.Name = hashedName
	}
	return c.client.Config().CreateConfigByName(ctx, objToCreate)
}

// DeleteConfig calculates hashed name of the child to delete based on displayName
// and parents names and deletes it.
func (c *projectProjectTsmV1Chainer) DeleteConfig(ctx context.Context, name string) (err error) {
	if c.parentLabels == nil {
		c.parentLabels = map[string]string{}
	}
	c.parentLabels[common.IS_NAME_HASHED_LABEL] = "true"
	hashedName := helper.GetHashedName("configs.config.tsm-tanzu.vmware.com", c.parentLabels, name)
	return c.client.Config().DeleteConfigByName(ctx, hashedName)
}

// GetRootByName returns object stored in the database under the hashedName which is a hash of display
// name and parents names. Use it when you know hashed name of object.
func (group *RootTsmV1) GetRootByName(ctx context.Context, hashedName string) (*RootRoot, error) {
	key := "roots.root.tsm-tanzu.vmware.com"
	if s, ok := subscriptionMap.Load(key); ok {
		item, exists, err := s.(subscription).informer.GetStore().GetByKey(hashedName)
		if !exists {
			return nil, err
		}

		result, _ := item.(*baseroottsmtanzuvmwarecomv1.Root)
		return &RootRoot{
			client: group.client,
			Root:   result,
		}, nil
	} else {
		retryCount := 12
		for {
			result, err := group.client.baseClient.
				RootTsmV1().
				Roots().Get(ctx, hashedName, metav1.GetOptions{})
			if err != nil {
				log.Errorf("Failed to Get Roots: %+v", err)
				if errors.IsTimeout(err) || customerrors.Is(err, context.DeadlineExceeded) {
					log.Errorf("[Retry Count: %d ] %+v", retryCount, err)
					if retryCount == 0 {
						log.Error("Max Retry exceed on Get Roots")
						return nil, err
					}
					retryCount -= 1
					time.Sleep(5 * time.Second)
				} else {
					log.Errorf("Unexpected Error: %+v", err)
					return nil, err
				}
			}
			return &RootRoot{
				client: group.client,
				Root:   result,
			}, nil
		}
	}
}

// ForceReadRootByName read object directly from the database under the hashedName which is a hash of display
// name and parents names. Use it when you know hashed name of object.
func (group *RootTsmV1) ForceReadRootByName(ctx context.Context, hashedName string) (*RootRoot, error) {
	result, err := group.client.baseClient.
		RootTsmV1().
		Roots().Get(ctx, hashedName, metav1.GetOptions{})
	if err != nil {
		return nil, err
	}

	return &RootRoot{
		client: group.client,
		Root:   result,
	}, nil
}

// DeleteRootByName deletes object stored in the database under the hashedName which is a hash of
// display name and parents names. Use it when you know hashed name of object.
func (group *RootTsmV1) DeleteRootByName(ctx context.Context, hashedName string) (err error) {

	result, err := group.client.baseClient.
		RootTsmV1().
		Roots().Get(ctx, hashedName, metav1.GetOptions{})
	if err != nil {
		if customerrors.Is(err, context.DeadlineExceeded) {
			log.Errorf("context deadline exceeded, on creating GNS: %+v", hashedName)
			return context.DeadlineExceeded
		} else if customerrors.Is(err, context.Canceled) {
			log.Errorf("context cancelled, on creating GNS: %+v", hashedName)
			return context.Canceled
		} else {
			log.Errorf("Unexpected Error: %+v", err)
			return err
		}
	}

	if result.Spec.ProjectGvk != nil {
		err := group.client.
			Project().
			DeleteProjectByName(ctx, result.Spec.ProjectGvk.Name)
		if err != nil && !errors.IsNotFound(err) {
			return err
		}
	}

	err = group.client.baseClient.
		RootTsmV1().
		Roots().Delete(ctx, hashedName, metav1.DeleteOptions{})
	if err != nil {
		return err
	}

	return
}

// CreateRootByName creates object in the database without hashing the name.
// Use it directly ONLY when objToCreate.Name is hashed name of the object.
func (group *RootTsmV1) CreateRootByName(ctx context.Context,
	objToCreate *baseroottsmtanzuvmwarecomv1.Root) (*RootRoot, error) {
	if objToCreate.GetLabels() == nil {
		objToCreate.Labels = make(map[string]string)
	}
	if _, ok := objToCreate.Labels[common.DISPLAY_NAME_LABEL]; !ok {
		objToCreate.Labels[common.DISPLAY_NAME_LABEL] = objToCreate.GetName()
	}

	objToCreate.Spec.ProjectGvk = nil

	result, err := group.client.baseClient.
		RootTsmV1().
		Roots().Create(ctx, objToCreate, metav1.CreateOptions{})
	if err != nil {
		if customerrors.Is(err, context.DeadlineExceeded) {
			log.Errorf("context deadline exceeded, on creating GNS: %+v", objToCreate)
			return nil, context.DeadlineExceeded
		} else if customerrors.Is(err, context.Canceled) {
			log.Errorf("context cancelled, on creating GNS: %+v", objToCreate)
			return nil, context.Canceled
		} else {
			log.Errorf("Unexpected Error: %+v", err)
			return nil, err
		}
	}

	return &RootRoot{
		client: group.client,
		Root:   result,
	}, nil
}

// UpdateRootByName updates object stored in the database under the hashedName which is a hash of
// display name and parents names.
func (group *RootTsmV1) UpdateRootByName(ctx context.Context,
	objToUpdate *baseroottsmtanzuvmwarecomv1.Root) (*RootRoot, error) {

	// ResourceVersion must be set for update
	if objToUpdate.ResourceVersion == "" {
		current, err := group.client.baseClient.
			RootTsmV1().
			Roots().Get(ctx, objToUpdate.GetName(), metav1.GetOptions{})
		if err != nil {
			if customerrors.Is(err, context.DeadlineExceeded) {
				log.Errorf("context deadline exceeded, on creating GNS: %+v", objToUpdate)
				return nil, context.DeadlineExceeded
			} else if customerrors.Is(err, context.Canceled) {
				log.Errorf("context cancelled, on creating GNS: %+v", objToUpdate)
				return nil, context.Canceled
			} else {
				log.Errorf("Unexpected Error: %+v", err)
				return nil, err
			}
		}
		objToUpdate.ResourceVersion = current.ResourceVersion
	}

	var patch Patch
	patch = append(patch, PatchOp{
		Op:    "replace",
		Path:  "/metadata",
		Value: objToUpdate.ObjectMeta,
	})

	patchValueSomeRootData :=
		objToUpdate.Spec.SomeRootData
	patchOpSomeRootData := PatchOp{
		Op:    "replace",
		Path:  "/spec/someRootData",
		Value: patchValueSomeRootData,
	}
	patch = append(patch, patchOpSomeRootData)

	marshaled, err := patch.Marshal()
	if err != nil {
		return nil, err
	}
	result, err := group.client.baseClient.
		RootTsmV1().
		Roots().Patch(ctx, objToUpdate.GetName(), types.JSONPatchType, marshaled, metav1.PatchOptions{}, "")
	if err != nil {
		return nil, err
	}

	return &RootRoot{
		client: group.client,
		Root:   result,
	}, nil
}

// ListRoots returns slice of all existing objects of this type. Selectors can be provided in opts parameter.
func (group *RootTsmV1) ListRoots(ctx context.Context,
	opts metav1.ListOptions) (result []*RootRoot, err error) {
	key := "roots.root.tsm-tanzu.vmware.com"
	if s, ok := subscriptionMap.Load(key); ok {
		items := s.(subscription).informer.GetStore().List()
		result = make([]*RootRoot, len(items))
		for k, v := range items {
			item, _ := v.(*baseroottsmtanzuvmwarecomv1.Root)
			result[k] = &RootRoot{
				client: group.client,
				Root:   item,
			}
		}
	} else {
		list, err := group.client.baseClient.RootTsmV1().
			Roots().List(ctx, opts)
		if err != nil {
			return nil, err
		}
		result = make([]*RootRoot, len(list.Items))
		for k, v := range list.Items {
			item := v
			result[k] = &RootRoot{
				client: group.client,
				Root:   &item,
			}
		}
	}
	return
}

type RootRoot struct {
	client *Clientset
	*baseroottsmtanzuvmwarecomv1.Root
}

// Delete removes obj and all it's children from the database.
func (obj *RootRoot) Delete(ctx context.Context) error {
	err := obj.client.Root().DeleteRootByName(ctx, obj.GetName())
	if err != nil {
		return err
	}
	obj.Root = nil
	return nil
}

// Update updates spec of object in database. Children and Link can not be updated using this function.
func (obj *RootRoot) Update(ctx context.Context) error {
	result, err := obj.client.Root().UpdateRootByName(ctx, obj.Root)
	if err != nil {
		return err
	}
	obj.Root = result.Root
	return nil
}

// GetRootRoot calculates the hashed name based on parents and displayName and
// returns given object
func (c *Clientset) GetRootRoot(ctx context.Context, displayName string) (result *RootRoot, err error) {
	hashedName := helper.GetHashedName("roots.root.tsm-tanzu.vmware.com", nil, displayName)
	return c.Root().GetRootByName(ctx, hashedName)
}

func (c *Clientset) RootRoot(displayName string) *rootRootTsmV1Chainer {
	parentLabels := make(map[string]string)
	parentLabels["roots.root.tsm-tanzu.vmware.com"] = displayName
	return &rootRootTsmV1Chainer{
		client:       c,
		name:         displayName,
		parentLabels: parentLabels,
	}
}

// AddRootRoot calculates hashed name of the object based on objToCreate.Name
// and parents names and creates it. objToCreate.Name is changed to the hashed name. Original name is preserved in
// nexus/display_name label and can be obtained using DisplayName() method.
func (c *Clientset) AddRootRoot(ctx context.Context,
	objToCreate *baseroottsmtanzuvmwarecomv1.Root) (result *RootRoot, err error) {
	if objToCreate.Labels == nil {
		objToCreate.Labels = map[string]string{}
	}
	if objToCreate.Labels[common.IS_NAME_HASHED_LABEL] != "true" {
		objToCreate.Labels[common.DISPLAY_NAME_LABEL] = objToCreate.GetName()
		objToCreate.Labels[common.IS_NAME_HASHED_LABEL] = "true"
		hashedName := helper.GetHashedName(objToCreate.CRDName(), nil, objToCreate.GetName())
		objToCreate.Name = hashedName
	}
	return c.Root().CreateRootByName(ctx, objToCreate)
}

// DeleteRootRoot calculates hashedName of object based on displayName and
// parents and deletes given object
func (c *Clientset) DeleteRootRoot(ctx context.Context, displayName string) (err error) {
	hashedName := helper.GetHashedName("roots.root.tsm-tanzu.vmware.com", nil, displayName)
	return c.Root().DeleteRootByName(ctx, hashedName)
}

// GetProject returns child of given type
func (obj *RootRoot) GetProject(ctx context.Context) (
	result *ProjectProject, err error) {
	if obj.Spec.ProjectGvk == nil {
		return nil, NewChildNotFound(obj.DisplayName(), "Root.Root", "Project")
	}
	return obj.client.Project().GetProjectByName(ctx, obj.Spec.ProjectGvk.Name)
}

// AddProject calculates hashed name of the child to create based on objToCreate.Name
// and parents names and creates it. objToCreate.Name is changed to the hashed name. Original name is preserved in
// nexus/display_name label and can be obtained using DisplayName() method.
func (obj *RootRoot) AddProject(ctx context.Context,
	objToCreate *baseprojecttsmtanzuvmwarecomv1.Project) (result *ProjectProject, err error) {
	if objToCreate.Labels == nil {
		objToCreate.Labels = map[string]string{}
	}
	for _, v := range helper.GetCRDParentsMap()["roots.root.tsm-tanzu.vmware.com"] {
		objToCreate.Labels[v] = obj.Labels[v]
	}
	objToCreate.Labels["roots.root.tsm-tanzu.vmware.com"] = obj.DisplayName()
	if objToCreate.Labels[common.IS_NAME_HASHED_LABEL] != "true" {
		if objToCreate.GetName() == "" {
			objToCreate.SetName(helper.DEFAULT_KEY)
		}
		if objToCreate.GetName() != helper.DEFAULT_KEY {
			return nil, NewSingletonNameError(objToCreate.GetName())
		}
		objToCreate.Labels[common.DISPLAY_NAME_LABEL] = objToCreate.GetName()
		objToCreate.Labels[common.IS_NAME_HASHED_LABEL] = "true"
		hashedName := helper.GetHashedName(objToCreate.CRDName(), objToCreate.Labels, objToCreate.GetName())
		objToCreate.Name = hashedName
	}
	result, err = obj.client.Project().CreateProjectByName(ctx, objToCreate)
	updatedObj, getErr := obj.client.Root().GetRootByName(ctx, obj.GetName())
	if getErr == nil {
		obj.Root = updatedObj.Root
	}
	return
}

// DeleteProject calculates hashed name of the child to delete based on displayName
// and parents names and deletes it.

func (obj *RootRoot) DeleteProject(ctx context.Context) (err error) {
	if obj.Spec.ProjectGvk != nil {
		err = obj.client.
			Project().DeleteProjectByName(ctx, obj.Spec.ProjectGvk.Name)
		if err != nil {
			return err
		}
	}
	updatedObj, err := obj.client.
		Root().GetRootByName(ctx, obj.GetName())
	if err == nil {
		obj.Root = updatedObj.Root
	}
	return
}

type rootRootTsmV1Chainer struct {
	client       *Clientset
	name         string
	parentLabels map[string]string
}

func (c *rootRootTsmV1Chainer) Subscribe() {
	key := "roots.root.tsm-tanzu.vmware.com"
	if _, ok := subscriptionMap.Load(key); !ok {
		informer := informerroottsmtanzuvmwarecomv1.NewRootInformer(c.client.baseClient, 0, cache.Indexers{})
		subscribe(key, informer)
	}
}

func (c *rootRootTsmV1Chainer) Unsubscribe() {
	key := "roots.root.tsm-tanzu.vmware.com"
	if s, ok := subscriptionMap.Load(key); ok {
		close(s.(subscription).stop)
		subscriptionMap.Delete(key)
	}
}

func (c *rootRootTsmV1Chainer) IsSubscribed() bool {
	key := "roots.root.tsm-tanzu.vmware.com"
	_, ok := subscriptionMap.Load(key)
	return ok
}

func (c *rootRootTsmV1Chainer) RegisterEventHandler(addCB func(obj *RootRoot), updateCB func(oldObj, newObj *RootRoot), deleteCB func(obj *RootRoot)) (cache.ResourceEventHandlerRegistration, error) {
	fmt.Println("RegisterEventHandler for RootRoot")
	var (
		registrationId cache.ResourceEventHandlerRegistration
		err            error
		informer       cache.SharedIndexInformer
	)
	key := "roots.root.tsm-tanzu.vmware.com"
	stopper := make(chan struct{})
	if s, ok := subscriptionMap.Load(key); ok {
		fmt.Println("Informer exists for RootRoot")
		sub := s.(subscription)
		informer = sub.informer
	} else {
		fmt.Println("Informer doesn't exists for RootRoot, so creating a new one")
		informer = informerroottsmtanzuvmwarecomv1.NewRootInformer(c.client.baseClient, 0, cache.Indexers{})
		go informer.Run(stopper)
		subscribe(key, informer)
	}
	registrationId, err = informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
		AddFunc: func(obj interface{}) {
			nc := &RootRoot{
				client: c.client,
				Root:   obj.(*baseroottsmtanzuvmwarecomv1.Root),
			}

			addCB(nc)
		},

		UpdateFunc: func(oldObj, newObj interface{}) {
			oldData := &RootRoot{
				client: c.client,
				Root:   oldObj.(*baseroottsmtanzuvmwarecomv1.Root),
			}
			newData := &RootRoot{
				client: c.client,
				Root:   newObj.(*baseroottsmtanzuvmwarecomv1.Root),
			}
			updateCB(oldData, newData)
		},

		DeleteFunc: func(obj interface{}) {
			nc := &RootRoot{
				client: c.client,
				Root:   obj.(*baseroottsmtanzuvmwarecomv1.Root),
			}

			deleteCB(nc)
		},
	})
	return registrationId, err
}

func (c *rootRootTsmV1Chainer) RegisterAddCallback(cbfn func(obj *RootRoot)) (cache.ResourceEventHandlerRegistration, error) {
	fmt.Println("RootRoot -->  RegisterAddCallback!")
	var (
		registrationId cache.ResourceEventHandlerRegistration
		err            error
	)
	key := "roots.root.tsm-tanzu.vmware.com"
	stopper := make(chan struct{})
	if s, ok := subscriptionMap.Load(key); ok {
		fmt.Println("[RootRoot] ---SUBSCRIBE-INFORMER---->")
		sub := s.(subscription)
		registrationId, err = sub.informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
			AddFunc: func(obj interface{}) {
				nc := &RootRoot{
					client: c.client,
					Root:   obj.(*baseroottsmtanzuvmwarecomv1.Root),
				}

				cbfn(nc)
			},
		})
	} else {
		fmt.Println("[RootRoot] ---NEW-INFORMER---->")
		informer := informerroottsmtanzuvmwarecomv1.NewRootInformer(c.client.baseClient, 0, cache.Indexers{})
		registrationId, err = informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
			AddFunc: func(obj interface{}) {
				nc := &RootRoot{
					client: c.client,
					Root:   obj.(*baseroottsmtanzuvmwarecomv1.Root),
				}

				cbfn(nc)
			},
		})
		go informer.Run(stopper)
	}
	return registrationId, err
}

func (c *rootRootTsmV1Chainer) RegisterUpdateCallback(cbfn func(oldObj, newObj *RootRoot)) (cache.ResourceEventHandlerRegistration, error) {
	fmt.Println("RootRoot -->  RegisterUpdateCallback!")
	var (
		registrationId cache.ResourceEventHandlerRegistration
		err            error
	)
	key := "roots.root.tsm-tanzu.vmware.com"
	stopper := make(chan struct{})
	if s, ok := subscriptionMap.Load(key); ok {
		fmt.Println("[RootRoot] ---SUBSCRIBE-INFORMER---->")
		sub := s.(subscription)
		registrationId, err = sub.informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
			UpdateFunc: func(oldObj, newObj interface{}) {
				oldData := &RootRoot{
					client: c.client,
					Root:   oldObj.(*baseroottsmtanzuvmwarecomv1.Root),
				}
				newData := &RootRoot{
					client: c.client,
					Root:   newObj.(*baseroottsmtanzuvmwarecomv1.Root),
				}
				cbfn(oldData, newData)
			},
		})
	} else {
		fmt.Println("[RootRoot] ---NEW-INFORMER---->")
		informer := informerroottsmtanzuvmwarecomv1.NewRootInformer(c.client.baseClient, 0, cache.Indexers{})
		registrationId, err = informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
			UpdateFunc: func(oldObj, newObj interface{}) {
				oldData := &RootRoot{
					client: c.client,
					Root:   oldObj.(*baseroottsmtanzuvmwarecomv1.Root),
				}
				newData := &RootRoot{
					client: c.client,
					Root:   newObj.(*baseroottsmtanzuvmwarecomv1.Root),
				}
				cbfn(oldData, newData)
			},
		})
		go informer.Run(stopper)
	}
	return registrationId, err
}

func (c *rootRootTsmV1Chainer) RegisterDeleteCallback(cbfn func(obj *RootRoot)) (cache.ResourceEventHandlerRegistration, error) {
	fmt.Println("RootRoot -->  RegisterDeleteCallback!")
	var (
		registrationId cache.ResourceEventHandlerRegistration
		err            error
	)
	key := "roots.root.tsm-tanzu.vmware.com"
	stopper := make(chan struct{})
	if s, ok := subscriptionMap.Load(key); ok {
		fmt.Println("[RootRoot] ---SUBSCRIBE-INFORMER---->")
		sub := s.(subscription)
		registrationId, err = sub.informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
			DeleteFunc: func(obj interface{}) {
				nc := &RootRoot{
					client: c.client,
					Root:   obj.(*baseroottsmtanzuvmwarecomv1.Root),
				}

				cbfn(nc)
			},
		})
	} else {
		fmt.Println("[RootRoot] ---NEW-INFORMER---->")
		informer := informerroottsmtanzuvmwarecomv1.NewRootInformer(c.client.baseClient, 0, cache.Indexers{})
		registrationId, err = informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
			DeleteFunc: func(obj interface{}) {
				nc := &RootRoot{
					client: c.client,
					Root:   obj.(*baseroottsmtanzuvmwarecomv1.Root),
				}

				cbfn(nc)
			},
		})
		go informer.Run(stopper)
	}
	return registrationId, err
}

func (c *rootRootTsmV1Chainer) Project() *projectProjectTsmV1Chainer {
	parentLabels := c.parentLabels
	parentLabels["projects.project.tsm-tanzu.vmware.com"] = helper.DEFAULT_KEY
	return &projectProjectTsmV1Chainer{
		client:       c.client,
		name:         helper.DEFAULT_KEY,
		parentLabels: parentLabels,
	}
}

// GetProject calculates hashed name of the object based on it's parents and returns the object
func (c *rootRootTsmV1Chainer) GetProject(ctx context.Context) (result *ProjectProject, err error) {
	hashedName := helper.GetHashedName("projects.project.tsm-tanzu.vmware.com", c.parentLabels, helper.DEFAULT_KEY)
	return c.client.Project().GetProjectByName(ctx, hashedName)
}

// AddProject calculates hashed name of the child to create based on parents names and creates it.
// objToCreate.Name is changed to the hashed name. Original name ('default') is preserved in
// nexus/display_name label and can be obtained using DisplayName() method.
func (c *rootRootTsmV1Chainer) AddProject(ctx context.Context,
	objToCreate *baseprojecttsmtanzuvmwarecomv1.Project) (result *ProjectProject, err error) {
	if objToCreate.GetName() == "" {
		objToCreate.SetName(helper.DEFAULT_KEY)
	}
	if objToCreate.GetName() != helper.DEFAULT_KEY {
		return nil, NewSingletonNameError(objToCreate.GetName())
	}
	if objToCreate.Labels == nil {
		objToCreate.Labels = map[string]string{}
	}
	for k, v := range c.parentLabels {
		objToCreate.Labels[k] = v
	}
	if objToCreate.Labels[common.IS_NAME_HASHED_LABEL] != "true" {
		objToCreate.Labels[common.DISPLAY_NAME_LABEL] = objToCreate.GetName()
		objToCreate.Labels[common.IS_NAME_HASHED_LABEL] = "true"
		hashedName := helper.GetHashedName("projects.project.tsm-tanzu.vmware.com", c.parentLabels, objToCreate.GetName())
		objToCreate.Name = hashedName
	}
	return c.client.Project().CreateProjectByName(ctx, objToCreate)
}

// DeleteProject calculates hashed name of the child to delete based on displayName
// and parents names and deletes it.
func (c *rootRootTsmV1Chainer) DeleteProject(ctx context.Context, name string) (err error) {
	if c.parentLabels == nil {
		c.parentLabels = map[string]string{}
	}
	c.parentLabels[common.IS_NAME_HASHED_LABEL] = "true"
	hashedName := helper.GetHashedName("projects.project.tsm-tanzu.vmware.com", c.parentLabels, name)
	return c.client.Project().DeleteProjectByName(ctx, hashedName)
}
