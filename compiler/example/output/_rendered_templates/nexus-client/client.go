// Code generated by nexus. DO NOT EDIT.

// Nexus client is a shim layer working over k8s API meant to simplify graph operation on nexus nodes.
// Features of nexus client:
// - create/get/update/delete/list of nexus nodes,
// - name hashing to avoid name collision between objects with same name but different parents,
// - ability to get, create and delete child of given parent object,
// - ability to add link and remove link to given object,
// - recursive delete of object and all it's children.
// To initialize client use NewForConfig function with Rest Config as a parameter. After that you can start using
// nexus client. You can check example in: https://gitlab.eng.vmware.com/nsx-allspark_users/nexus-sdk/docs/-/tree/master/example/crudapp

package nexus_client

import (
	"context"
	"encoding/json"
	customerrors "errors"
	"fmt"
	"os"
	"reflect"
	"sync"
	"time"

	"github.com/sirupsen/logrus"
	"k8s.io/apimachinery/pkg/api/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	"k8s.io/client-go/rest"
	cache "k8s.io/client-go/tools/cache"

	baseClientset "nexustempmodule/client/clientset/versioned"
	fakeBaseClienset "nexustempmodule/client/clientset/versioned/fake"
	"nexustempmodule/common"
	"nexustempmodule/helper"

	baseconfigtsmtanzuvmwarecomv1 "nexustempmodule/apis/config.tsm.tanzu.vmware.com/v1"
	basegnstsmtanzuvmwarecomv1 "nexustempmodule/apis/gns.tsm.tanzu.vmware.com/v1"
	basepolicypkgtsmtanzuvmwarecomv1 "nexustempmodule/apis/policypkg.tsm.tanzu.vmware.com/v1"
	baseroottsmtanzuvmwarecomv1 "nexustempmodule/apis/root.tsm.tanzu.vmware.com/v1"
	baseservicegrouptsmtanzuvmwarecomv1 "nexustempmodule/apis/servicegroup.tsm.tanzu.vmware.com/v1"

	informerconfigtsmtanzuvmwarecomv1 "nexustempmodule/client/informers/externalversions/config.tsm.tanzu.vmware.com/v1"
	informergnstsmtanzuvmwarecomv1 "nexustempmodule/client/informers/externalversions/gns.tsm.tanzu.vmware.com/v1"
	informerpolicypkgtsmtanzuvmwarecomv1 "nexustempmodule/client/informers/externalversions/policypkg.tsm.tanzu.vmware.com/v1"
	informerroottsmtanzuvmwarecomv1 "nexustempmodule/client/informers/externalversions/root.tsm.tanzu.vmware.com/v1"
	informerservicegrouptsmtanzuvmwarecomv1 "nexustempmodule/client/informers/externalversions/servicegroup.tsm.tanzu.vmware.com/v1"
)

var log = logrus.New()

const maxRetryCount = 12
const sleepTime = 5
const ownershipAnnotation string = "Ownership"

type Clientset struct {
	baseClient        baseClientset.Interface
	rootTsmV1         *RootTsmV1
	configTsmV1       *ConfigTsmV1
	gnsTsmV1          *GnsTsmV1
	servicegroupTsmV1 *ServicegroupTsmV1
	policypkgTsmV1    *PolicypkgTsmV1
}

type subscription struct {
	informer cache.SharedIndexInformer
	stop     chan struct{}
}

// subscriptionMap will store crd string as key and value as subscription type,
// for example key="roots.orgchart.vmware.org" and value=subscription{}
var subscriptionMap = sync.Map{}

func subscribe(key string, informer cache.SharedIndexInformer) {
	s := subscription{
		informer: informer,
		stop:     make(chan struct{}),
	}
	go s.informer.Run(s.stop)
	subscriptionMap.Store(key, s)
}

func (c *Clientset) SubscribeAll() {
	var key string

	key = "roots.root.tsm.tanzu.vmware.com"
	if _, ok := subscriptionMap.Load(key); !ok {
		informer := informerroottsmtanzuvmwarecomv1.NewRootInformer(c.baseClient, 0, cache.Indexers{})
		subscribe(key, informer)
	}

	key = "configs.config.tsm.tanzu.vmware.com"
	if _, ok := subscriptionMap.Load(key); !ok {
		informer := informerconfigtsmtanzuvmwarecomv1.NewConfigInformer(c.baseClient, 0, cache.Indexers{})
		subscribe(key, informer)
	}

	key = "footypeabcs.config.tsm.tanzu.vmware.com"
	if _, ok := subscriptionMap.Load(key); !ok {
		informer := informerconfigtsmtanzuvmwarecomv1.NewFooTypeABCInformer(c.baseClient, 0, cache.Indexers{})
		subscribe(key, informer)
	}

	key = "domains.config.tsm.tanzu.vmware.com"
	if _, ok := subscriptionMap.Load(key); !ok {
		informer := informerconfigtsmtanzuvmwarecomv1.NewDomainInformer(c.baseClient, 0, cache.Indexers{})
		subscribe(key, informer)
	}

	key = "foos.gns.tsm.tanzu.vmware.com"
	if _, ok := subscriptionMap.Load(key); !ok {
		informer := informergnstsmtanzuvmwarecomv1.NewFooInformer(c.baseClient, 0, cache.Indexers{})
		subscribe(key, informer)
	}

	key = "gnses.gns.tsm.tanzu.vmware.com"
	if _, ok := subscriptionMap.Load(key); !ok {
		informer := informergnstsmtanzuvmwarecomv1.NewGnsInformer(c.baseClient, 0, cache.Indexers{})
		subscribe(key, informer)
	}

	key = "barchilds.gns.tsm.tanzu.vmware.com"
	if _, ok := subscriptionMap.Load(key); !ok {
		informer := informergnstsmtanzuvmwarecomv1.NewBarChildInformer(c.baseClient, 0, cache.Indexers{})
		subscribe(key, informer)
	}

	key = "ignorechilds.gns.tsm.tanzu.vmware.com"
	if _, ok := subscriptionMap.Load(key); !ok {
		informer := informergnstsmtanzuvmwarecomv1.NewIgnoreChildInformer(c.baseClient, 0, cache.Indexers{})
		subscribe(key, informer)
	}

	key = "dnses.gns.tsm.tanzu.vmware.com"
	if _, ok := subscriptionMap.Load(key); !ok {
		informer := informergnstsmtanzuvmwarecomv1.NewDnsInformer(c.baseClient, 0, cache.Indexers{})
		subscribe(key, informer)
	}

	key = "svcgroups.servicegroup.tsm.tanzu.vmware.com"
	if _, ok := subscriptionMap.Load(key); !ok {
		informer := informerservicegrouptsmtanzuvmwarecomv1.NewSvcGroupInformer(c.baseClient, 0, cache.Indexers{})
		subscribe(key, informer)
	}

	key = "svcgrouplinkinfos.servicegroup.tsm.tanzu.vmware.com"
	if _, ok := subscriptionMap.Load(key); !ok {
		informer := informerservicegrouptsmtanzuvmwarecomv1.NewSvcGroupLinkInfoInformer(c.baseClient, 0, cache.Indexers{})
		subscribe(key, informer)
	}

	key = "accesscontrolpolicies.policypkg.tsm.tanzu.vmware.com"
	if _, ok := subscriptionMap.Load(key); !ok {
		informer := informerpolicypkgtsmtanzuvmwarecomv1.NewAccessControlPolicyInformer(c.baseClient, 0, cache.Indexers{})
		subscribe(key, informer)
	}

	key = "acpconfigs.policypkg.tsm.tanzu.vmware.com"
	if _, ok := subscriptionMap.Load(key); !ok {
		informer := informerpolicypkgtsmtanzuvmwarecomv1.NewACPConfigInformer(c.baseClient, 0, cache.Indexers{})
		subscribe(key, informer)
	}

	key = "vmpolicies.policypkg.tsm.tanzu.vmware.com"
	if _, ok := subscriptionMap.Load(key); !ok {
		informer := informerpolicypkgtsmtanzuvmwarecomv1.NewVMpolicyInformer(c.baseClient, 0, cache.Indexers{})
		subscribe(key, informer)
	}

}

func (c *Clientset) UnsubscribeAll() {
	subscriptionMap.Range(func(key, s interface{}) bool {
		close(s.(subscription).stop)
		subscriptionMap.Delete(key)
		return true
	})
}

// NewForConfig returns Client which can be which can be used to connect to database
func NewForConfig(config *rest.Config) (*Clientset, error) {
	baseClient, err := baseClientset.NewForConfig(config)
	if err != nil {
		return nil, err
	}

	customFormatter := new(logrus.TextFormatter)
	customFormatter.TimestampFormat = "2006-01-02 15:04:05"
	log.SetFormatter(customFormatter)
	customFormatter.FullTimestamp = true
	if os.Getenv("NEXUS_LOG_LEVEL") == "debug" {
		log.SetLevel(logrus.DebugLevel)
		log.Debug("Nexus debug log enabled")
	}

	client := &Clientset{}
	client.baseClient = baseClient
	client.rootTsmV1 = newRootTsmV1(client)
	client.configTsmV1 = newConfigTsmV1(client)
	client.gnsTsmV1 = newGnsTsmV1(client)
	client.servicegroupTsmV1 = newServicegroupTsmV1(client)
	client.policypkgTsmV1 = newPolicypkgTsmV1(client)

	return client, nil
}

// NewFakeClient creates simple client which can be used for unit tests
func NewFakeClient() *Clientset {
	client := &Clientset{}
	client.baseClient = fakeBaseClienset.NewSimpleClientset()
	client.rootTsmV1 = newRootTsmV1(client)
	client.configTsmV1 = newConfigTsmV1(client)
	client.gnsTsmV1 = newGnsTsmV1(client)
	client.servicegroupTsmV1 = newServicegroupTsmV1(client)
	client.policypkgTsmV1 = newPolicypkgTsmV1(client)

	return client
}

type PatchOp struct {
	Op    string      `json:"op"`
	Path  string      `json:"path"`
	Value interface{} `json:"value,omitempty"`
}

type Patch []PatchOp

func (p Patch) Marshal() ([]byte, error) {
	return json.Marshal(p)
}

func (c *Clientset) Root() *RootTsmV1 {
	return c.rootTsmV1
}
func (c *Clientset) Config() *ConfigTsmV1 {
	return c.configTsmV1
}
func (c *Clientset) Gns() *GnsTsmV1 {
	return c.gnsTsmV1
}
func (c *Clientset) Servicegroup() *ServicegroupTsmV1 {
	return c.servicegroupTsmV1
}
func (c *Clientset) Policypkg() *PolicypkgTsmV1 {
	return c.policypkgTsmV1
}

type RootTsmV1 struct {
	client *Clientset
}

func newRootTsmV1(client *Clientset) *RootTsmV1 {
	return &RootTsmV1{
		client: client,
	}
}

type ConfigTsmV1 struct {
	client *Clientset
}

func newConfigTsmV1(client *Clientset) *ConfigTsmV1 {
	return &ConfigTsmV1{
		client: client,
	}
}

type GnsTsmV1 struct {
	client *Clientset
}

func newGnsTsmV1(client *Clientset) *GnsTsmV1 {
	return &GnsTsmV1{
		client: client,
	}
}

type ServicegroupTsmV1 struct {
	client *Clientset
}

func newServicegroupTsmV1(client *Clientset) *ServicegroupTsmV1 {
	return &ServicegroupTsmV1{
		client: client,
	}
}

type PolicypkgTsmV1 struct {
	client *Clientset
}

func newPolicypkgTsmV1(client *Clientset) *PolicypkgTsmV1 {
	return &PolicypkgTsmV1{
		client: client,
	}
}

// GetRootByName returns object stored in the database under the hashedName which is a hash of display
// name and parents names. Use it when you know hashed name of object.
func (group *RootTsmV1) GetRootByName(ctx context.Context, hashedName string) (*RootRoot, error) {
	key := "roots.root.tsm.tanzu.vmware.com"
	if s, ok := subscriptionMap.Load(key); ok {
		log.Debugf("[GetRootByName] GetObject: %s from cache", hashedName)
		item, exists, err := s.(subscription).informer.GetStore().GetByKey(hashedName)
		if !exists {
			return nil, err
		}

		log.Debugf("[GetRootByName] Object: %s exists in cache", hashedName)
		result, _ := item.(*baseroottsmtanzuvmwarecomv1.Root)
		return &RootRoot{
			client: group.client,
			Root:   result,
		}, nil
	} else {
		retryCount := 0
		for {
			result, err := group.client.baseClient.
				RootTsmV1().
				Roots().Get(ctx, hashedName, metav1.GetOptions{})
			if err != nil {
				log.Errorf("[GetRootByName] Failed to Get Roots: %+v", err)
				if errors.IsTimeout(err) || customerrors.Is(err, context.DeadlineExceeded) {
					log.Errorf("[Retry Count: %d ] %+v", retryCount, err)
					if retryCount == maxRetryCount {
						log.Error("Max Retry exceed on Get Roots")
						return nil, err
					}
					retryCount += 1
					time.Sleep(sleepTime * time.Second)
				} else if customerrors.Is(err, context.Canceled) {
					log.Errorf("[GetRootByName]: %+v", err)
					return nil, context.Canceled
				} else {
					log.Errorf("[GetRootByName]: %+v", err)
					return nil, err
				}
			} else {
				return &RootRoot{
					client: group.client,
					Root:   result,
				}, nil
			}
		}
	}
}

// ForceReadRootByName read object directly from the database under the hashedName which is a hash of display
// name and parents names. Use it when you know hashed name of object.
func (group *RootTsmV1) ForceReadRootByName(ctx context.Context, hashedName string) (*RootRoot, error) {
	log.Debugf("[ForceReadRootByName] Received object :%s to read from DB", hashedName)
	retryCount := 0
	for {
		result, err := group.client.baseClient.
			RootTsmV1().
			Roots().Get(ctx, hashedName, metav1.GetOptions{})
		if err != nil {
			log.Errorf("[ForceReadRootByName] Failed to Get Roots: %+v", err)
			if errors.IsTimeout(err) || customerrors.Is(err, context.DeadlineExceeded) {
				log.Errorf("[Retry Count: %d ] %+v", retryCount, err)
				if retryCount == maxRetryCount {
					log.Error("Max Retry exceed on Get Roots")
					return nil, err
				}
				retryCount += 1
				time.Sleep(sleepTime * time.Second)
			} else if customerrors.Is(err, context.Canceled) {
				log.Errorf("[ForceReadRootByName]: %+v", err)
				return nil, context.Canceled
			} else {
				log.Errorf("[ForceReadRootByName]: %+v", err)
				return nil, err
			}
		} else {
			log.Debugf("[ForceReadRootByName] Executed Successfully :%s", hashedName)
			return &RootRoot{
				client: group.client,
				Root:   result,
			}, nil
		}
	}
}

// DeleteRootByName deletes object stored in the database under the hashedName which is a hash of
// display name and parents names. Use it when you know hashed name of object.
func (group *RootTsmV1) DeleteRootByName(ctx context.Context, hashedName string) (err error) {
	log.Debugf("[DeleteRootByName] Received objectToDelete: %s", hashedName)

	var (
		retryCount int
		result     *baseroottsmtanzuvmwarecomv1.Root
	)
	retryCount = 0
	for {
		result, err = group.client.baseClient.
			RootTsmV1().
			Roots().Get(ctx, hashedName, metav1.GetOptions{})
		if err != nil {
			log.Errorf("[DeleteRootByName] Failed to Get Roots: %+v", err)
			if errors.IsTimeout(err) || customerrors.Is(err, context.DeadlineExceeded) {
				log.Errorf("[Retry Count: %d ] %+v", retryCount, err)
				if retryCount == maxRetryCount {
					log.Error("Max Retry exceed on Get Roots")
					return err
				}
				retryCount += 1
				time.Sleep(sleepTime * time.Second)
			} else if customerrors.Is(err, context.Canceled) {
				log.Errorf("[DeleteRootByName]: %+v", err)
				return context.Canceled
			} else if errors.IsNotFound(err) {
				log.Errorf("[DeleteRootByName] Object Notfound: %+v", err)
				break
			} else {
				log.Errorf("[DeleteRootByName]: %+v", err)
				return err
			}
		} else {
			break
		}
	}

	if result.Spec.ConfigGvk != nil {
		err := group.client.
			Config().
			DeleteConfigByName(ctx, result.Spec.ConfigGvk.Name)
		if err != nil && !errors.IsNotFound(err) {
			return err
		}
	}

	retryCount = 0
	for {
		err = group.client.baseClient.
			RootTsmV1().
			Roots().Delete(ctx, hashedName, metav1.DeleteOptions{})
		if err != nil {
			log.Errorf("[DeleteRootByName] failed to delete Roots: %+v", err)
			if errors.IsTimeout(err) || customerrors.Is(err, context.DeadlineExceeded) {
				log.Errorf("[Retry Count: %d ] %+v", retryCount, err)
				if retryCount == maxRetryCount {
					log.Error("Max retry exceed on delete Roots")
					return err
				}
				retryCount += 1
				time.Sleep(sleepTime * time.Second)
			} else if customerrors.Is(err, context.Canceled) {
				log.Errorf("[DeleteRootByName]: %+v", err)
				return context.Canceled
			} else if errors.IsNotFound(err) {
				log.Errorf("[DeleteRootByName] Object not found: %+v", err)
				break
			} else {
				log.Errorf("[DeleteRootByName]: %+v", err)
				return err
			}
		}
	}
	// Get Parent Node and check if gvk present before patch

	return
}

// CreateRootByName creates object in the database without hashing the name.
// Use it directly ONLY when objToCreate.Name is hashed name of the object.
func (group *RootTsmV1) CreateRootByName(ctx context.Context,
	objToCreate *baseroottsmtanzuvmwarecomv1.Root) (*RootRoot, error) {
	log.Debugf("[CreateRootByName] Received objToCreate: %s", objToCreate.GetName())
	if objToCreate.GetLabels() == nil {
		objToCreate.Labels = make(map[string]string)
	}
	if _, ok := objToCreate.Labels[common.DISPLAY_NAME_LABEL]; !ok {
		objToCreate.Labels[common.DISPLAY_NAME_LABEL] = objToCreate.GetName()
	}
	if objToCreate.Labels[common.DISPLAY_NAME_LABEL] == "" {
		objToCreate.Labels[common.DISPLAY_NAME_LABEL] = helper.DEFAULT_KEY
	}
	if objToCreate.Labels[common.DISPLAY_NAME_LABEL] != helper.DEFAULT_KEY {
		return nil, NewSingletonNameError(objToCreate.Labels[common.DISPLAY_NAME_LABEL])
	}

	objToCreate.Spec.ConfigGvk = nil

	var (
		retryCount int
		result     *baseroottsmtanzuvmwarecomv1.Root
		err        error
	)
	retryCount = 0
	for {
		result, err = group.client.baseClient.
			RootTsmV1().
			Roots().Create(ctx, objToCreate, metav1.CreateOptions{})
		if err != nil {
			log.Errorf("[CreateRootByName] Failed to Create Roots: %+v", err)
			if errors.IsTimeout(err) || customerrors.Is(err, context.DeadlineExceeded) {
				log.Errorf("[Retry Count: %d ] %+v", retryCount, err)
				if retryCount == maxRetryCount {
					log.Error("Max Retry exceed on Get Roots")
					return nil, err
				}
				retryCount += 1
				time.Sleep(sleepTime * time.Second)
			} else if customerrors.Is(err, context.Canceled) {
				log.Errorf("[CreateRootByName]: %+v", err)
				return nil, context.Canceled
			} else {
				log.Errorf("[CreateRootByName]: %+v", err)
				return nil, err
			}
		} else {
			break
		}
	}
	log.Debugf("[CreateRootByName] Roots created successfully: %s", objToCreate.GetName())

	log.Debugf("[CreateRootByName] Executed Successfully: %s", objToCreate.GetName())
	return &RootRoot{
		client: group.client,
		Root:   result,
	}, nil
}

// UpdateRootByName updates object stored in the database under the hashedName which is a hash of
// display name and parents names.
func (group *RootTsmV1) UpdateRootByName(ctx context.Context,
	objToUpdate *baseroottsmtanzuvmwarecomv1.Root) (*RootRoot, error) {
	log.Debugf("[UpdateRootByName] Received objToUpdate: %s", objToUpdate.GetName())
	if objToUpdate.Labels[common.DISPLAY_NAME_LABEL] != helper.DEFAULT_KEY {
		return nil, NewSingletonNameError(objToUpdate.Labels[common.DISPLAY_NAME_LABEL])
	}

	var patch Patch

	if objToUpdate.Annotations != nil || objToUpdate.Labels != nil {
		current, err := group.client.Root().GetRootByName(ctx, objToUpdate.Name)
		if err != nil {
			return nil, err
		}

		if objToUpdate.Annotations != nil {
			if current.Annotations[ownershipAnnotation] != "" {
				objToUpdate.Annotations[ownershipAnnotation] = current.Annotations[ownershipAnnotation]
			}
			patch = append(patch, PatchOp{
				Op:    "replace",
				Path:  "/metadata/annotations",
				Value: objToUpdate.Annotations,
			})
		}

		if objToUpdate.Labels != nil {
			parentsList := helper.GetCRDParentsMap()["roots.root.tsm.tanzu.vmware.com"]
			for _, k := range parentsList {
				objToUpdate.Labels[k] = current.Labels[k]
			}
			objToUpdate.Labels[common.IS_NAME_HASHED_LABEL] = current.Labels[common.IS_NAME_HASHED_LABEL]
			objToUpdate.Labels[common.DISPLAY_NAME_LABEL] = current.Labels[common.DISPLAY_NAME_LABEL]
			patch = append(patch, PatchOp{
				Op:    "replace",
				Path:  "/metadata/labels",
				Value: objToUpdate.Labels,
			})
		}
	}

	marshaled, err := patch.Marshal()
	if err != nil {
		return nil, err
	}

	var (
		result *baseroottsmtanzuvmwarecomv1.Root
	)
	newCtx := context.TODO()
	retryCount := 0
	for {
		result, err = group.client.baseClient.
			RootTsmV1().
			Roots().Patch(newCtx, objToUpdate.GetName(), types.JSONPatchType, marshaled, metav1.PatchOptions{}, "")
		if err != nil {
			log.Errorf("[UpdateRootByName] Failed to patch Root gvk in parent node[]: %+v", err)
			if errors.IsTimeout(err) || customerrors.Is(err, context.DeadlineExceeded) {
				log.Errorf("[Retry Count: %d ] %+v", retryCount, err)
				if retryCount == maxRetryCount {
					log.Error("Max Retry exceed on patching gvk")
					log.Errorf("Trigger Root Delete: %s", objToUpdate.GetName())
					delErr := group.DeleteRootByName(newCtx, objToUpdate.GetName())
					if delErr != nil {
						log.Errorf("Error occur while deleting Root: %s", objToUpdate.GetName())
						return nil, delErr
					}
					log.Errorf("Root Deleted: %s", objToUpdate.GetName())
					return nil, err
				}
				retryCount += 1
				time.Sleep(sleepTime * time.Second)
			} else if customerrors.Is(err, context.Canceled) {
				log.Errorf("[CreateRootByName]: %+v", err)
				return nil, context.Canceled
			} else {
				log.Errorf("[CreateRootByName] Unexpected Error Root] :%+v", err)
				log.Errorf("Trigger Root Delete: %s", objToUpdate.GetName())
				delErr := group.DeleteRootByName(newCtx, objToUpdate.GetName())
				if delErr != nil {
					log.Errorf("Error occur while deleting Root: %+v", objToUpdate.GetName())
					return nil, delErr
				}
				log.Errorf("Root Deleted: %s", objToUpdate.GetName())
				return nil, err
			}
		} else {
			log.Debugf("[CreateRootByName] Patch Root Success :%s", objToUpdate.GetName())
			break
		}
	}
	log.Debugf("[UpdateRootByName] Executed Successfully %s", objToUpdate.GetName())
	return &RootRoot{
		client: group.client,
		Root:   result,
	}, nil
}

// ListRoots returns slice of all existing objects of this type. Selectors can be provided in opts parameter.
func (group *RootTsmV1) ListRoots(ctx context.Context,
	opts metav1.ListOptions) (result []*RootRoot, err error) {
	key := "roots.root.tsm.tanzu.vmware.com"
	if s, ok := subscriptionMap.Load(key); ok {
		items := s.(subscription).informer.GetStore().List()
		result = make([]*RootRoot, len(items))
		for k, v := range items {
			item, _ := v.(*baseroottsmtanzuvmwarecomv1.Root)
			result[k] = &RootRoot{
				client: group.client,
				Root:   item,
			}
		}
	} else {
		list, err := group.client.baseClient.RootTsmV1().
			Roots().List(ctx, opts)
		if err != nil {
			return nil, err
		}
		result = make([]*RootRoot, len(list.Items))
		for k, v := range list.Items {
			item := v
			result[k] = &RootRoot{
				client: group.client,
				Root:   &item,
			}
		}
	}
	return
}

type RootRoot struct {
	client *Clientset
	*baseroottsmtanzuvmwarecomv1.Root
}

// Delete removes obj and all it's children from the database.
func (obj *RootRoot) Delete(ctx context.Context) error {
	err := obj.client.Root().DeleteRootByName(ctx, obj.GetName())
	if err != nil {
		return err
	}
	obj.Root = nil
	return nil
}

// Update updates spec of object in database. Children and Link can not be updated using this function.
func (obj *RootRoot) Update(ctx context.Context) error {
	result, err := obj.client.Root().UpdateRootByName(ctx, obj.Root)
	if err != nil {
		return err
	}
	obj.Root = result.Root
	return nil
}

// GetRootRoot calculates the hashed name based on parents and
// returns given object
func (c *Clientset) GetRootRoot(ctx context.Context) (result *RootRoot, err error) {
	hashedName := helper.GetHashedName("roots.root.tsm.tanzu.vmware.com", nil, helper.DEFAULT_KEY)
	return c.Root().GetRootByName(ctx, hashedName)
}

func (c *Clientset) RootRoot() *rootRootTsmV1Chainer {
	parentLabels := make(map[string]string)
	parentLabels["roots.root.tsm.tanzu.vmware.com"] = helper.DEFAULT_KEY
	return &rootRootTsmV1Chainer{
		client:       c,
		name:         helper.DEFAULT_KEY,
		parentLabels: parentLabels,
	}
}

// AddRootRoot calculates hashed name of the object based on
// parents names and creates it. objToCreate.Name is changed to the hashed name. Original name (helper.DEFAULT_KEY) is preserved in
// nexus/display_name label and can be obtained using DisplayName() method.
func (c *Clientset) AddRootRoot(ctx context.Context,
	objToCreate *baseroottsmtanzuvmwarecomv1.Root) (result *RootRoot, err error) {
	if objToCreate.GetName() == "" {
		objToCreate.SetName(helper.DEFAULT_KEY)
	}
	if objToCreate.GetName() != helper.DEFAULT_KEY {
		return nil, NewSingletonNameError(objToCreate.GetName())
	}
	if objToCreate.Labels == nil {
		objToCreate.Labels = map[string]string{}
	}
	if objToCreate.Labels[common.IS_NAME_HASHED_LABEL] != "true" {
		objToCreate.Labels[common.DISPLAY_NAME_LABEL] = objToCreate.GetName()
		objToCreate.Labels[common.IS_NAME_HASHED_LABEL] = "true"
		hashedName := helper.GetHashedName(objToCreate.CRDName(), nil, objToCreate.GetName())
		objToCreate.Name = hashedName
	}
	return c.Root().CreateRootByName(ctx, objToCreate)
}

// DeleteRootRoot calculates hashedName of object based on
// parents and deletes given object
func (c *Clientset) DeleteRootRoot(ctx context.Context) (err error) {
	hashedName := helper.GetHashedName("roots.root.tsm.tanzu.vmware.com", nil, helper.DEFAULT_KEY)
	return c.Root().DeleteRootByName(ctx, hashedName)
}

// GetConfig returns child of given type
func (obj *RootRoot) GetConfig(ctx context.Context) (
	result *ConfigConfig, err error) {
	if obj.Spec.ConfigGvk == nil {
		return nil, NewChildNotFound(obj.DisplayName(), "Root.Root", "Config")
	}
	return obj.client.Config().GetConfigByName(ctx, obj.Spec.ConfigGvk.Name)
}

// AddConfig calculates hashed name of the child to create based on objToCreate.Name
// and parents names and creates it. objToCreate.Name is changed to the hashed name. Original name is preserved in
// nexus/display_name label and can be obtained using DisplayName() method.
func (obj *RootRoot) AddConfig(ctx context.Context,
	objToCreate *baseconfigtsmtanzuvmwarecomv1.Config) (result *ConfigConfig, err error) {
	log.Debugf("[AddConfig] Received objToCreate: %s", objToCreate.GetName())
	if objToCreate.Labels == nil {
		objToCreate.Labels = map[string]string{}
	}
	for _, v := range helper.GetCRDParentsMap()["roots.root.tsm.tanzu.vmware.com"] {
		objToCreate.Labels[v] = obj.Labels[v]
	}
	objToCreate.Labels["roots.root.tsm.tanzu.vmware.com"] = obj.DisplayName()
	if objToCreate.Labels[common.IS_NAME_HASHED_LABEL] != "true" {
		objToCreate.Labels[common.DISPLAY_NAME_LABEL] = objToCreate.GetName()
		objToCreate.Labels[common.IS_NAME_HASHED_LABEL] = "true"
		hashedName := helper.GetHashedName(objToCreate.CRDName(), objToCreate.Labels, objToCreate.GetName())
		objToCreate.Name = hashedName
	}
	result, err = obj.client.Config().CreateConfigByName(ctx, objToCreate)
	log.Debugf("[AddConfig] ApiSpecification created successfully: %s", objToCreate.GetName())
	updatedObj, getErr := obj.client.Root().GetRootByName(ctx, obj.GetName())
	if getErr == nil {
		obj.Root = updatedObj.Root
	}
	log.Debugf("[AddConfig] Executed Successfully: %s", objToCreate.GetName())
	return
}

// DeleteConfig calculates hashed name of the child to delete based on displayName
// and parents names and deletes it.

func (obj *RootRoot) DeleteConfig(ctx context.Context) (err error) {
	if obj.Spec.ConfigGvk != nil {
		err = obj.client.
			Config().DeleteConfigByName(ctx, obj.Spec.ConfigGvk.Name)
		if err != nil {
			return err
		}
	}
	updatedObj, err := obj.client.
		Root().GetRootByName(ctx, obj.GetName())
	if err == nil {
		obj.Root = updatedObj.Root
	}
	return
}

type rootRootTsmV1Chainer struct {
	client       *Clientset
	name         string
	parentLabels map[string]string
}

func (c *rootRootTsmV1Chainer) Subscribe() {
	key := "roots.root.tsm.tanzu.vmware.com"
	if _, ok := subscriptionMap.Load(key); !ok {
		informer := informerroottsmtanzuvmwarecomv1.NewRootInformer(c.client.baseClient, 0, cache.Indexers{})
		subscribe(key, informer)
	}
}

func (c *rootRootTsmV1Chainer) Unsubscribe() {
	key := "roots.root.tsm.tanzu.vmware.com"
	if s, ok := subscriptionMap.Load(key); ok {
		close(s.(subscription).stop)
		subscriptionMap.Delete(key)
	}
}

func (c *rootRootTsmV1Chainer) IsSubscribed() bool {
	key := "roots.root.tsm.tanzu.vmware.com"
	_, ok := subscriptionMap.Load(key)
	return ok
}

func (c *rootRootTsmV1Chainer) RegisterEventHandler(addCB func(obj *RootRoot), updateCB func(oldObj, newObj *RootRoot), deleteCB func(obj *RootRoot)) (cache.ResourceEventHandlerRegistration, error) {
	fmt.Println("RegisterEventHandler for RootRoot")
	var (
		registrationId cache.ResourceEventHandlerRegistration
		err            error
		informer       cache.SharedIndexInformer
	)
	key := "roots.root.tsm.tanzu.vmware.com"
	stopper := make(chan struct{})
	if s, ok := subscriptionMap.Load(key); ok {
		fmt.Println("Informer exists for RootRoot")
		sub := s.(subscription)
		informer = sub.informer
	} else {
		fmt.Println("Informer doesn't exists for RootRoot, so creating a new one")
		informer = informerroottsmtanzuvmwarecomv1.NewRootInformer(c.client.baseClient, 0, cache.Indexers{})
		go informer.Run(stopper)
		subscribe(key, informer)
	}
	registrationId, err = informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
		AddFunc: func(obj interface{}) {
			nc := &RootRoot{
				client: c.client,
				Root:   obj.(*baseroottsmtanzuvmwarecomv1.Root),
			}

			addCB(nc)
		},

		UpdateFunc: func(oldObj, newObj interface{}) {
			oldData := &RootRoot{
				client: c.client,
				Root:   oldObj.(*baseroottsmtanzuvmwarecomv1.Root),
			}
			newData := &RootRoot{
				client: c.client,
				Root:   newObj.(*baseroottsmtanzuvmwarecomv1.Root),
			}
			updateCB(oldData, newData)
		},

		DeleteFunc: func(obj interface{}) {
			nc := &RootRoot{
				client: c.client,
				Root:   obj.(*baseroottsmtanzuvmwarecomv1.Root),
			}

			deleteCB(nc)
		},
	})
	return registrationId, err
}

func (c *rootRootTsmV1Chainer) RegisterAddCallback(cbfn func(obj *RootRoot)) (cache.ResourceEventHandlerRegistration, error) {
	log.Debugf("[RegisterAddCallback] Received for RootRoot")
	var (
		registrationId cache.ResourceEventHandlerRegistration
		err            error
	)
	key := "roots.root.tsm.tanzu.vmware.com"
	stopper := make(chan struct{})
	if s, ok := subscriptionMap.Load(key); ok {
		log.Debugf("[RegisterAddCallback] RootRoot Use Subscription Informer")
		sub := s.(subscription)
		registrationId, err = sub.informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
			AddFunc: func(obj interface{}) {
				nc := &RootRoot{
					client: c.client,
					Root:   obj.(*baseroottsmtanzuvmwarecomv1.Root),
				}

				cbfn(nc)
			},
		})
	} else {
		log.Debugf("[RegisterAddCallback] RootRoot Create New Informer")
		informer := informerroottsmtanzuvmwarecomv1.NewRootInformer(c.client.baseClient, 0, cache.Indexers{})
		registrationId, err = informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
			AddFunc: func(obj interface{}) {
				nc := &RootRoot{
					client: c.client,
					Root:   obj.(*baseroottsmtanzuvmwarecomv1.Root),
				}

				cbfn(nc)
			},
		})
		go informer.Run(stopper)
	}
	return registrationId, err
}

func (c *rootRootTsmV1Chainer) RegisterUpdateCallback(cbfn func(oldObj, newObj *RootRoot)) (cache.ResourceEventHandlerRegistration, error) {
	log.Debugf("[RegisterUpdateCallback] Received for RootRoot")
	var (
		registrationId cache.ResourceEventHandlerRegistration
		err            error
	)
	key := "roots.root.tsm.tanzu.vmware.com"
	stopper := make(chan struct{})
	if s, ok := subscriptionMap.Load(key); ok {
		log.Debugf("[RegisterUpdateCallback] RootRoot Use Subscription Informer")
		sub := s.(subscription)
		registrationId, err = sub.informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
			UpdateFunc: func(oldObj, newObj interface{}) {
				oldData := &RootRoot{
					client: c.client,
					Root:   oldObj.(*baseroottsmtanzuvmwarecomv1.Root),
				}
				newData := &RootRoot{
					client: c.client,
					Root:   newObj.(*baseroottsmtanzuvmwarecomv1.Root),
				}
				cbfn(oldData, newData)
			},
		})
	} else {
		log.Debugf("[RegisterUpdateCallback] RootRoot Create New Informer")
		informer := informerroottsmtanzuvmwarecomv1.NewRootInformer(c.client.baseClient, 0, cache.Indexers{})
		registrationId, err = informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
			UpdateFunc: func(oldObj, newObj interface{}) {
				oldData := &RootRoot{
					client: c.client,
					Root:   oldObj.(*baseroottsmtanzuvmwarecomv1.Root),
				}
				newData := &RootRoot{
					client: c.client,
					Root:   newObj.(*baseroottsmtanzuvmwarecomv1.Root),
				}
				cbfn(oldData, newData)
			},
		})
		go informer.Run(stopper)
	}
	return registrationId, err
}

func (c *rootRootTsmV1Chainer) RegisterDeleteCallback(cbfn func(obj *RootRoot)) (cache.ResourceEventHandlerRegistration, error) {
	log.Debugf("[RegisterDeleteCallback] Received for RootRoot")
	var (
		registrationId cache.ResourceEventHandlerRegistration
		err            error
	)
	key := "roots.root.tsm.tanzu.vmware.com"
	stopper := make(chan struct{})
	if s, ok := subscriptionMap.Load(key); ok {
		log.Debugf("[RegisterDeleteCallback] RootRoot Use Subscription Informer")
		sub := s.(subscription)
		registrationId, err = sub.informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
			DeleteFunc: func(obj interface{}) {
				nc := &RootRoot{
					client: c.client,
					Root:   obj.(*baseroottsmtanzuvmwarecomv1.Root),
				}

				cbfn(nc)
			},
		})
	} else {
		log.Debugf("[RegisterDeleteCallback] RootRoot Create New Informer")
		informer := informerroottsmtanzuvmwarecomv1.NewRootInformer(c.client.baseClient, 0, cache.Indexers{})
		registrationId, err = informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
			DeleteFunc: func(obj interface{}) {
				nc := &RootRoot{
					client: c.client,
					Root:   obj.(*baseroottsmtanzuvmwarecomv1.Root),
				}

				cbfn(nc)
			},
		})
		go informer.Run(stopper)
	}
	return registrationId, err
}

func (c *rootRootTsmV1Chainer) Config(name string) *configConfigTsmV1Chainer {
	parentLabels := c.parentLabels
	parentLabels["configs.config.tsm.tanzu.vmware.com"] = name
	return &configConfigTsmV1Chainer{
		client:       c.client,
		name:         name,
		parentLabels: parentLabels,
	}
}

// GetConfig calculates hashed name of the object based on displayName and it's parents and returns the object
func (c *rootRootTsmV1Chainer) GetConfig(ctx context.Context, displayName string) (result *ConfigConfig, err error) {
	hashedName := helper.GetHashedName("configs.config.tsm.tanzu.vmware.com", c.parentLabels, displayName)
	return c.client.Config().GetConfigByName(ctx, hashedName)
}

// AddConfig calculates hashed name of the child to create based on objToCreate.Name
// and parents names and creates it. objToCreate.Name is changed to the hashed name. Original name is preserved in
// nexus/display_name label and can be obtained using DisplayName() method.
func (c *rootRootTsmV1Chainer) AddConfig(ctx context.Context,
	objToCreate *baseconfigtsmtanzuvmwarecomv1.Config) (result *ConfigConfig, err error) {
	if objToCreate.Labels == nil {
		objToCreate.Labels = map[string]string{}
	}
	for k, v := range c.parentLabels {
		objToCreate.Labels[k] = v
	}
	if objToCreate.Labels[common.IS_NAME_HASHED_LABEL] != "true" {
		objToCreate.Labels[common.DISPLAY_NAME_LABEL] = objToCreate.GetName()
		objToCreate.Labels[common.IS_NAME_HASHED_LABEL] = "true"
		hashedName := helper.GetHashedName("configs.config.tsm.tanzu.vmware.com", c.parentLabels, objToCreate.GetName())
		objToCreate.Name = hashedName
	}
	return c.client.Config().CreateConfigByName(ctx, objToCreate)
}

// DeleteConfig calculates hashed name of the child to delete based on displayName
// and parents names and deletes it.
func (c *rootRootTsmV1Chainer) DeleteConfig(ctx context.Context, name string) (err error) {
	if c.parentLabels == nil {
		c.parentLabels = map[string]string{}
	}
	c.parentLabels[common.IS_NAME_HASHED_LABEL] = "true"
	hashedName := helper.GetHashedName("configs.config.tsm.tanzu.vmware.com", c.parentLabels, name)
	return c.client.Config().DeleteConfigByName(ctx, hashedName)
}

// GetConfigByName returns object stored in the database under the hashedName which is a hash of display
// name and parents names. Use it when you know hashed name of object.
func (group *ConfigTsmV1) GetConfigByName(ctx context.Context, hashedName string) (*ConfigConfig, error) {
	key := "configs.config.tsm.tanzu.vmware.com"
	if s, ok := subscriptionMap.Load(key); ok {
		log.Debugf("[GetConfigByName] GetObject: %s from cache", hashedName)
		item, exists, err := s.(subscription).informer.GetStore().GetByKey(hashedName)
		if !exists {
			return nil, err
		}

		log.Debugf("[GetConfigByName] Object: %s exists in cache", hashedName)
		result, _ := item.(*baseconfigtsmtanzuvmwarecomv1.Config)
		return &ConfigConfig{
			client: group.client,
			Config: result,
		}, nil
	} else {
		retryCount := 0
		for {
			result, err := group.client.baseClient.
				ConfigTsmV1().
				Configs().Get(ctx, hashedName, metav1.GetOptions{})
			if err != nil {
				log.Errorf("[GetConfigByName] Failed to Get Configs: %+v", err)
				if errors.IsTimeout(err) || customerrors.Is(err, context.DeadlineExceeded) {
					log.Errorf("[Retry Count: %d ] %+v", retryCount, err)
					if retryCount == maxRetryCount {
						log.Error("Max Retry exceed on Get Configs")
						return nil, err
					}
					retryCount += 1
					time.Sleep(sleepTime * time.Second)
				} else if customerrors.Is(err, context.Canceled) {
					log.Errorf("[GetConfigByName]: %+v", err)
					return nil, context.Canceled
				} else {
					log.Errorf("[GetConfigByName]: %+v", err)
					return nil, err
				}
			} else {
				return &ConfigConfig{
					client: group.client,
					Config: result,
				}, nil
			}
		}
	}
}

// ForceReadConfigByName read object directly from the database under the hashedName which is a hash of display
// name and parents names. Use it when you know hashed name of object.
func (group *ConfigTsmV1) ForceReadConfigByName(ctx context.Context, hashedName string) (*ConfigConfig, error) {
	log.Debugf("[ForceReadConfigByName] Received object :%s to read from DB", hashedName)
	retryCount := 0
	for {
		result, err := group.client.baseClient.
			ConfigTsmV1().
			Configs().Get(ctx, hashedName, metav1.GetOptions{})
		if err != nil {
			log.Errorf("[ForceReadConfigByName] Failed to Get Configs: %+v", err)
			if errors.IsTimeout(err) || customerrors.Is(err, context.DeadlineExceeded) {
				log.Errorf("[Retry Count: %d ] %+v", retryCount, err)
				if retryCount == maxRetryCount {
					log.Error("Max Retry exceed on Get Configs")
					return nil, err
				}
				retryCount += 1
				time.Sleep(sleepTime * time.Second)
			} else if customerrors.Is(err, context.Canceled) {
				log.Errorf("[ForceReadConfigByName]: %+v", err)
				return nil, context.Canceled
			} else {
				log.Errorf("[ForceReadConfigByName]: %+v", err)
				return nil, err
			}
		} else {
			log.Debugf("[ForceReadConfigByName] Executed Successfully :%s", hashedName)
			return &ConfigConfig{
				client: group.client,
				Config: result,
			}, nil
		}
	}
}

// DeleteConfigByName deletes object stored in the database under the hashedName which is a hash of
// display name and parents names. Use it when you know hashed name of object.
func (group *ConfigTsmV1) DeleteConfigByName(ctx context.Context, hashedName string) (err error) {
	log.Debugf("[DeleteConfigByName] Received objectToDelete: %s", hashedName)

	var (
		retryCount int
		result     *baseconfigtsmtanzuvmwarecomv1.Config
	)
	retryCount = 0
	for {
		result, err = group.client.baseClient.
			ConfigTsmV1().
			Configs().Get(ctx, hashedName, metav1.GetOptions{})
		if err != nil {
			log.Errorf("[DeleteConfigByName] Failed to Get Configs: %+v", err)
			if errors.IsTimeout(err) || customerrors.Is(err, context.DeadlineExceeded) {
				log.Errorf("[Retry Count: %d ] %+v", retryCount, err)
				if retryCount == maxRetryCount {
					log.Error("Max Retry exceed on Get Configs")
					return err
				}
				retryCount += 1
				time.Sleep(sleepTime * time.Second)
			} else if customerrors.Is(err, context.Canceled) {
				log.Errorf("[DeleteConfigByName]: %+v", err)
				return context.Canceled
			} else if errors.IsNotFound(err) {
				log.Errorf("[DeleteConfigByName] Object Notfound: %+v", err)
				break
			} else {
				log.Errorf("[DeleteConfigByName]: %+v", err)
				return err
			}
		} else {
			break
		}
	}

	if result.Spec.GNSGvk != nil {
		err := group.client.
			Gns().
			DeleteGnsByName(ctx, result.Spec.GNSGvk.Name)
		if err != nil && !errors.IsNotFound(err) {
			return err
		}
	}

	if result.Spec.DNSGvk != nil {
		err := group.client.
			Gns().
			DeleteDnsByName(ctx, result.Spec.DNSGvk.Name)
		if err != nil && !errors.IsNotFound(err) {
			return err
		}
	}

	if result.Spec.VMPPoliciesGvk != nil {
		err := group.client.
			Policypkg().
			DeleteVMpolicyByName(ctx, result.Spec.VMPPoliciesGvk.Name)
		if err != nil && !errors.IsNotFound(err) {
			return err
		}
	}

	if result.Spec.DomainGvk != nil {
		err := group.client.
			Config().
			DeleteDomainByName(ctx, result.Spec.DomainGvk.Name)
		if err != nil && !errors.IsNotFound(err) {
			return err
		}
	}

	for _, v := range result.Spec.FooExampleGvk {
		err := group.client.
			Config().DeleteFooTypeABCByName(ctx, v.Name)
		if err != nil {
			if errors.IsNotFound(err) {
				continue
			} else {
				return err
			}
		}
	}

	if result.Spec.SvcGrpInfoGvk != nil {
		err := group.client.
			Servicegroup().
			DeleteSvcGroupLinkInfoByName(ctx, result.Spec.SvcGrpInfoGvk.Name)
		if err != nil && !errors.IsNotFound(err) {
			return err
		}
	}

	retryCount = 0
	for {
		err = group.client.baseClient.
			ConfigTsmV1().
			Configs().Delete(ctx, hashedName, metav1.DeleteOptions{})
		if err != nil {
			log.Errorf("[DeleteConfigByName] failed to delete Configs: %+v", err)
			if errors.IsTimeout(err) || customerrors.Is(err, context.DeadlineExceeded) {
				log.Errorf("[Retry Count: %d ] %+v", retryCount, err)
				if retryCount == maxRetryCount {
					log.Error("Max retry exceed on delete Configs")
					return err
				}
				retryCount += 1
				time.Sleep(sleepTime * time.Second)
			} else if customerrors.Is(err, context.Canceled) {
				log.Errorf("[DeleteConfigByName]: %+v", err)
				return context.Canceled
			} else if errors.IsNotFound(err) {
				log.Errorf("[DeleteConfigByName] Object not found: %+v", err)
				break
			} else {
				log.Errorf("[DeleteConfigByName]: %+v", err)
				return err
			}
		}
	}
	// Get Parent Node and check if gvk present before patch

	var gvkPresent bool
	log.Debugf("[DeleteConfigByName] Get Parent details")
	var patch Patch
	parents := result.GetLabels()
	if parents == nil {
		parents = make(map[string]string)
	}
	parentName, ok := parents["roots.root.tsm.tanzu.vmware.com"]
	if !ok {
		parentName = helper.DEFAULT_KEY
	}
	if result.GetLabels() != nil {
		if parents[common.IS_NAME_HASHED_LABEL] == "true" {
			parentName = helper.GetHashedName("roots.root.tsm.tanzu.vmware.com", parents, parentName)
		}
	} else {
		parentName = helper.GetHashedName("roots.root.tsm.tanzu.vmware.com", parents, parentName)
	}
	parentData, err := group.client.baseClient.
		RootTsmV1().
		Roots().Get(ctx, parentName, metav1.GetOptions{})
	if err != nil {
		log.Errorf("[DeleteConfigByName] Failed to get Parent node: %+v", err)
		if errors.IsNotFound(err) {
			return nil
		} else {
			return err
		}
	}

	if parentData.Spec.ConfigGvk != nil {
		log.Debugf("[DeleteConfigByName] GVK present in parent for node: %s", hashedName)
		gvkPresent = true
	}

	if gvkPresent {

		patchOp := PatchOp{
			Op:   "remove",
			Path: "/spec/configGvk",
		}

		patch = append(patch, patchOp)
		marshaled, err := patch.Marshal()
		if err != nil {
			return err
		}

		retryCount = 0
		newCtx := context.TODO()
		for {
			_, err = group.client.baseClient.
				RootTsmV1().
				Roots().Patch(newCtx, parentName, types.JSONPatchType, marshaled, metav1.PatchOptions{})
			if err != nil {
				log.Errorf("Failed to patch Config gvk in parent node[Roots]: %+v", err)
				if errors.IsTimeout(err) || customerrors.Is(err, context.DeadlineExceeded) {
					log.Errorf("[Retry Count: %d ] %+v", retryCount, err)
					if retryCount == maxRetryCount {
						log.Error("Max Retry exceed on patching gvk")
						return err
					}
					retryCount += 1
					time.Sleep(sleepTime * time.Second)
				} else if customerrors.Is(err, context.Canceled) {
					log.Errorf("[DeleteConfigByName]: %+v", err)
					return context.Canceled
				} else {
					log.Errorf("Unexpected Error occur Config]: %+v", err)
					return err
				}
			} else {
				log.Debugf("[DeleteConfigByName] Patch Config Success: %s", hashedName)
				break
			}
		}
		log.Debugf("[DeleteConfigByName] Executed Successfully: %s", hashedName)
	}

	return
}

// CreateConfigByName creates object in the database without hashing the name.
// Use it directly ONLY when objToCreate.Name is hashed name of the object.
func (group *ConfigTsmV1) CreateConfigByName(ctx context.Context,
	objToCreate *baseconfigtsmtanzuvmwarecomv1.Config) (*ConfigConfig, error) {
	log.Debugf("[CreateConfigByName] Received objToCreate: %s", objToCreate.GetName())
	if objToCreate.GetLabels() == nil {
		objToCreate.Labels = make(map[string]string)
	}
	if _, ok := objToCreate.Labels[common.DISPLAY_NAME_LABEL]; !ok {
		objToCreate.Labels[common.DISPLAY_NAME_LABEL] = objToCreate.GetName()
	}

	objToCreate.Spec.GNSGvk = nil
	objToCreate.Spec.DNSGvk = nil
	objToCreate.Spec.VMPPoliciesGvk = nil
	objToCreate.Spec.DomainGvk = nil
	objToCreate.Spec.FooExampleGvk = nil
	objToCreate.Spec.SvcGrpInfoGvk = nil
	objToCreate.Spec.ACPPoliciesGvk = nil

	var (
		retryCount int
		result     *baseconfigtsmtanzuvmwarecomv1.Config
		err        error
	)
	retryCount = 0
	for {
		result, err = group.client.baseClient.
			ConfigTsmV1().
			Configs().Create(ctx, objToCreate, metav1.CreateOptions{})
		if err != nil {
			log.Errorf("[CreateConfigByName] Failed to Create Configs: %+v", err)
			if errors.IsTimeout(err) || customerrors.Is(err, context.DeadlineExceeded) {
				log.Errorf("[Retry Count: %d ] %+v", retryCount, err)
				if retryCount == maxRetryCount {
					log.Error("Max Retry exceed on Get Configs")
					return nil, err
				}
				retryCount += 1
				time.Sleep(sleepTime * time.Second)
			} else if customerrors.Is(err, context.Canceled) {
				log.Errorf("[CreateConfigByName]: %+v", err)
				return nil, context.Canceled
			} else {
				log.Errorf("[CreateConfigByName]: %+v", err)
				return nil, err
			}
		} else {
			break
		}
	}
	log.Debugf("[CreateConfigByName] Configs created successfully: %s", objToCreate.GetName())

	parentName, ok := objToCreate.GetLabels()["roots.root.tsm.tanzu.vmware.com"]
	if !ok {
		parentName = helper.DEFAULT_KEY
	}
	if objToCreate.Labels[common.IS_NAME_HASHED_LABEL] == "true" {
		parentName = helper.GetHashedName("roots.root.tsm.tanzu.vmware.com", objToCreate.GetLabels(), parentName)
	}

	var patch Patch
	patchOp := PatchOp{
		Op:   "replace",
		Path: "/spec/configGvk",
		Value: baseconfigtsmtanzuvmwarecomv1.Child{
			Group: "config.tsm.tanzu.vmware.com",
			Kind:  "Config",
			Name:  objToCreate.Name,
		},
	}
	patch = append(patch, patchOp)
	marshaled, err := patch.Marshal()
	if err != nil {
		return nil, err
	}
	retryCount = 0
	newCtx := context.TODO()
	for {
		_, err = group.client.baseClient.
			RootTsmV1().
			Roots().Patch(newCtx, parentName, types.JSONPatchType, marshaled, metav1.PatchOptions{})
		if err != nil {
			log.Errorf("[CreateConfigByName] Failed to patch Config gvk in parent node[Roots]: %+v", err)
			if errors.IsTimeout(err) || customerrors.Is(err, context.DeadlineExceeded) {
				log.Errorf("[Retry Count: %d ] %+v", retryCount, err)
				if retryCount == maxRetryCount {
					log.Error("Max Retry exceed on patching gvk")
					log.Errorf("Trigger Config Delete: %s", objToCreate.GetName())
					delErr := group.DeleteConfigByName(newCtx, objToCreate.GetName())
					if delErr != nil {
						log.Errorf("Error occur while deleting Config: %s", objToCreate.GetName())
						return nil, delErr
					}
					log.Errorf("Config Deleted: %s", objToCreate.GetName())
					return nil, err
				}
				retryCount += 1
				time.Sleep(sleepTime * time.Second)
			} else if customerrors.Is(err, context.Canceled) {
				log.Errorf("[CreateConfigByName]: %+v", err)
				return nil, context.Canceled
			} else {
				log.Errorf("[CreateConfigByName] Unexpected Error Config] :%+v", err)
				log.Errorf("Trigger Config Delete: %s", objToCreate.GetName())
				delErr := group.DeleteConfigByName(newCtx, objToCreate.GetName())
				if delErr != nil {
					log.Errorf("Error occur while deleting Config: %+v", objToCreate.GetName())
					return nil, delErr
				}
				log.Errorf("Config Deleted: %s", objToCreate.GetName())
				return nil, err
			}
		} else {
			log.Debugf("[CreateConfigByName] Patch Config Success :%s", objToCreate.GetName())
			break
		}
	}

	log.Debugf("[CreateConfigByName] Executed Successfully: %s", objToCreate.GetName())
	return &ConfigConfig{
		client: group.client,
		Config: result,
	}, nil
}

// UpdateConfigByName updates object stored in the database under the hashedName which is a hash of
// display name and parents names.
func (group *ConfigTsmV1) UpdateConfigByName(ctx context.Context,
	objToUpdate *baseconfigtsmtanzuvmwarecomv1.Config) (*ConfigConfig, error) {
	log.Debugf("[UpdateConfigByName] Received objToUpdate: %s", objToUpdate.GetName())

	var patch Patch

	if objToUpdate.Annotations != nil || objToUpdate.Labels != nil {
		current, err := group.client.Config().GetConfigByName(ctx, objToUpdate.Name)
		if err != nil {
			return nil, err
		}

		if objToUpdate.Annotations != nil {
			if current.Annotations[ownershipAnnotation] != "" {
				objToUpdate.Annotations[ownershipAnnotation] = current.Annotations[ownershipAnnotation]
			}
			patch = append(patch, PatchOp{
				Op:    "replace",
				Path:  "/metadata/annotations",
				Value: objToUpdate.Annotations,
			})
		}

		if objToUpdate.Labels != nil {
			parentsList := helper.GetCRDParentsMap()["configs.config.tsm.tanzu.vmware.com"]
			for _, k := range parentsList {
				objToUpdate.Labels[k] = current.Labels[k]
			}
			objToUpdate.Labels[common.IS_NAME_HASHED_LABEL] = current.Labels[common.IS_NAME_HASHED_LABEL]
			objToUpdate.Labels[common.DISPLAY_NAME_LABEL] = current.Labels[common.DISPLAY_NAME_LABEL]
			patch = append(patch, PatchOp{
				Op:    "replace",
				Path:  "/metadata/labels",
				Value: objToUpdate.Labels,
			})
		}
	}

	var rt reflect.Type

	rt = reflect.TypeOf(objToUpdate.Spec.MyStr0)
	if rt.Kind() == reflect.Slice || rt.Kind() == reflect.Array || rt.Kind() == reflect.Map {
		if !reflect.ValueOf(objToUpdate.Spec.MyStr0).IsNil() {
			patchValueMyStr0 := objToUpdate.Spec.MyStr0
			patchOpMyStr0 := PatchOp{
				Op:    "replace",
				Path:  "/spec/myStr0",
				Value: patchValueMyStr0,
			}
			patch = append(patch, patchOpMyStr0)
		}
	} else {
		patchValueMyStr0 := objToUpdate.Spec.MyStr0
		patchOpMyStr0 := PatchOp{
			Op:    "replace",
			Path:  "/spec/myStr0",
			Value: patchValueMyStr0,
		}
		patch = append(patch, patchOpMyStr0)
	}

	rt = reflect.TypeOf(objToUpdate.Spec.MyStr1)
	if rt.Kind() == reflect.Slice || rt.Kind() == reflect.Array || rt.Kind() == reflect.Map {
		if !reflect.ValueOf(objToUpdate.Spec.MyStr1).IsNil() {
			patchValueMyStr1 := objToUpdate.Spec.MyStr1
			patchOpMyStr1 := PatchOp{
				Op:    "replace",
				Path:  "/spec/myStr1",
				Value: patchValueMyStr1,
			}
			patch = append(patch, patchOpMyStr1)
		}
	} else {
		patchValueMyStr1 := objToUpdate.Spec.MyStr1
		patchOpMyStr1 := PatchOp{
			Op:    "replace",
			Path:  "/spec/myStr1",
			Value: patchValueMyStr1,
		}
		patch = append(patch, patchOpMyStr1)
	}

	rt = reflect.TypeOf(objToUpdate.Spec.MyStr2)
	if rt.Kind() == reflect.Slice || rt.Kind() == reflect.Array || rt.Kind() == reflect.Map {
		if !reflect.ValueOf(objToUpdate.Spec.MyStr2).IsNil() {
			patchValueMyStr2 := objToUpdate.Spec.MyStr2
			patchOpMyStr2 := PatchOp{
				Op:    "replace",
				Path:  "/spec/myStr2",
				Value: patchValueMyStr2,
			}
			patch = append(patch, patchOpMyStr2)
		}
	} else {
		patchValueMyStr2 := objToUpdate.Spec.MyStr2
		patchOpMyStr2 := PatchOp{
			Op:    "replace",
			Path:  "/spec/myStr2",
			Value: patchValueMyStr2,
		}
		patch = append(patch, patchOpMyStr2)
	}

	rt = reflect.TypeOf(objToUpdate.Spec.XYZPort)
	if rt.Kind() == reflect.Slice || rt.Kind() == reflect.Array || rt.Kind() == reflect.Map {
		if !reflect.ValueOf(objToUpdate.Spec.XYZPort).IsNil() {
			patchValueXYZPort := objToUpdate.Spec.XYZPort
			patchOpXYZPort := PatchOp{
				Op:    "replace",
				Path:  "/spec/xYZPort",
				Value: patchValueXYZPort,
			}
			patch = append(patch, patchOpXYZPort)
		}
	} else {
		patchValueXYZPort := objToUpdate.Spec.XYZPort
		patchOpXYZPort := PatchOp{
			Op:    "replace",
			Path:  "/spec/xYZPort",
			Value: patchValueXYZPort,
		}
		patch = append(patch, patchOpXYZPort)
	}

	rt = reflect.TypeOf(objToUpdate.Spec.ABCHost)
	if rt.Kind() == reflect.Slice || rt.Kind() == reflect.Array || rt.Kind() == reflect.Map {
		if !reflect.ValueOf(objToUpdate.Spec.ABCHost).IsNil() {
			patchValueABCHost := objToUpdate.Spec.ABCHost
			patchOpABCHost := PatchOp{
				Op:    "replace",
				Path:  "/spec/aBCHost",
				Value: patchValueABCHost,
			}
			patch = append(patch, patchOpABCHost)
		}
	} else {
		patchValueABCHost := objToUpdate.Spec.ABCHost
		patchOpABCHost := PatchOp{
			Op:    "replace",
			Path:  "/spec/aBCHost",
			Value: patchValueABCHost,
		}
		patch = append(patch, patchOpABCHost)
	}

	rt = reflect.TypeOf(objToUpdate.Spec.ClusterNamespaces)
	if rt.Kind() == reflect.Slice || rt.Kind() == reflect.Array || rt.Kind() == reflect.Map {
		if !reflect.ValueOf(objToUpdate.Spec.ClusterNamespaces).IsNil() {
			patchValueClusterNamespaces := objToUpdate.Spec.ClusterNamespaces
			patchOpClusterNamespaces := PatchOp{
				Op:    "replace",
				Path:  "/spec/clusterNamespaces",
				Value: patchValueClusterNamespaces,
			}
			patch = append(patch, patchOpClusterNamespaces)
		}
	} else {
		patchValueClusterNamespaces := objToUpdate.Spec.ClusterNamespaces
		patchOpClusterNamespaces := PatchOp{
			Op:    "replace",
			Path:  "/spec/clusterNamespaces",
			Value: patchValueClusterNamespaces,
		}
		patch = append(patch, patchOpClusterNamespaces)
	}

	rt = reflect.TypeOf(objToUpdate.Spec.TestValMarkers)
	if rt.Kind() == reflect.Slice || rt.Kind() == reflect.Array || rt.Kind() == reflect.Map {
		if !reflect.ValueOf(objToUpdate.Spec.TestValMarkers).IsNil() {
			patchValueTestValMarkers := objToUpdate.Spec.TestValMarkers
			patchOpTestValMarkers := PatchOp{
				Op:    "replace",
				Path:  "/spec/testValMarkers",
				Value: patchValueTestValMarkers,
			}
			patch = append(patch, patchOpTestValMarkers)
		}
	} else {
		patchValueTestValMarkers := objToUpdate.Spec.TestValMarkers
		patchOpTestValMarkers := PatchOp{
			Op:    "replace",
			Path:  "/spec/testValMarkers",
			Value: patchValueTestValMarkers,
		}
		patch = append(patch, patchOpTestValMarkers)
	}

	rt = reflect.TypeOf(objToUpdate.Spec.Instance)
	if rt.Kind() == reflect.Slice || rt.Kind() == reflect.Array || rt.Kind() == reflect.Map {
		if !reflect.ValueOf(objToUpdate.Spec.Instance).IsNil() {
			patchValueInstance := objToUpdate.Spec.Instance
			patchOpInstance := PatchOp{
				Op:    "replace",
				Path:  "/spec/instance",
				Value: patchValueInstance,
			}
			patch = append(patch, patchOpInstance)
		}
	} else {
		patchValueInstance := objToUpdate.Spec.Instance
		patchOpInstance := PatchOp{
			Op:    "replace",
			Path:  "/spec/instance",
			Value: patchValueInstance,
		}
		patch = append(patch, patchOpInstance)
	}

	rt = reflect.TypeOf(objToUpdate.Spec.CuOption)
	if rt.Kind() == reflect.Slice || rt.Kind() == reflect.Array || rt.Kind() == reflect.Map {
		if !reflect.ValueOf(objToUpdate.Spec.CuOption).IsNil() {
			patchValueCuOption := objToUpdate.Spec.CuOption
			patchOpCuOption := PatchOp{
				Op:    "replace",
				Path:  "/spec/option_cu",
				Value: patchValueCuOption,
			}
			patch = append(patch, patchOpCuOption)
		}
	} else {
		patchValueCuOption := objToUpdate.Spec.CuOption
		patchOpCuOption := PatchOp{
			Op:    "replace",
			Path:  "/spec/option_cu",
			Value: patchValueCuOption,
		}
		patch = append(patch, patchOpCuOption)
	}

	marshaled, err := patch.Marshal()
	if err != nil {
		return nil, err
	}

	var (
		result *baseconfigtsmtanzuvmwarecomv1.Config
	)
	newCtx := context.TODO()
	retryCount := 0
	for {
		result, err = group.client.baseClient.
			ConfigTsmV1().
			Configs().Patch(newCtx, objToUpdate.GetName(), types.JSONPatchType, marshaled, metav1.PatchOptions{}, "")
		if err != nil {
			log.Errorf("[UpdateConfigByName] Failed to patch Config gvk in parent node[Roots]: %+v", err)
			if errors.IsTimeout(err) || customerrors.Is(err, context.DeadlineExceeded) {
				log.Errorf("[Retry Count: %d ] %+v", retryCount, err)
				if retryCount == maxRetryCount {
					log.Error("Max Retry exceed on patching gvk")
					log.Errorf("Trigger Config Delete: %s", objToUpdate.GetName())
					delErr := group.DeleteConfigByName(newCtx, objToUpdate.GetName())
					if delErr != nil {
						log.Errorf("Error occur while deleting Config: %s", objToUpdate.GetName())
						return nil, delErr
					}
					log.Errorf("Config Deleted: %s", objToUpdate.GetName())
					return nil, err
				}
				retryCount += 1
				time.Sleep(sleepTime * time.Second)
			} else if customerrors.Is(err, context.Canceled) {
				log.Errorf("[CreateConfigByName]: %+v", err)
				return nil, context.Canceled
			} else {
				log.Errorf("[CreateConfigByName] Unexpected Error Config] :%+v", err)
				log.Errorf("Trigger Config Delete: %s", objToUpdate.GetName())
				delErr := group.DeleteConfigByName(newCtx, objToUpdate.GetName())
				if delErr != nil {
					log.Errorf("Error occur while deleting Config: %+v", objToUpdate.GetName())
					return nil, delErr
				}
				log.Errorf("Config Deleted: %s", objToUpdate.GetName())
				return nil, err
			}
		} else {
			log.Debugf("[CreateConfigByName] Patch Config Success :%s", objToUpdate.GetName())
			break
		}
	}
	log.Debugf("[UpdateConfigByName] Executed Successfully %s", objToUpdate.GetName())
	return &ConfigConfig{
		client: group.client,
		Config: result,
	}, nil
}

// ListConfigs returns slice of all existing objects of this type. Selectors can be provided in opts parameter.
func (group *ConfigTsmV1) ListConfigs(ctx context.Context,
	opts metav1.ListOptions) (result []*ConfigConfig, err error) {
	key := "configs.config.tsm.tanzu.vmware.com"
	if s, ok := subscriptionMap.Load(key); ok {
		items := s.(subscription).informer.GetStore().List()
		result = make([]*ConfigConfig, len(items))
		for k, v := range items {
			item, _ := v.(*baseconfigtsmtanzuvmwarecomv1.Config)
			result[k] = &ConfigConfig{
				client: group.client,
				Config: item,
			}
		}
	} else {
		list, err := group.client.baseClient.ConfigTsmV1().
			Configs().List(ctx, opts)
		if err != nil {
			return nil, err
		}
		result = make([]*ConfigConfig, len(list.Items))
		for k, v := range list.Items {
			item := v
			result[k] = &ConfigConfig{
				client: group.client,
				Config: &item,
			}
		}
	}
	return
}

type ConfigConfig struct {
	client *Clientset
	*baseconfigtsmtanzuvmwarecomv1.Config
}

// Delete removes obj and all it's children from the database.
func (obj *ConfigConfig) Delete(ctx context.Context) error {
	err := obj.client.Config().DeleteConfigByName(ctx, obj.GetName())
	if err != nil {
		return err
	}
	obj.Config = nil
	return nil
}

// Update updates spec of object in database. Children and Link can not be updated using this function.
func (obj *ConfigConfig) Update(ctx context.Context) error {
	result, err := obj.client.Config().UpdateConfigByName(ctx, obj.Config)
	if err != nil {
		return err
	}
	obj.Config = result.Config
	return nil
}

func (obj *ConfigConfig) GetParent(ctx context.Context) (result *RootRoot, err error) {
	hashedName := helper.GetHashedName("roots.root.tsm.tanzu.vmware.com", obj.Labels, obj.Labels["roots.root.tsm.tanzu.vmware.com"])
	return obj.client.Root().GetRootByName(ctx, hashedName)
}

// GetGNS returns child of given type
func (obj *ConfigConfig) GetGNS(ctx context.Context) (
	result *GnsGns, err error) {
	if obj.Spec.GNSGvk == nil {
		return nil, NewChildNotFound(obj.DisplayName(), "Config.Config", "GNS")
	}
	return obj.client.Gns().GetGnsByName(ctx, obj.Spec.GNSGvk.Name)
}

// AddGNS calculates hashed name of the child to create based on objToCreate.Name
// and parents names and creates it. objToCreate.Name is changed to the hashed name. Original name is preserved in
// nexus/display_name label and can be obtained using DisplayName() method.
func (obj *ConfigConfig) AddGNS(ctx context.Context,
	objToCreate *basegnstsmtanzuvmwarecomv1.Gns) (result *GnsGns, err error) {
	log.Debugf("[AddGNS] Received objToCreate: %s", objToCreate.GetName())
	if objToCreate.Labels == nil {
		objToCreate.Labels = map[string]string{}
	}
	for _, v := range helper.GetCRDParentsMap()["configs.config.tsm.tanzu.vmware.com"] {
		objToCreate.Labels[v] = obj.Labels[v]
	}
	objToCreate.Labels["configs.config.tsm.tanzu.vmware.com"] = obj.DisplayName()
	if objToCreate.Labels[common.IS_NAME_HASHED_LABEL] != "true" {
		objToCreate.Labels[common.DISPLAY_NAME_LABEL] = objToCreate.GetName()
		objToCreate.Labels[common.IS_NAME_HASHED_LABEL] = "true"
		hashedName := helper.GetHashedName(objToCreate.CRDName(), objToCreate.Labels, objToCreate.GetName())
		objToCreate.Name = hashedName
	}
	result, err = obj.client.Gns().CreateGnsByName(ctx, objToCreate)
	log.Debugf("[AddGNS] ApiSpecification created successfully: %s", objToCreate.GetName())
	updatedObj, getErr := obj.client.Config().GetConfigByName(ctx, obj.GetName())
	if getErr == nil {
		obj.Config = updatedObj.Config
	}
	log.Debugf("[AddGNS] Executed Successfully: %s", objToCreate.GetName())
	return
}

// DeleteGNS calculates hashed name of the child to delete based on displayName
// and parents names and deletes it.

func (obj *ConfigConfig) DeleteGNS(ctx context.Context) (err error) {
	if obj.Spec.GNSGvk != nil {
		err = obj.client.
			Gns().DeleteGnsByName(ctx, obj.Spec.GNSGvk.Name)
		if err != nil {
			return err
		}
	}
	updatedObj, err := obj.client.
		Config().GetConfigByName(ctx, obj.GetName())
	if err == nil {
		obj.Config = updatedObj.Config
	}
	return
}

// GetDNS returns child of given type
func (obj *ConfigConfig) GetDNS(ctx context.Context) (
	result *GnsDns, err error) {
	if obj.Spec.DNSGvk == nil {
		return nil, NewChildNotFound(obj.DisplayName(), "Config.Config", "DNS")
	}
	return obj.client.Gns().GetDnsByName(ctx, obj.Spec.DNSGvk.Name)
}

// AddDNS calculates hashed name of the child to create based on objToCreate.Name
// and parents names and creates it. objToCreate.Name is changed to the hashed name. Original name is preserved in
// nexus/display_name label and can be obtained using DisplayName() method.
func (obj *ConfigConfig) AddDNS(ctx context.Context,
	objToCreate *basegnstsmtanzuvmwarecomv1.Dns) (result *GnsDns, err error) {
	log.Debugf("[AddDNS] Received objToCreate: %s", objToCreate.GetName())
	if objToCreate.Labels == nil {
		objToCreate.Labels = map[string]string{}
	}
	for _, v := range helper.GetCRDParentsMap()["configs.config.tsm.tanzu.vmware.com"] {
		objToCreate.Labels[v] = obj.Labels[v]
	}
	objToCreate.Labels["configs.config.tsm.tanzu.vmware.com"] = obj.DisplayName()
	if objToCreate.Labels[common.IS_NAME_HASHED_LABEL] != "true" {
		if objToCreate.GetName() == "" {
			objToCreate.SetName(helper.DEFAULT_KEY)
		}
		if objToCreate.GetName() != helper.DEFAULT_KEY {
			return nil, NewSingletonNameError(objToCreate.GetName())
		}
		objToCreate.Labels[common.DISPLAY_NAME_LABEL] = objToCreate.GetName()
		objToCreate.Labels[common.IS_NAME_HASHED_LABEL] = "true"
		hashedName := helper.GetHashedName(objToCreate.CRDName(), objToCreate.Labels, objToCreate.GetName())
		objToCreate.Name = hashedName
	}
	result, err = obj.client.Gns().CreateDnsByName(ctx, objToCreate)
	log.Debugf("[AddDNS] ApiSpecification created successfully: %s", objToCreate.GetName())
	updatedObj, getErr := obj.client.Config().GetConfigByName(ctx, obj.GetName())
	if getErr == nil {
		obj.Config = updatedObj.Config
	}
	log.Debugf("[AddDNS] Executed Successfully: %s", objToCreate.GetName())
	return
}

// DeleteDNS calculates hashed name of the child to delete based on displayName
// and parents names and deletes it.

func (obj *ConfigConfig) DeleteDNS(ctx context.Context) (err error) {
	if obj.Spec.DNSGvk != nil {
		err = obj.client.
			Gns().DeleteDnsByName(ctx, obj.Spec.DNSGvk.Name)
		if err != nil {
			return err
		}
	}
	updatedObj, err := obj.client.
		Config().GetConfigByName(ctx, obj.GetName())
	if err == nil {
		obj.Config = updatedObj.Config
	}
	return
}

// GetVMPPolicies returns child of given type
func (obj *ConfigConfig) GetVMPPolicies(ctx context.Context) (
	result *PolicypkgVMpolicy, err error) {
	if obj.Spec.VMPPoliciesGvk == nil {
		return nil, NewChildNotFound(obj.DisplayName(), "Config.Config", "VMPPolicies")
	}
	return obj.client.Policypkg().GetVMpolicyByName(ctx, obj.Spec.VMPPoliciesGvk.Name)
}

// AddVMPPolicies calculates hashed name of the child to create based on objToCreate.Name
// and parents names and creates it. objToCreate.Name is changed to the hashed name. Original name is preserved in
// nexus/display_name label and can be obtained using DisplayName() method.
func (obj *ConfigConfig) AddVMPPolicies(ctx context.Context,
	objToCreate *basepolicypkgtsmtanzuvmwarecomv1.VMpolicy) (result *PolicypkgVMpolicy, err error) {
	log.Debugf("[AddVMPPolicies] Received objToCreate: %s", objToCreate.GetName())
	if objToCreate.Labels == nil {
		objToCreate.Labels = map[string]string{}
	}
	for _, v := range helper.GetCRDParentsMap()["configs.config.tsm.tanzu.vmware.com"] {
		objToCreate.Labels[v] = obj.Labels[v]
	}
	objToCreate.Labels["configs.config.tsm.tanzu.vmware.com"] = obj.DisplayName()
	if objToCreate.Labels[common.IS_NAME_HASHED_LABEL] != "true" {
		objToCreate.Labels[common.DISPLAY_NAME_LABEL] = objToCreate.GetName()
		objToCreate.Labels[common.IS_NAME_HASHED_LABEL] = "true"
		hashedName := helper.GetHashedName(objToCreate.CRDName(), objToCreate.Labels, objToCreate.GetName())
		objToCreate.Name = hashedName
	}
	result, err = obj.client.Policypkg().CreateVMpolicyByName(ctx, objToCreate)
	log.Debugf("[AddVMPPolicies] ApiSpecification created successfully: %s", objToCreate.GetName())
	updatedObj, getErr := obj.client.Config().GetConfigByName(ctx, obj.GetName())
	if getErr == nil {
		obj.Config = updatedObj.Config
	}
	log.Debugf("[AddVMPPolicies] Executed Successfully: %s", objToCreate.GetName())
	return
}

// DeleteVMPPolicies calculates hashed name of the child to delete based on displayName
// and parents names and deletes it.

func (obj *ConfigConfig) DeleteVMPPolicies(ctx context.Context) (err error) {
	if obj.Spec.VMPPoliciesGvk != nil {
		err = obj.client.
			Policypkg().DeleteVMpolicyByName(ctx, obj.Spec.VMPPoliciesGvk.Name)
		if err != nil {
			return err
		}
	}
	updatedObj, err := obj.client.
		Config().GetConfigByName(ctx, obj.GetName())
	if err == nil {
		obj.Config = updatedObj.Config
	}
	return
}

// GetDomain returns child of given type
func (obj *ConfigConfig) GetDomain(ctx context.Context) (
	result *ConfigDomain, err error) {
	if obj.Spec.DomainGvk == nil {
		return nil, NewChildNotFound(obj.DisplayName(), "Config.Config", "Domain")
	}
	return obj.client.Config().GetDomainByName(ctx, obj.Spec.DomainGvk.Name)
}

// AddDomain calculates hashed name of the child to create based on objToCreate.Name
// and parents names and creates it. objToCreate.Name is changed to the hashed name. Original name is preserved in
// nexus/display_name label and can be obtained using DisplayName() method.
func (obj *ConfigConfig) AddDomain(ctx context.Context,
	objToCreate *baseconfigtsmtanzuvmwarecomv1.Domain) (result *ConfigDomain, err error) {
	log.Debugf("[AddDomain] Received objToCreate: %s", objToCreate.GetName())
	if objToCreate.Labels == nil {
		objToCreate.Labels = map[string]string{}
	}
	for _, v := range helper.GetCRDParentsMap()["configs.config.tsm.tanzu.vmware.com"] {
		objToCreate.Labels[v] = obj.Labels[v]
	}
	objToCreate.Labels["configs.config.tsm.tanzu.vmware.com"] = obj.DisplayName()
	if objToCreate.Labels[common.IS_NAME_HASHED_LABEL] != "true" {
		objToCreate.Labels[common.DISPLAY_NAME_LABEL] = objToCreate.GetName()
		objToCreate.Labels[common.IS_NAME_HASHED_LABEL] = "true"
		hashedName := helper.GetHashedName(objToCreate.CRDName(), objToCreate.Labels, objToCreate.GetName())
		objToCreate.Name = hashedName
	}
	result, err = obj.client.Config().CreateDomainByName(ctx, objToCreate)
	log.Debugf("[AddDomain] ApiSpecification created successfully: %s", objToCreate.GetName())
	updatedObj, getErr := obj.client.Config().GetConfigByName(ctx, obj.GetName())
	if getErr == nil {
		obj.Config = updatedObj.Config
	}
	log.Debugf("[AddDomain] Executed Successfully: %s", objToCreate.GetName())
	return
}

// DeleteDomain calculates hashed name of the child to delete based on displayName
// and parents names and deletes it.

func (obj *ConfigConfig) DeleteDomain(ctx context.Context) (err error) {
	if obj.Spec.DomainGvk != nil {
		err = obj.client.
			Config().DeleteDomainByName(ctx, obj.Spec.DomainGvk.Name)
		if err != nil {
			return err
		}
	}
	updatedObj, err := obj.client.
		Config().GetConfigByName(ctx, obj.GetName())
	if err == nil {
		obj.Config = updatedObj.Config
	}
	return
}

// GetAllFooExample returns all children of given type
func (obj *ConfigConfig) GetAllFooExample(ctx context.Context) (
	result []*ConfigFooTypeABC, err error) {
	result = make([]*ConfigFooTypeABC, 0, len(obj.Spec.FooExampleGvk))
	for _, v := range obj.Spec.FooExampleGvk {
		l, err := obj.client.Config().GetFooTypeABCByName(ctx, v.Name)
		if err != nil {
			return nil, err
		}
		result = append(result, l)
	}
	return
}

// GetFooExample returns child which has given displayName
func (obj *ConfigConfig) GetFooExample(ctx context.Context,
	displayName string) (result *ConfigFooTypeABC, err error) {
	l, ok := obj.Spec.FooExampleGvk[displayName]
	if !ok {
		return nil, NewChildNotFound(obj.DisplayName(), "Config.Config", "FooExample", displayName)
	}
	result, err = obj.client.Config().GetFooTypeABCByName(ctx, l.Name)
	return
}

// AddFooExample calculates hashed name of the child to create based on objToCreate.Name
// and parents names and creates it. objToCreate.Name is changed to the hashed name. Original name is preserved in
// nexus/display_name label and can be obtained using DisplayName() method.
func (obj *ConfigConfig) AddFooExample(ctx context.Context,
	objToCreate *baseconfigtsmtanzuvmwarecomv1.FooTypeABC) (result *ConfigFooTypeABC, err error) {
	log.Debugf("[AddFooExample] Received objToCreate: %s", objToCreate.GetName())
	if objToCreate.Labels == nil {
		objToCreate.Labels = map[string]string{}
	}
	for _, v := range helper.GetCRDParentsMap()["configs.config.tsm.tanzu.vmware.com"] {
		objToCreate.Labels[v] = obj.Labels[v]
	}
	objToCreate.Labels["configs.config.tsm.tanzu.vmware.com"] = obj.DisplayName()
	if objToCreate.Labels[common.IS_NAME_HASHED_LABEL] != "true" {
		objToCreate.Labels[common.DISPLAY_NAME_LABEL] = objToCreate.GetName()
		objToCreate.Labels[common.IS_NAME_HASHED_LABEL] = "true"
		hashedName := helper.GetHashedName(objToCreate.CRDName(), objToCreate.Labels, objToCreate.GetName())
		objToCreate.Name = hashedName
	}
	result, err = obj.client.Config().CreateFooTypeABCByName(ctx, objToCreate)
	log.Debugf("[AddFooExample] ApiSpecification created successfully: %s", objToCreate.GetName())
	updatedObj, getErr := obj.client.Config().GetConfigByName(ctx, obj.GetName())
	if getErr == nil {
		obj.Config = updatedObj.Config
	}
	log.Debugf("[AddFooExample] Executed Successfully: %s", objToCreate.GetName())
	return
}

// DeleteFooExample calculates hashed name of the child to delete based on displayName
// and parents names and deletes it.

func (obj *ConfigConfig) DeleteFooExample(ctx context.Context, displayName string) (err error) {
	log.Debugf("[ DeleteFooExample] Received for FooTypeABC object: %s to delete", displayName)
	l, ok := obj.Spec.FooExampleGvk[displayName]
	if !ok {
		return NewChildNotFound(obj.DisplayName(), "Config.Config", "FooExample", displayName)
	}
	err = obj.client.Config().DeleteFooTypeABCByName(ctx, l.Name)
	if err != nil {
		return err
	}
	log.Debugf("[ DeleteFooExample] FooTypeABC object: %s deleted successfully", displayName)
	updatedObj, err := obj.client.Config().GetConfigByName(ctx, obj.GetName())
	if err == nil {
		obj.Config = updatedObj.Config
	}
	return
}

// GetSvcGrpInfo returns child of given type
func (obj *ConfigConfig) GetSvcGrpInfo(ctx context.Context) (
	result *ServicegroupSvcGroupLinkInfo, err error) {
	if obj.Spec.SvcGrpInfoGvk == nil {
		return nil, NewChildNotFound(obj.DisplayName(), "Config.Config", "SvcGrpInfo")
	}
	return obj.client.Servicegroup().GetSvcGroupLinkInfoByName(ctx, obj.Spec.SvcGrpInfoGvk.Name)
}

// AddSvcGrpInfo calculates hashed name of the child to create based on objToCreate.Name
// and parents names and creates it. objToCreate.Name is changed to the hashed name. Original name is preserved in
// nexus/display_name label and can be obtained using DisplayName() method.
func (obj *ConfigConfig) AddSvcGrpInfo(ctx context.Context,
	objToCreate *baseservicegrouptsmtanzuvmwarecomv1.SvcGroupLinkInfo) (result *ServicegroupSvcGroupLinkInfo, err error) {
	log.Debugf("[AddSvcGrpInfo] Received objToCreate: %s", objToCreate.GetName())
	if objToCreate.Labels == nil {
		objToCreate.Labels = map[string]string{}
	}
	for _, v := range helper.GetCRDParentsMap()["configs.config.tsm.tanzu.vmware.com"] {
		objToCreate.Labels[v] = obj.Labels[v]
	}
	objToCreate.Labels["configs.config.tsm.tanzu.vmware.com"] = obj.DisplayName()
	if objToCreate.Labels[common.IS_NAME_HASHED_LABEL] != "true" {
		objToCreate.Labels[common.DISPLAY_NAME_LABEL] = objToCreate.GetName()
		objToCreate.Labels[common.IS_NAME_HASHED_LABEL] = "true"
		hashedName := helper.GetHashedName(objToCreate.CRDName(), objToCreate.Labels, objToCreate.GetName())
		objToCreate.Name = hashedName
	}
	result, err = obj.client.Servicegroup().CreateSvcGroupLinkInfoByName(ctx, objToCreate)
	log.Debugf("[AddSvcGrpInfo] ApiSpecification created successfully: %s", objToCreate.GetName())
	updatedObj, getErr := obj.client.Config().GetConfigByName(ctx, obj.GetName())
	if getErr == nil {
		obj.Config = updatedObj.Config
	}
	log.Debugf("[AddSvcGrpInfo] Executed Successfully: %s", objToCreate.GetName())
	return
}

// DeleteSvcGrpInfo calculates hashed name of the child to delete based on displayName
// and parents names and deletes it.

func (obj *ConfigConfig) DeleteSvcGrpInfo(ctx context.Context) (err error) {
	if obj.Spec.SvcGrpInfoGvk != nil {
		err = obj.client.
			Servicegroup().DeleteSvcGroupLinkInfoByName(ctx, obj.Spec.SvcGrpInfoGvk.Name)
		if err != nil {
			return err
		}
	}
	updatedObj, err := obj.client.
		Config().GetConfigByName(ctx, obj.GetName())
	if err == nil {
		obj.Config = updatedObj.Config
	}
	return
}

// GetAllACPPolicies returns all links of given type
func (obj *ConfigConfig) GetAllACPPolicies(ctx context.Context) (
	result []*PolicypkgAccessControlPolicy, err error) {
	result = make([]*PolicypkgAccessControlPolicy, 0, len(obj.Spec.ACPPoliciesGvk))
	for _, v := range obj.Spec.ACPPoliciesGvk {
		l, err := obj.client.Policypkg().GetAccessControlPolicyByName(ctx, v.Name)
		if err != nil {
			return nil, err
		}
		result = append(result, l)
	}
	return
}

// GetACPPolicies returns link which has given displayName
func (obj *ConfigConfig) GetACPPolicies(ctx context.Context,
	displayName string) (result *PolicypkgAccessControlPolicy, err error) {
	l, ok := obj.Spec.ACPPoliciesGvk[displayName]
	if !ok {
		return nil, NewLinkNotFound(obj.DisplayName(), "Config.Config", "ACPPolicies", displayName)
	}
	result, err = obj.client.Policypkg().GetAccessControlPolicyByName(ctx, l.Name)
	return
}

// LinkACPPolicies links obj with linkToAdd object. This function doesn't create linked object, it must be
// already created.
func (obj *ConfigConfig) LinkACPPolicies(ctx context.Context,
	linkToAdd *PolicypkgAccessControlPolicy) error {

	payload := "{\"spec\": {\"aCPPoliciesGvk\": {\"" + linkToAdd.DisplayName() + "\": {\"name\": \"" + linkToAdd.Name + "\",\"kind\": \"AccessControlPolicy\", \"group\": \"policypkg.tsm.tanzu.vmware.com\"}}}}"
	result, err := obj.client.baseClient.ConfigTsmV1().Configs().Patch(ctx, obj.Name, types.MergePatchType, []byte(payload), metav1.PatchOptions{})
	if err != nil {
		return err
	}

	obj.Config = result
	return nil
}

// UnlinkACPPolicies unlinks linkToRemove object from obj. This function doesn't delete linked object.
func (obj *ConfigConfig) UnlinkACPPolicies(ctx context.Context,
	linkToRemove *PolicypkgAccessControlPolicy) (err error) {
	var patch Patch

	patchOp := PatchOp{
		Op:   "remove",
		Path: "/spec/aCPPoliciesGvk/" + linkToRemove.DisplayName(),
	}

	patch = append(patch, patchOp)
	marshaled, err := patch.Marshal()
	if err != nil {
		return err
	}
	result, err := obj.client.baseClient.ConfigTsmV1().Configs().Patch(ctx, obj.Name, types.JSONPatchType, marshaled, metav1.PatchOptions{})
	if err != nil {
		return err
	}
	obj.Config = result
	return nil

}

type configConfigTsmV1Chainer struct {
	client       *Clientset
	name         string
	parentLabels map[string]string
}

func (c *configConfigTsmV1Chainer) Subscribe() {
	key := "configs.config.tsm.tanzu.vmware.com"
	if _, ok := subscriptionMap.Load(key); !ok {
		informer := informerconfigtsmtanzuvmwarecomv1.NewConfigInformer(c.client.baseClient, 0, cache.Indexers{})
		subscribe(key, informer)
	}
}

func (c *configConfigTsmV1Chainer) Unsubscribe() {
	key := "configs.config.tsm.tanzu.vmware.com"
	if s, ok := subscriptionMap.Load(key); ok {
		close(s.(subscription).stop)
		subscriptionMap.Delete(key)
	}
}

func (c *configConfigTsmV1Chainer) IsSubscribed() bool {
	key := "configs.config.tsm.tanzu.vmware.com"
	_, ok := subscriptionMap.Load(key)
	return ok
}

func (c *configConfigTsmV1Chainer) RegisterEventHandler(addCB func(obj *ConfigConfig), updateCB func(oldObj, newObj *ConfigConfig), deleteCB func(obj *ConfigConfig)) (cache.ResourceEventHandlerRegistration, error) {
	fmt.Println("RegisterEventHandler for ConfigConfig")
	var (
		registrationId cache.ResourceEventHandlerRegistration
		err            error
		informer       cache.SharedIndexInformer
	)
	key := "configs.config.tsm.tanzu.vmware.com"
	stopper := make(chan struct{})
	if s, ok := subscriptionMap.Load(key); ok {
		fmt.Println("Informer exists for ConfigConfig")
		sub := s.(subscription)
		informer = sub.informer
	} else {
		fmt.Println("Informer doesn't exists for ConfigConfig, so creating a new one")
		informer = informerconfigtsmtanzuvmwarecomv1.NewConfigInformer(c.client.baseClient, 0, cache.Indexers{})
		go informer.Run(stopper)
		subscribe(key, informer)
	}
	registrationId, err = informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
		AddFunc: func(obj interface{}) {
			nc := &ConfigConfig{
				client: c.client,
				Config: obj.(*baseconfigtsmtanzuvmwarecomv1.Config),
			}

			var parent *RootRoot
			gvkExist := false
			for i := 0; i < 600; i++ {
				// Check if parent exists
				p, err := nc.GetParent(context.TODO())
				if err != nil || p == nil {
					time.Sleep(500 * time.Millisecond)
					continue
				}
				parent = p
				// Check GVK

				if parent.Spec.ConfigGvk == nil {
					time.Sleep(500 * time.Millisecond)
					continue
				}

				gvkExist = true
				break
			}
			if parent == nil {
				hashedName := helper.GetHashedName("roots.root.tsm.tanzu.vmware.com", nc.Labels, nc.Labels["roots.root.tsm.tanzu.vmware.com"])
				parent, err = c.client.Root().ForceReadRootByName(context.TODO(), hashedName)
				if err != nil {
					if errors.IsNotFound(err) {
						return
					}
					panic("error occurred while fetching parent " + err.Error())
				}
				panic(fmt.Sprintf("parent found (event loop is stalled) " + nc.DisplayName()))
			}
			if !gvkExist {
				// Check GVK

				if parent.Spec.ConfigGvk == nil {
					return
				}

				panic(fmt.Sprintf("gvk found (event loop is stalled) " + nc.DisplayName()))
			}

			addCB(nc)
		},

		UpdateFunc: func(oldObj, newObj interface{}) {
			oldData := &ConfigConfig{
				client: c.client,
				Config: oldObj.(*baseconfigtsmtanzuvmwarecomv1.Config),
			}
			newData := &ConfigConfig{
				client: c.client,
				Config: newObj.(*baseconfigtsmtanzuvmwarecomv1.Config),
			}
			updateCB(oldData, newData)
		},

		DeleteFunc: func(obj interface{}) {
			nc := &ConfigConfig{
				client: c.client,
				Config: obj.(*baseconfigtsmtanzuvmwarecomv1.Config),
			}

			var parent *RootRoot
			gvkExist := true
			for i := 0; i < 600; i++ {
				// Check if parent exists
				p, err := nc.GetParent(context.TODO())
				if err != nil || p == nil {
					time.Sleep(500 * time.Millisecond)
					continue
				}
				parent = p
				// Check GVK

				if parent.Spec.ConfigGvk != nil {
					time.Sleep(500 * time.Millisecond)
					continue
				}

				gvkExist = false
				break
			}
			if parent == nil {
				hashedName := helper.GetHashedName("roots.root.tsm.tanzu.vmware.com", nc.Labels, nc.Labels["roots.root.tsm.tanzu.vmware.com"])
				parent, err = c.client.Root().ForceReadRootByName(context.TODO(), hashedName)
				if err != nil {
					if errors.IsNotFound(err) {
						return
					}
					panic("error occurred while fetching parent " + err.Error())
				}
				panic(fmt.Sprintf("parent found (event loop is stalled) " + nc.DisplayName()))
			}
			if gvkExist {
				// Check GVK

				if parent.Spec.ConfigGvk != nil {
					return
				}

				panic(fmt.Sprintf("gvk not found (event loop is stalled) " + nc.DisplayName()))
			}

			deleteCB(nc)
		},
	})
	return registrationId, err
}

func (c *configConfigTsmV1Chainer) RegisterAddCallback(cbfn func(obj *ConfigConfig)) (cache.ResourceEventHandlerRegistration, error) {
	log.Debugf("[RegisterAddCallback] Received for ConfigConfig")
	var (
		registrationId cache.ResourceEventHandlerRegistration
		err            error
	)
	key := "configs.config.tsm.tanzu.vmware.com"
	stopper := make(chan struct{})
	if s, ok := subscriptionMap.Load(key); ok {
		log.Debugf("[RegisterAddCallback] ConfigConfig Use Subscription Informer")
		sub := s.(subscription)
		registrationId, err = sub.informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
			AddFunc: func(obj interface{}) {
				nc := &ConfigConfig{
					client: c.client,
					Config: obj.(*baseconfigtsmtanzuvmwarecomv1.Config),
				}

				var parent *RootRoot
				gvkExist := false
				for i := 0; i < 600; i++ {
					// Check if parent exists
					p, err := nc.GetParent(context.TODO())
					if err != nil || p == nil {
						time.Sleep(500 * time.Millisecond)
						continue
					}
					parent = p

					// Check GVK

					if parent.Spec.ConfigGvk == nil {
						time.Sleep(500 * time.Millisecond)
						continue
					}

					gvkExist = true

					break
				}

				if parent == nil {
					hashedName := helper.GetHashedName("roots.root.tsm.tanzu.vmware.com", nc.Labels, nc.Labels["roots.root.tsm.tanzu.vmware.com"])
					parent, err = c.client.Root().ForceReadRootByName(context.TODO(), hashedName)
					if err != nil {
						if errors.IsNotFound(err) {
							return
						}

						panic("error occurred while fetching parent " + err.Error())
					}
					panic(fmt.Sprintf("parent found (event loop is stalled) " + nc.DisplayName()))
				}

				if !gvkExist {
					// Check GVK

					if parent.Spec.ConfigGvk == nil {
						return
					}

					panic(fmt.Sprintf("gvk found (event loop is stalled) " + nc.DisplayName()))
				}

				cbfn(nc)
			},
		})
	} else {
		log.Debugf("[RegisterAddCallback] ConfigConfig Create New Informer")
		informer := informerconfigtsmtanzuvmwarecomv1.NewConfigInformer(c.client.baseClient, 0, cache.Indexers{})
		registrationId, err = informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
			AddFunc: func(obj interface{}) {
				nc := &ConfigConfig{
					client: c.client,
					Config: obj.(*baseconfigtsmtanzuvmwarecomv1.Config),
				}

				var parent *RootRoot
				gvkExist := false
				for i := 0; i < 600; i++ {
					// Check if parent exists
					p, err := nc.GetParent(context.TODO())
					if err != nil || p == nil {
						time.Sleep(500 * time.Millisecond)
						continue
					}
					parent = p

					// Check GVK

					if parent.Spec.ConfigGvk == nil {
						time.Sleep(500 * time.Millisecond)
						continue
					}

					gvkExist = true

					break
				}

				if parent == nil {
					hashedName := helper.GetHashedName("roots.root.tsm.tanzu.vmware.com", nc.Labels, nc.Labels["roots.root.tsm.tanzu.vmware.com"])
					parent, err = c.client.Root().ForceReadRootByName(context.TODO(), hashedName)
					if err != nil {
						if errors.IsNotFound(err) {
							return
						}

						panic("error occurred while fetching parent " + err.Error())
					}
					panic(fmt.Sprintf("parent found (event loop is stalled) " + nc.DisplayName()))
				}

				if !gvkExist {
					// Check GVK

					if parent.Spec.ConfigGvk == nil {
						return
					}

					panic(fmt.Sprintf("gvk found (event loop is stalled) " + nc.DisplayName()))
				}

				cbfn(nc)
			},
		})
		go informer.Run(stopper)
	}
	return registrationId, err
}

func (c *configConfigTsmV1Chainer) RegisterUpdateCallback(cbfn func(oldObj, newObj *ConfigConfig)) (cache.ResourceEventHandlerRegistration, error) {
	log.Debugf("[RegisterUpdateCallback] Received for ConfigConfig")
	var (
		registrationId cache.ResourceEventHandlerRegistration
		err            error
	)
	key := "configs.config.tsm.tanzu.vmware.com"
	stopper := make(chan struct{})
	if s, ok := subscriptionMap.Load(key); ok {
		log.Debugf("[RegisterUpdateCallback] ConfigConfig Use Subscription Informer")
		sub := s.(subscription)
		registrationId, err = sub.informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
			UpdateFunc: func(oldObj, newObj interface{}) {
				oldData := &ConfigConfig{
					client: c.client,
					Config: oldObj.(*baseconfigtsmtanzuvmwarecomv1.Config),
				}
				newData := &ConfigConfig{
					client: c.client,
					Config: newObj.(*baseconfigtsmtanzuvmwarecomv1.Config),
				}
				cbfn(oldData, newData)
			},
		})
	} else {
		log.Debugf("[RegisterUpdateCallback] ConfigConfig Create New Informer")
		informer := informerconfigtsmtanzuvmwarecomv1.NewConfigInformer(c.client.baseClient, 0, cache.Indexers{})
		registrationId, err = informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
			UpdateFunc: func(oldObj, newObj interface{}) {
				oldData := &ConfigConfig{
					client: c.client,
					Config: oldObj.(*baseconfigtsmtanzuvmwarecomv1.Config),
				}
				newData := &ConfigConfig{
					client: c.client,
					Config: newObj.(*baseconfigtsmtanzuvmwarecomv1.Config),
				}
				cbfn(oldData, newData)
			},
		})
		go informer.Run(stopper)
	}
	return registrationId, err
}

func (c *configConfigTsmV1Chainer) RegisterDeleteCallback(cbfn func(obj *ConfigConfig)) (cache.ResourceEventHandlerRegistration, error) {
	log.Debugf("[RegisterDeleteCallback] Received for ConfigConfig")
	var (
		registrationId cache.ResourceEventHandlerRegistration
		err            error
	)
	key := "configs.config.tsm.tanzu.vmware.com"
	stopper := make(chan struct{})
	if s, ok := subscriptionMap.Load(key); ok {
		log.Debugf("[RegisterDeleteCallback] ConfigConfig Use Subscription Informer")
		sub := s.(subscription)
		registrationId, err = sub.informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
			DeleteFunc: func(obj interface{}) {
				nc := &ConfigConfig{
					client: c.client,
					Config: obj.(*baseconfigtsmtanzuvmwarecomv1.Config),
				}

				var parent *RootRoot
				gvkExist := true
				for i := 0; i < 600; i++ {
					// Check if parent exists
					p, err := nc.GetParent(context.TODO())
					if err != nil || p == nil {
						time.Sleep(500 * time.Millisecond)
						continue
					}
					parent = p

					// Check GVK

					if parent.Spec.ConfigGvk != nil {
						time.Sleep(500 * time.Millisecond)
						continue
					}

					gvkExist = false
					break
				}

				if parent == nil {
					hashedName := helper.GetHashedName("roots.root.tsm.tanzu.vmware.com", nc.Labels, nc.Labels["roots.root.tsm.tanzu.vmware.com"])
					parent, err = c.client.Root().ForceReadRootByName(context.TODO(), hashedName)
					if err != nil {
						if errors.IsNotFound(err) {
							return
						}

						panic("error occurred while fetching parent " + err.Error())
					}
					panic(fmt.Sprintf("parent found (event loop is stalled) " + nc.DisplayName()))
				}

				if gvkExist {
					// Check GVK

					if parent.Spec.ConfigGvk != nil {
						return
					}

					panic(fmt.Sprintf("gvk not found (event loop is stalled) " + nc.DisplayName()))
				}

				cbfn(nc)
			},
		})
	} else {
		log.Debugf("[RegisterDeleteCallback] ConfigConfig Create New Informer")
		informer := informerconfigtsmtanzuvmwarecomv1.NewConfigInformer(c.client.baseClient, 0, cache.Indexers{})
		registrationId, err = informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
			DeleteFunc: func(obj interface{}) {
				nc := &ConfigConfig{
					client: c.client,
					Config: obj.(*baseconfigtsmtanzuvmwarecomv1.Config),
				}

				var parent *RootRoot
				gvkExist := true
				for i := 0; i < 600; i++ {
					// Check if parent exists
					p, err := nc.GetParent(context.TODO())
					if err != nil || p == nil {
						time.Sleep(500 * time.Millisecond)
						continue
					}
					parent = p

					// Check GVK

					if parent.Spec.ConfigGvk != nil {
						time.Sleep(500 * time.Millisecond)
						continue
					}

					gvkExist = false

					break
				}

				if parent == nil {
					hashedName := helper.GetHashedName("roots.root.tsm.tanzu.vmware.com", nc.Labels, nc.Labels["roots.root.tsm.tanzu.vmware.com"])
					parent, err = c.client.Root().ForceReadRootByName(context.TODO(), hashedName)
					if err != nil {
						if errors.IsNotFound(err) {
							return
						}

						panic("error occurred while fetching parent " + err.Error())
					}
					panic(fmt.Sprintf("parent found (event loop is stalled) " + nc.DisplayName()))
				}

				if gvkExist {
					// Check GVK

					if parent.Spec.ConfigGvk != nil {
						return
					}

					panic(fmt.Sprintf("gvk not found (event loop is stalled) " + nc.DisplayName()))
				}

				cbfn(nc)
			},
		})
		go informer.Run(stopper)
	}
	return registrationId, err
}

func (c *configConfigTsmV1Chainer) GNS(name string) *gnsGnsTsmV1Chainer {
	parentLabels := c.parentLabels
	parentLabels["gnses.gns.tsm.tanzu.vmware.com"] = name
	return &gnsGnsTsmV1Chainer{
		client:       c.client,
		name:         name,
		parentLabels: parentLabels,
	}
}

// GetGNS calculates hashed name of the object based on displayName and it's parents and returns the object
func (c *configConfigTsmV1Chainer) GetGNS(ctx context.Context, displayName string) (result *GnsGns, err error) {
	hashedName := helper.GetHashedName("gnses.gns.tsm.tanzu.vmware.com", c.parentLabels, displayName)
	return c.client.Gns().GetGnsByName(ctx, hashedName)
}

// AddGNS calculates hashed name of the child to create based on objToCreate.Name
// and parents names and creates it. objToCreate.Name is changed to the hashed name. Original name is preserved in
// nexus/display_name label and can be obtained using DisplayName() method.
func (c *configConfigTsmV1Chainer) AddGNS(ctx context.Context,
	objToCreate *basegnstsmtanzuvmwarecomv1.Gns) (result *GnsGns, err error) {
	if objToCreate.Labels == nil {
		objToCreate.Labels = map[string]string{}
	}
	for k, v := range c.parentLabels {
		objToCreate.Labels[k] = v
	}
	if objToCreate.Labels[common.IS_NAME_HASHED_LABEL] != "true" {
		objToCreate.Labels[common.DISPLAY_NAME_LABEL] = objToCreate.GetName()
		objToCreate.Labels[common.IS_NAME_HASHED_LABEL] = "true"
		hashedName := helper.GetHashedName("gnses.gns.tsm.tanzu.vmware.com", c.parentLabels, objToCreate.GetName())
		objToCreate.Name = hashedName
	}
	return c.client.Gns().CreateGnsByName(ctx, objToCreate)
}

// DeleteGNS calculates hashed name of the child to delete based on displayName
// and parents names and deletes it.
func (c *configConfigTsmV1Chainer) DeleteGNS(ctx context.Context, name string) (err error) {
	if c.parentLabels == nil {
		c.parentLabels = map[string]string{}
	}
	c.parentLabels[common.IS_NAME_HASHED_LABEL] = "true"
	hashedName := helper.GetHashedName("gnses.gns.tsm.tanzu.vmware.com", c.parentLabels, name)
	return c.client.Gns().DeleteGnsByName(ctx, hashedName)
}

func (c *configConfigTsmV1Chainer) DNS() *dnsGnsTsmV1Chainer {
	parentLabels := c.parentLabels
	parentLabels["dnses.gns.tsm.tanzu.vmware.com"] = helper.DEFAULT_KEY
	return &dnsGnsTsmV1Chainer{
		client:       c.client,
		name:         helper.DEFAULT_KEY,
		parentLabels: parentLabels,
	}
}

// GetDNS calculates hashed name of the object based on it's parents and returns the object
func (c *configConfigTsmV1Chainer) GetDNS(ctx context.Context) (result *GnsDns, err error) {
	hashedName := helper.GetHashedName("dnses.gns.tsm.tanzu.vmware.com", c.parentLabels, helper.DEFAULT_KEY)
	return c.client.Gns().GetDnsByName(ctx, hashedName)
}

// AddDNS calculates hashed name of the child to create based on parents names and creates it.
// objToCreate.Name is changed to the hashed name. Original name ('default') is preserved in
// nexus/display_name label and can be obtained using DisplayName() method.
func (c *configConfigTsmV1Chainer) AddDNS(ctx context.Context,
	objToCreate *basegnstsmtanzuvmwarecomv1.Dns) (result *GnsDns, err error) {
	if objToCreate.GetName() == "" {
		objToCreate.SetName(helper.DEFAULT_KEY)
	}
	if objToCreate.GetName() != helper.DEFAULT_KEY {
		return nil, NewSingletonNameError(objToCreate.GetName())
	}
	if objToCreate.Labels == nil {
		objToCreate.Labels = map[string]string{}
	}
	for k, v := range c.parentLabels {
		objToCreate.Labels[k] = v
	}
	if objToCreate.Labels[common.IS_NAME_HASHED_LABEL] != "true" {
		objToCreate.Labels[common.DISPLAY_NAME_LABEL] = objToCreate.GetName()
		objToCreate.Labels[common.IS_NAME_HASHED_LABEL] = "true"
		hashedName := helper.GetHashedName("dnses.gns.tsm.tanzu.vmware.com", c.parentLabels, objToCreate.GetName())
		objToCreate.Name = hashedName
	}
	return c.client.Gns().CreateDnsByName(ctx, objToCreate)
}

// DeleteDNS calculates hashed name of the child to delete based on displayName
// and parents names and deletes it.
func (c *configConfigTsmV1Chainer) DeleteDNS(ctx context.Context, name string) (err error) {
	if c.parentLabels == nil {
		c.parentLabels = map[string]string{}
	}
	c.parentLabels[common.IS_NAME_HASHED_LABEL] = "true"
	hashedName := helper.GetHashedName("dnses.gns.tsm.tanzu.vmware.com", c.parentLabels, name)
	return c.client.Gns().DeleteDnsByName(ctx, hashedName)
}

func (c *configConfigTsmV1Chainer) VMPPolicies(name string) *vmpolicyPolicypkgTsmV1Chainer {
	parentLabels := c.parentLabels
	parentLabels["vmpolicies.policypkg.tsm.tanzu.vmware.com"] = name
	return &vmpolicyPolicypkgTsmV1Chainer{
		client:       c.client,
		name:         name,
		parentLabels: parentLabels,
	}
}

// GetVMPPolicies calculates hashed name of the object based on displayName and it's parents and returns the object
func (c *configConfigTsmV1Chainer) GetVMPPolicies(ctx context.Context, displayName string) (result *PolicypkgVMpolicy, err error) {
	hashedName := helper.GetHashedName("vmpolicies.policypkg.tsm.tanzu.vmware.com", c.parentLabels, displayName)
	return c.client.Policypkg().GetVMpolicyByName(ctx, hashedName)
}

// AddVMPPolicies calculates hashed name of the child to create based on objToCreate.Name
// and parents names and creates it. objToCreate.Name is changed to the hashed name. Original name is preserved in
// nexus/display_name label and can be obtained using DisplayName() method.
func (c *configConfigTsmV1Chainer) AddVMPPolicies(ctx context.Context,
	objToCreate *basepolicypkgtsmtanzuvmwarecomv1.VMpolicy) (result *PolicypkgVMpolicy, err error) {
	if objToCreate.Labels == nil {
		objToCreate.Labels = map[string]string{}
	}
	for k, v := range c.parentLabels {
		objToCreate.Labels[k] = v
	}
	if objToCreate.Labels[common.IS_NAME_HASHED_LABEL] != "true" {
		objToCreate.Labels[common.DISPLAY_NAME_LABEL] = objToCreate.GetName()
		objToCreate.Labels[common.IS_NAME_HASHED_LABEL] = "true"
		hashedName := helper.GetHashedName("vmpolicies.policypkg.tsm.tanzu.vmware.com", c.parentLabels, objToCreate.GetName())
		objToCreate.Name = hashedName
	}
	return c.client.Policypkg().CreateVMpolicyByName(ctx, objToCreate)
}

// DeleteVMPPolicies calculates hashed name of the child to delete based on displayName
// and parents names and deletes it.
func (c *configConfigTsmV1Chainer) DeleteVMPPolicies(ctx context.Context, name string) (err error) {
	if c.parentLabels == nil {
		c.parentLabels = map[string]string{}
	}
	c.parentLabels[common.IS_NAME_HASHED_LABEL] = "true"
	hashedName := helper.GetHashedName("vmpolicies.policypkg.tsm.tanzu.vmware.com", c.parentLabels, name)
	return c.client.Policypkg().DeleteVMpolicyByName(ctx, hashedName)
}

func (c *configConfigTsmV1Chainer) Domain(name string) *domainConfigTsmV1Chainer {
	parentLabels := c.parentLabels
	parentLabels["domains.config.tsm.tanzu.vmware.com"] = name
	return &domainConfigTsmV1Chainer{
		client:       c.client,
		name:         name,
		parentLabels: parentLabels,
	}
}

// GetDomain calculates hashed name of the object based on displayName and it's parents and returns the object
func (c *configConfigTsmV1Chainer) GetDomain(ctx context.Context, displayName string) (result *ConfigDomain, err error) {
	hashedName := helper.GetHashedName("domains.config.tsm.tanzu.vmware.com", c.parentLabels, displayName)
	return c.client.Config().GetDomainByName(ctx, hashedName)
}

// AddDomain calculates hashed name of the child to create based on objToCreate.Name
// and parents names and creates it. objToCreate.Name is changed to the hashed name. Original name is preserved in
// nexus/display_name label and can be obtained using DisplayName() method.
func (c *configConfigTsmV1Chainer) AddDomain(ctx context.Context,
	objToCreate *baseconfigtsmtanzuvmwarecomv1.Domain) (result *ConfigDomain, err error) {
	if objToCreate.Labels == nil {
		objToCreate.Labels = map[string]string{}
	}
	for k, v := range c.parentLabels {
		objToCreate.Labels[k] = v
	}
	if objToCreate.Labels[common.IS_NAME_HASHED_LABEL] != "true" {
		objToCreate.Labels[common.DISPLAY_NAME_LABEL] = objToCreate.GetName()
		objToCreate.Labels[common.IS_NAME_HASHED_LABEL] = "true"
		hashedName := helper.GetHashedName("domains.config.tsm.tanzu.vmware.com", c.parentLabels, objToCreate.GetName())
		objToCreate.Name = hashedName
	}
	return c.client.Config().CreateDomainByName(ctx, objToCreate)
}

// DeleteDomain calculates hashed name of the child to delete based on displayName
// and parents names and deletes it.
func (c *configConfigTsmV1Chainer) DeleteDomain(ctx context.Context, name string) (err error) {
	if c.parentLabels == nil {
		c.parentLabels = map[string]string{}
	}
	c.parentLabels[common.IS_NAME_HASHED_LABEL] = "true"
	hashedName := helper.GetHashedName("domains.config.tsm.tanzu.vmware.com", c.parentLabels, name)
	return c.client.Config().DeleteDomainByName(ctx, hashedName)
}

func (c *configConfigTsmV1Chainer) FooExample(name string) *footypeabcConfigTsmV1Chainer {
	parentLabels := c.parentLabels
	parentLabels["footypeabcs.config.tsm.tanzu.vmware.com"] = name
	return &footypeabcConfigTsmV1Chainer{
		client:       c.client,
		name:         name,
		parentLabels: parentLabels,
	}
}

// GetFooExample calculates hashed name of the object based on displayName and it's parents and returns the object
func (c *configConfigTsmV1Chainer) GetFooExample(ctx context.Context, displayName string) (result *ConfigFooTypeABC, err error) {
	hashedName := helper.GetHashedName("footypeabcs.config.tsm.tanzu.vmware.com", c.parentLabels, displayName)
	return c.client.Config().GetFooTypeABCByName(ctx, hashedName)
}

// AddFooExample calculates hashed name of the child to create based on objToCreate.Name
// and parents names and creates it. objToCreate.Name is changed to the hashed name. Original name is preserved in
// nexus/display_name label and can be obtained using DisplayName() method.
func (c *configConfigTsmV1Chainer) AddFooExample(ctx context.Context,
	objToCreate *baseconfigtsmtanzuvmwarecomv1.FooTypeABC) (result *ConfigFooTypeABC, err error) {
	if objToCreate.Labels == nil {
		objToCreate.Labels = map[string]string{}
	}
	for k, v := range c.parentLabels {
		objToCreate.Labels[k] = v
	}
	if objToCreate.Labels[common.IS_NAME_HASHED_LABEL] != "true" {
		objToCreate.Labels[common.DISPLAY_NAME_LABEL] = objToCreate.GetName()
		objToCreate.Labels[common.IS_NAME_HASHED_LABEL] = "true"
		hashedName := helper.GetHashedName("footypeabcs.config.tsm.tanzu.vmware.com", c.parentLabels, objToCreate.GetName())
		objToCreate.Name = hashedName
	}
	return c.client.Config().CreateFooTypeABCByName(ctx, objToCreate)
}

// DeleteFooExample calculates hashed name of the child to delete based on displayName
// and parents names and deletes it.
func (c *configConfigTsmV1Chainer) DeleteFooExample(ctx context.Context, name string) (err error) {
	if c.parentLabels == nil {
		c.parentLabels = map[string]string{}
	}
	c.parentLabels[common.IS_NAME_HASHED_LABEL] = "true"
	hashedName := helper.GetHashedName("footypeabcs.config.tsm.tanzu.vmware.com", c.parentLabels, name)
	return c.client.Config().DeleteFooTypeABCByName(ctx, hashedName)
}

func (c *configConfigTsmV1Chainer) SvcGrpInfo(name string) *svcgrouplinkinfoServicegroupTsmV1Chainer {
	parentLabels := c.parentLabels
	parentLabels["svcgrouplinkinfos.servicegroup.tsm.tanzu.vmware.com"] = name
	return &svcgrouplinkinfoServicegroupTsmV1Chainer{
		client:       c.client,
		name:         name,
		parentLabels: parentLabels,
	}
}

// GetSvcGrpInfo calculates hashed name of the object based on displayName and it's parents and returns the object
func (c *configConfigTsmV1Chainer) GetSvcGrpInfo(ctx context.Context, displayName string) (result *ServicegroupSvcGroupLinkInfo, err error) {
	hashedName := helper.GetHashedName("svcgrouplinkinfos.servicegroup.tsm.tanzu.vmware.com", c.parentLabels, displayName)
	return c.client.Servicegroup().GetSvcGroupLinkInfoByName(ctx, hashedName)
}

// AddSvcGrpInfo calculates hashed name of the child to create based on objToCreate.Name
// and parents names and creates it. objToCreate.Name is changed to the hashed name. Original name is preserved in
// nexus/display_name label and can be obtained using DisplayName() method.
func (c *configConfigTsmV1Chainer) AddSvcGrpInfo(ctx context.Context,
	objToCreate *baseservicegrouptsmtanzuvmwarecomv1.SvcGroupLinkInfo) (result *ServicegroupSvcGroupLinkInfo, err error) {
	if objToCreate.Labels == nil {
		objToCreate.Labels = map[string]string{}
	}
	for k, v := range c.parentLabels {
		objToCreate.Labels[k] = v
	}
	if objToCreate.Labels[common.IS_NAME_HASHED_LABEL] != "true" {
		objToCreate.Labels[common.DISPLAY_NAME_LABEL] = objToCreate.GetName()
		objToCreate.Labels[common.IS_NAME_HASHED_LABEL] = "true"
		hashedName := helper.GetHashedName("svcgrouplinkinfos.servicegroup.tsm.tanzu.vmware.com", c.parentLabels, objToCreate.GetName())
		objToCreate.Name = hashedName
	}
	return c.client.Servicegroup().CreateSvcGroupLinkInfoByName(ctx, objToCreate)
}

// DeleteSvcGrpInfo calculates hashed name of the child to delete based on displayName
// and parents names and deletes it.
func (c *configConfigTsmV1Chainer) DeleteSvcGrpInfo(ctx context.Context, name string) (err error) {
	if c.parentLabels == nil {
		c.parentLabels = map[string]string{}
	}
	c.parentLabels[common.IS_NAME_HASHED_LABEL] = "true"
	hashedName := helper.GetHashedName("svcgrouplinkinfos.servicegroup.tsm.tanzu.vmware.com", c.parentLabels, name)
	return c.client.Servicegroup().DeleteSvcGroupLinkInfoByName(ctx, hashedName)
}

// GetFooTypeABCByName returns object stored in the database under the hashedName which is a hash of display
// name and parents names. Use it when you know hashed name of object.
func (group *ConfigTsmV1) GetFooTypeABCByName(ctx context.Context, hashedName string) (*ConfigFooTypeABC, error) {
	key := "footypeabcs.config.tsm.tanzu.vmware.com"
	if s, ok := subscriptionMap.Load(key); ok {
		log.Debugf("[GetFooTypeABCByName] GetObject: %s from cache", hashedName)
		item, exists, err := s.(subscription).informer.GetStore().GetByKey(hashedName)
		if !exists {
			return nil, err
		}

		log.Debugf("[GetFooTypeABCByName] Object: %s exists in cache", hashedName)
		result, _ := item.(*baseconfigtsmtanzuvmwarecomv1.FooTypeABC)
		return &ConfigFooTypeABC{
			client:     group.client,
			FooTypeABC: result,
		}, nil
	} else {
		retryCount := 0
		for {
			result, err := group.client.baseClient.
				ConfigTsmV1().
				FooTypeABCs().Get(ctx, hashedName, metav1.GetOptions{})
			if err != nil {
				log.Errorf("[GetFooTypeABCByName] Failed to Get FooTypeABCs: %+v", err)
				if errors.IsTimeout(err) || customerrors.Is(err, context.DeadlineExceeded) {
					log.Errorf("[Retry Count: %d ] %+v", retryCount, err)
					if retryCount == maxRetryCount {
						log.Error("Max Retry exceed on Get FooTypeABCs")
						return nil, err
					}
					retryCount += 1
					time.Sleep(sleepTime * time.Second)
				} else if customerrors.Is(err, context.Canceled) {
					log.Errorf("[GetFooTypeABCByName]: %+v", err)
					return nil, context.Canceled
				} else {
					log.Errorf("[GetFooTypeABCByName]: %+v", err)
					return nil, err
				}
			} else {
				return &ConfigFooTypeABC{
					client:     group.client,
					FooTypeABC: result,
				}, nil
			}
		}
	}
}

// ForceReadFooTypeABCByName read object directly from the database under the hashedName which is a hash of display
// name and parents names. Use it when you know hashed name of object.
func (group *ConfigTsmV1) ForceReadFooTypeABCByName(ctx context.Context, hashedName string) (*ConfigFooTypeABC, error) {
	log.Debugf("[ForceReadFooTypeABCByName] Received object :%s to read from DB", hashedName)
	retryCount := 0
	for {
		result, err := group.client.baseClient.
			ConfigTsmV1().
			FooTypeABCs().Get(ctx, hashedName, metav1.GetOptions{})
		if err != nil {
			log.Errorf("[ForceReadFooTypeABCByName] Failed to Get FooTypeABCs: %+v", err)
			if errors.IsTimeout(err) || customerrors.Is(err, context.DeadlineExceeded) {
				log.Errorf("[Retry Count: %d ] %+v", retryCount, err)
				if retryCount == maxRetryCount {
					log.Error("Max Retry exceed on Get FooTypeABCs")
					return nil, err
				}
				retryCount += 1
				time.Sleep(sleepTime * time.Second)
			} else if customerrors.Is(err, context.Canceled) {
				log.Errorf("[ForceReadFooTypeABCByName]: %+v", err)
				return nil, context.Canceled
			} else {
				log.Errorf("[ForceReadFooTypeABCByName]: %+v", err)
				return nil, err
			}
		} else {
			log.Debugf("[ForceReadFooTypeABCByName] Executed Successfully :%s", hashedName)
			return &ConfigFooTypeABC{
				client:     group.client,
				FooTypeABC: result,
			}, nil
		}
	}
}

// DeleteFooTypeABCByName deletes object stored in the database under the hashedName which is a hash of
// display name and parents names. Use it when you know hashed name of object.
func (group *ConfigTsmV1) DeleteFooTypeABCByName(ctx context.Context, hashedName string) (err error) {
	log.Debugf("[DeleteFooTypeABCByName] Received objectToDelete: %s", hashedName)

	var (
		retryCount int
		result     *baseconfigtsmtanzuvmwarecomv1.FooTypeABC
	)
	retryCount = 0
	for {
		result, err = group.client.baseClient.
			ConfigTsmV1().
			FooTypeABCs().Get(ctx, hashedName, metav1.GetOptions{})
		if err != nil {
			log.Errorf("[DeleteFooTypeABCByName] Failed to Get FooTypeABCs: %+v", err)
			if errors.IsTimeout(err) || customerrors.Is(err, context.DeadlineExceeded) {
				log.Errorf("[Retry Count: %d ] %+v", retryCount, err)
				if retryCount == maxRetryCount {
					log.Error("Max Retry exceed on Get FooTypeABCs")
					return err
				}
				retryCount += 1
				time.Sleep(sleepTime * time.Second)
			} else if customerrors.Is(err, context.Canceled) {
				log.Errorf("[DeleteFooTypeABCByName]: %+v", err)
				return context.Canceled
			} else if errors.IsNotFound(err) {
				log.Errorf("[DeleteFooTypeABCByName] Object Notfound: %+v", err)
				break
			} else {
				log.Errorf("[DeleteFooTypeABCByName]: %+v", err)
				return err
			}
		} else {
			break
		}
	}

	retryCount = 0
	for {
		err = group.client.baseClient.
			ConfigTsmV1().
			FooTypeABCs().Delete(ctx, hashedName, metav1.DeleteOptions{})
		if err != nil {
			log.Errorf("[DeleteFooTypeABCByName] failed to delete FooTypeABCs: %+v", err)
			if errors.IsTimeout(err) || customerrors.Is(err, context.DeadlineExceeded) {
				log.Errorf("[Retry Count: %d ] %+v", retryCount, err)
				if retryCount == maxRetryCount {
					log.Error("Max retry exceed on delete FooTypeABCs")
					return err
				}
				retryCount += 1
				time.Sleep(sleepTime * time.Second)
			} else if customerrors.Is(err, context.Canceled) {
				log.Errorf("[DeleteFooTypeABCByName]: %+v", err)
				return context.Canceled
			} else if errors.IsNotFound(err) {
				log.Errorf("[DeleteFooTypeABCByName] Object not found: %+v", err)
				break
			} else {
				log.Errorf("[DeleteFooTypeABCByName]: %+v", err)
				return err
			}
		}
	}
	// Get Parent Node and check if gvk present before patch

	var gvkPresent bool
	log.Debugf("[DeleteFooTypeABCByName] Get Parent details")
	var patch Patch
	parents := result.GetLabels()
	if parents == nil {
		parents = make(map[string]string)
	}
	parentName, ok := parents["configs.config.tsm.tanzu.vmware.com"]
	if !ok {
		parentName = helper.DEFAULT_KEY
	}
	if result.GetLabels() != nil {
		if parents[common.IS_NAME_HASHED_LABEL] == "true" {
			parentName = helper.GetHashedName("configs.config.tsm.tanzu.vmware.com", parents, parentName)
		}
	} else {
		parentName = helper.GetHashedName("configs.config.tsm.tanzu.vmware.com", parents, parentName)
	}
	parentData, err := group.client.baseClient.
		ConfigTsmV1().
		Configs().Get(ctx, parentName, metav1.GetOptions{})
	if err != nil {
		log.Errorf("[DeleteFooTypeABCByName] Failed to get Parent node: %+v", err)
		if errors.IsNotFound(err) {
			return nil
		} else {
			return err
		}
	}

	var displayName string
	// Iterate Parent Gvk
	for k, v := range parentData.Spec.FooExampleGvk {
		if hashedName == v.Name {
			displayName = k
			log.Debugf("[DeleteFooTypeABCByName] GVK %s is present in parent for node: %s", k, hashedName)
			gvkPresent = true
		}
	}

	if gvkPresent {

		patchOp := PatchOp{
			Op:   "remove",
			Path: "/spec/fooExampleGvk/" + displayName,
		}

		patch = append(patch, patchOp)
		marshaled, err := patch.Marshal()
		if err != nil {
			return err
		}

		retryCount = 0
		newCtx := context.TODO()
		for {
			_, err = group.client.baseClient.
				ConfigTsmV1().
				Configs().Patch(newCtx, parentName, types.JSONPatchType, marshaled, metav1.PatchOptions{})
			if err != nil {
				log.Errorf("Failed to patch FooTypeABC gvk in parent node[Configs]: %+v", err)
				if errors.IsTimeout(err) || customerrors.Is(err, context.DeadlineExceeded) {
					log.Errorf("[Retry Count: %d ] %+v", retryCount, err)
					if retryCount == maxRetryCount {
						log.Error("Max Retry exceed on patching gvk")
						return err
					}
					retryCount += 1
					time.Sleep(sleepTime * time.Second)
				} else if customerrors.Is(err, context.Canceled) {
					log.Errorf("[DeleteFooTypeABCByName]: %+v", err)
					return context.Canceled
				} else {
					log.Errorf("Unexpected Error occur FooTypeABC]: %+v", err)
					return err
				}
			} else {
				log.Debugf("[DeleteFooTypeABCByName] Patch FooTypeABC Success: %s", hashedName)
				break
			}
		}
		log.Debugf("[DeleteFooTypeABCByName] Executed Successfully: %s", hashedName)
	}

	return
}

// CreateFooTypeABCByName creates object in the database without hashing the name.
// Use it directly ONLY when objToCreate.Name is hashed name of the object.
func (group *ConfigTsmV1) CreateFooTypeABCByName(ctx context.Context,
	objToCreate *baseconfigtsmtanzuvmwarecomv1.FooTypeABC) (*ConfigFooTypeABC, error) {
	log.Debugf("[CreateFooTypeABCByName] Received objToCreate: %s", objToCreate.GetName())
	if objToCreate.GetLabels() == nil {
		objToCreate.Labels = make(map[string]string)
	}
	if _, ok := objToCreate.Labels[common.DISPLAY_NAME_LABEL]; !ok {
		objToCreate.Labels[common.DISPLAY_NAME_LABEL] = objToCreate.GetName()
	}

	var (
		retryCount int
		result     *baseconfigtsmtanzuvmwarecomv1.FooTypeABC
		err        error
	)
	retryCount = 0
	for {
		result, err = group.client.baseClient.
			ConfigTsmV1().
			FooTypeABCs().Create(ctx, objToCreate, metav1.CreateOptions{})
		if err != nil {
			log.Errorf("[CreateFooTypeABCByName] Failed to Create FooTypeABCs: %+v", err)
			if errors.IsTimeout(err) || customerrors.Is(err, context.DeadlineExceeded) {
				log.Errorf("[Retry Count: %d ] %+v", retryCount, err)
				if retryCount == maxRetryCount {
					log.Error("Max Retry exceed on Get FooTypeABCs")
					return nil, err
				}
				retryCount += 1
				time.Sleep(sleepTime * time.Second)
			} else if customerrors.Is(err, context.Canceled) {
				log.Errorf("[CreateFooTypeABCByName]: %+v", err)
				return nil, context.Canceled
			} else {
				log.Errorf("[CreateFooTypeABCByName]: %+v", err)
				return nil, err
			}
		} else {
			break
		}
	}
	log.Debugf("[CreateFooTypeABCByName] FooTypeABCs created successfully: %s", objToCreate.GetName())

	parentName, ok := objToCreate.GetLabels()["configs.config.tsm.tanzu.vmware.com"]
	if !ok {
		parentName = helper.DEFAULT_KEY
	}
	if objToCreate.Labels[common.IS_NAME_HASHED_LABEL] == "true" {
		parentName = helper.GetHashedName("configs.config.tsm.tanzu.vmware.com", objToCreate.GetLabels(), parentName)
	}

	payload := "{\"spec\": {\"fooExampleGvk\": {\"" + objToCreate.DisplayName() + "\": {\"name\": \"" + objToCreate.Name + "\",\"kind\": \"FooTypeABC\", \"group\": \"config.tsm.tanzu.vmware.com\"}}}}"

	retryCount = 0
	newCtx := context.TODO()
	for {
		_, err = group.client.baseClient.
			ConfigTsmV1().
			Configs().Patch(newCtx, parentName, types.MergePatchType, []byte(payload), metav1.PatchOptions{})
		if err != nil {
			log.Errorf("[CreateFooTypeABCByName] Failed to patch FooTypeABC gvk in parent node[Configs] %+v", err)
			if errors.IsTimeout(err) || customerrors.Is(err, context.DeadlineExceeded) {
				log.Errorf("[Retry Count: %d ] %+v", retryCount, err)
				if retryCount == maxRetryCount {
					log.Error("Max Retry exceed on patching gvk")
					log.Errorf("Trigger FooTypeABC Delete: %s", objToCreate.GetName())
					err = group.DeleteFooTypeABCByName(newCtx, objToCreate.GetName())
					if err != nil {
						log.Errorf("Error occur while deleting FooTypeABC: %s", objToCreate.GetName())
						return nil, err
					}
					log.Errorf("FooTypeABC Deleted: %s", objToCreate.GetName())
					return nil, err
				}
				retryCount += 1
				time.Sleep(sleepTime * time.Second)
			} else if customerrors.Is(err, context.Canceled) {
				log.Errorf("[CreateFooTypeABCByName]: %+v", err)
				return nil, context.Canceled
			} else {
				log.Errorf("[CreateFooTypeABCByName] Unexpected Error FooTypeABC] %+v", err)
				log.Errorf("Trigger FooTypeABC Delete: %s", objToCreate.GetName())
				err = group.DeleteFooTypeABCByName(newCtx, objToCreate.GetName())
				if err != nil {
					log.Errorf("Error occur while deleting FooTypeABC: %+v", objToCreate.GetName())
					return nil, err
				}
				log.Errorf("FooTypeABC Deleted: %s", objToCreate.GetName())
				return nil, err
			}
		} else {
			log.Debugf("[CreateFooTypeABCByName] Patch FooTypeABC Success :%s", objToCreate.GetName())
			break
		}
	}

	log.Debugf("[CreateFooTypeABCByName] Executed Successfully: %s", objToCreate.GetName())
	return &ConfigFooTypeABC{
		client:     group.client,
		FooTypeABC: result,
	}, nil
}

// UpdateFooTypeABCByName updates object stored in the database under the hashedName which is a hash of
// display name and parents names.
func (group *ConfigTsmV1) UpdateFooTypeABCByName(ctx context.Context,
	objToUpdate *baseconfigtsmtanzuvmwarecomv1.FooTypeABC) (*ConfigFooTypeABC, error) {
	log.Debugf("[UpdateFooTypeABCByName] Received objToUpdate: %s", objToUpdate.GetName())

	var patch Patch

	if objToUpdate.Annotations != nil || objToUpdate.Labels != nil {
		current, err := group.client.Config().GetFooTypeABCByName(ctx, objToUpdate.Name)
		if err != nil {
			return nil, err
		}

		if objToUpdate.Annotations != nil {
			if current.Annotations[ownershipAnnotation] != "" {
				objToUpdate.Annotations[ownershipAnnotation] = current.Annotations[ownershipAnnotation]
			}
			patch = append(patch, PatchOp{
				Op:    "replace",
				Path:  "/metadata/annotations",
				Value: objToUpdate.Annotations,
			})
		}

		if objToUpdate.Labels != nil {
			parentsList := helper.GetCRDParentsMap()["footypeabcs.config.tsm.tanzu.vmware.com"]
			for _, k := range parentsList {
				objToUpdate.Labels[k] = current.Labels[k]
			}
			objToUpdate.Labels[common.IS_NAME_HASHED_LABEL] = current.Labels[common.IS_NAME_HASHED_LABEL]
			objToUpdate.Labels[common.DISPLAY_NAME_LABEL] = current.Labels[common.DISPLAY_NAME_LABEL]
			patch = append(patch, PatchOp{
				Op:    "replace",
				Path:  "/metadata/labels",
				Value: objToUpdate.Labels,
			})
		}
	}

	var rt reflect.Type

	rt = reflect.TypeOf(objToUpdate.Spec.FooA)
	if rt.Kind() == reflect.Slice || rt.Kind() == reflect.Array || rt.Kind() == reflect.Map {
		if !reflect.ValueOf(objToUpdate.Spec.FooA).IsNil() {
			patchValueFooA := objToUpdate.Spec.FooA
			patchOpFooA := PatchOp{
				Op:    "replace",
				Path:  "/spec/fooA",
				Value: patchValueFooA,
			}
			patch = append(patch, patchOpFooA)
		}
	} else {
		patchValueFooA := objToUpdate.Spec.FooA
		patchOpFooA := PatchOp{
			Op:    "replace",
			Path:  "/spec/fooA",
			Value: patchValueFooA,
		}
		patch = append(patch, patchOpFooA)
	}

	rt = reflect.TypeOf(objToUpdate.Spec.FooB)
	if rt.Kind() == reflect.Slice || rt.Kind() == reflect.Array || rt.Kind() == reflect.Map {
		if !reflect.ValueOf(objToUpdate.Spec.FooB).IsNil() {
			patchValueFooB := objToUpdate.Spec.FooB
			patchOpFooB := PatchOp{
				Op:    "replace",
				Path:  "/spec/fooB",
				Value: patchValueFooB,
			}
			patch = append(patch, patchOpFooB)
		}
	} else {
		patchValueFooB := objToUpdate.Spec.FooB
		patchOpFooB := PatchOp{
			Op:    "replace",
			Path:  "/spec/fooB",
			Value: patchValueFooB,
		}
		patch = append(patch, patchOpFooB)
	}

	rt = reflect.TypeOf(objToUpdate.Spec.FooC)
	if rt.Kind() == reflect.Slice || rt.Kind() == reflect.Array || rt.Kind() == reflect.Map {
		if !reflect.ValueOf(objToUpdate.Spec.FooC).IsNil() {
			patchValueFooC := objToUpdate.Spec.FooC
			patchOpFooC := PatchOp{
				Op:    "replace",
				Path:  "/spec/fooC",
				Value: patchValueFooC,
			}
			patch = append(patch, patchOpFooC)
		}
	} else {
		patchValueFooC := objToUpdate.Spec.FooC
		patchOpFooC := PatchOp{
			Op:    "replace",
			Path:  "/spec/fooC",
			Value: patchValueFooC,
		}
		patch = append(patch, patchOpFooC)
	}

	rt = reflect.TypeOf(objToUpdate.Spec.FooD)
	if rt.Kind() == reflect.Slice || rt.Kind() == reflect.Array || rt.Kind() == reflect.Map {
		if !reflect.ValueOf(objToUpdate.Spec.FooD).IsNil() {
			patchValueFooD := objToUpdate.Spec.FooD
			patchOpFooD := PatchOp{
				Op:    "replace",
				Path:  "/spec/fooD",
				Value: patchValueFooD,
			}
			patch = append(patch, patchOpFooD)
		}
	} else {
		patchValueFooD := objToUpdate.Spec.FooD
		patchOpFooD := PatchOp{
			Op:    "replace",
			Path:  "/spec/fooD",
			Value: patchValueFooD,
		}
		patch = append(patch, patchOpFooD)
	}

	rt = reflect.TypeOf(objToUpdate.Spec.FooE)
	if rt.Kind() == reflect.Slice || rt.Kind() == reflect.Array || rt.Kind() == reflect.Map {
		if !reflect.ValueOf(objToUpdate.Spec.FooE).IsNil() {
			patchValueFooE := objToUpdate.Spec.FooE
			patchOpFooE := PatchOp{
				Op:    "replace",
				Path:  "/spec/foo_e",
				Value: patchValueFooE,
			}
			patch = append(patch, patchOpFooE)
		}
	} else {
		patchValueFooE := objToUpdate.Spec.FooE
		patchOpFooE := PatchOp{
			Op:    "replace",
			Path:  "/spec/foo_e",
			Value: patchValueFooE,
		}
		patch = append(patch, patchOpFooE)
	}

	rt = reflect.TypeOf(objToUpdate.Spec.FooF)
	if rt.Kind() == reflect.Slice || rt.Kind() == reflect.Array || rt.Kind() == reflect.Map {
		if !reflect.ValueOf(objToUpdate.Spec.FooF).IsNil() {
			patchValueFooF := objToUpdate.Spec.FooF
			patchOpFooF := PatchOp{
				Op:    "replace",
				Path:  "/spec/foo_f",
				Value: patchValueFooF,
			}
			patch = append(patch, patchOpFooF)
		}
	} else {
		patchValueFooF := objToUpdate.Spec.FooF
		patchOpFooF := PatchOp{
			Op:    "replace",
			Path:  "/spec/foo_f",
			Value: patchValueFooF,
		}
		patch = append(patch, patchOpFooF)
	}

	marshaled, err := patch.Marshal()
	if err != nil {
		return nil, err
	}

	var (
		result *baseconfigtsmtanzuvmwarecomv1.FooTypeABC
	)
	newCtx := context.TODO()
	retryCount := 0
	for {
		result, err = group.client.baseClient.
			ConfigTsmV1().
			FooTypeABCs().Patch(newCtx, objToUpdate.GetName(), types.JSONPatchType, marshaled, metav1.PatchOptions{}, "")
		if err != nil {
			log.Errorf("[UpdateFooTypeABCByName] Failed to patch FooTypeABC gvk in parent node[Configs]: %+v", err)
			if errors.IsTimeout(err) || customerrors.Is(err, context.DeadlineExceeded) {
				log.Errorf("[Retry Count: %d ] %+v", retryCount, err)
				if retryCount == maxRetryCount {
					log.Error("Max Retry exceed on patching gvk")
					log.Errorf("Trigger FooTypeABC Delete: %s", objToUpdate.GetName())
					delErr := group.DeleteFooTypeABCByName(newCtx, objToUpdate.GetName())
					if delErr != nil {
						log.Errorf("Error occur while deleting FooTypeABC: %s", objToUpdate.GetName())
						return nil, delErr
					}
					log.Errorf("FooTypeABC Deleted: %s", objToUpdate.GetName())
					return nil, err
				}
				retryCount += 1
				time.Sleep(sleepTime * time.Second)
			} else if customerrors.Is(err, context.Canceled) {
				log.Errorf("[CreateFooTypeABCByName]: %+v", err)
				return nil, context.Canceled
			} else {
				log.Errorf("[CreateFooTypeABCByName] Unexpected Error FooTypeABC] :%+v", err)
				log.Errorf("Trigger FooTypeABC Delete: %s", objToUpdate.GetName())
				delErr := group.DeleteFooTypeABCByName(newCtx, objToUpdate.GetName())
				if delErr != nil {
					log.Errorf("Error occur while deleting FooTypeABC: %+v", objToUpdate.GetName())
					return nil, delErr
				}
				log.Errorf("FooTypeABC Deleted: %s", objToUpdate.GetName())
				return nil, err
			}
		} else {
			log.Debugf("[CreateFooTypeABCByName] Patch FooTypeABC Success :%s", objToUpdate.GetName())
			break
		}
	}
	log.Debugf("[UpdateFooTypeABCByName] Executed Successfully %s", objToUpdate.GetName())
	return &ConfigFooTypeABC{
		client:     group.client,
		FooTypeABC: result,
	}, nil
}

// ListFooTypeABCs returns slice of all existing objects of this type. Selectors can be provided in opts parameter.
func (group *ConfigTsmV1) ListFooTypeABCs(ctx context.Context,
	opts metav1.ListOptions) (result []*ConfigFooTypeABC, err error) {
	key := "footypeabcs.config.tsm.tanzu.vmware.com"
	if s, ok := subscriptionMap.Load(key); ok {
		items := s.(subscription).informer.GetStore().List()
		result = make([]*ConfigFooTypeABC, len(items))
		for k, v := range items {
			item, _ := v.(*baseconfigtsmtanzuvmwarecomv1.FooTypeABC)
			result[k] = &ConfigFooTypeABC{
				client:     group.client,
				FooTypeABC: item,
			}
		}
	} else {
		list, err := group.client.baseClient.ConfigTsmV1().
			FooTypeABCs().List(ctx, opts)
		if err != nil {
			return nil, err
		}
		result = make([]*ConfigFooTypeABC, len(list.Items))
		for k, v := range list.Items {
			item := v
			result[k] = &ConfigFooTypeABC{
				client:     group.client,
				FooTypeABC: &item,
			}
		}
	}
	return
}

type ConfigFooTypeABC struct {
	client *Clientset
	*baseconfigtsmtanzuvmwarecomv1.FooTypeABC
}

// Delete removes obj and all it's children from the database.
func (obj *ConfigFooTypeABC) Delete(ctx context.Context) error {
	err := obj.client.Config().DeleteFooTypeABCByName(ctx, obj.GetName())
	if err != nil {
		return err
	}
	obj.FooTypeABC = nil
	return nil
}

// Update updates spec of object in database. Children and Link can not be updated using this function.
func (obj *ConfigFooTypeABC) Update(ctx context.Context) error {
	result, err := obj.client.Config().UpdateFooTypeABCByName(ctx, obj.FooTypeABC)
	if err != nil {
		return err
	}
	obj.FooTypeABC = result.FooTypeABC
	return nil
}

func (obj *ConfigFooTypeABC) GetParent(ctx context.Context) (result *ConfigConfig, err error) {
	hashedName := helper.GetHashedName("configs.config.tsm.tanzu.vmware.com", obj.Labels, obj.Labels["configs.config.tsm.tanzu.vmware.com"])
	return obj.client.Config().GetConfigByName(ctx, hashedName)
}

type footypeabcConfigTsmV1Chainer struct {
	client       *Clientset
	name         string
	parentLabels map[string]string
}

func (c *footypeabcConfigTsmV1Chainer) Subscribe() {
	key := "footypeabcs.config.tsm.tanzu.vmware.com"
	if _, ok := subscriptionMap.Load(key); !ok {
		informer := informerconfigtsmtanzuvmwarecomv1.NewFooTypeABCInformer(c.client.baseClient, 0, cache.Indexers{})
		subscribe(key, informer)
	}
}

func (c *footypeabcConfigTsmV1Chainer) Unsubscribe() {
	key := "footypeabcs.config.tsm.tanzu.vmware.com"
	if s, ok := subscriptionMap.Load(key); ok {
		close(s.(subscription).stop)
		subscriptionMap.Delete(key)
	}
}

func (c *footypeabcConfigTsmV1Chainer) IsSubscribed() bool {
	key := "footypeabcs.config.tsm.tanzu.vmware.com"
	_, ok := subscriptionMap.Load(key)
	return ok
}

func (c *footypeabcConfigTsmV1Chainer) RegisterEventHandler(addCB func(obj *ConfigFooTypeABC), updateCB func(oldObj, newObj *ConfigFooTypeABC), deleteCB func(obj *ConfigFooTypeABC)) (cache.ResourceEventHandlerRegistration, error) {
	fmt.Println("RegisterEventHandler for ConfigFooTypeABC")
	var (
		registrationId cache.ResourceEventHandlerRegistration
		err            error
		informer       cache.SharedIndexInformer
	)
	key := "footypeabcs.config.tsm.tanzu.vmware.com"
	stopper := make(chan struct{})
	if s, ok := subscriptionMap.Load(key); ok {
		fmt.Println("Informer exists for ConfigFooTypeABC")
		sub := s.(subscription)
		informer = sub.informer
	} else {
		fmt.Println("Informer doesn't exists for ConfigFooTypeABC, so creating a new one")
		informer = informerconfigtsmtanzuvmwarecomv1.NewFooTypeABCInformer(c.client.baseClient, 0, cache.Indexers{})
		go informer.Run(stopper)
		subscribe(key, informer)
	}
	registrationId, err = informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
		AddFunc: func(obj interface{}) {
			nc := &ConfigFooTypeABC{
				client:     c.client,
				FooTypeABC: obj.(*baseconfigtsmtanzuvmwarecomv1.FooTypeABC),
			}

			var parent *ConfigConfig
			gvkExist := false
			for i := 0; i < 600; i++ {
				// Check if parent exists
				p, err := nc.GetParent(context.TODO())
				if err != nil || p == nil {
					time.Sleep(500 * time.Millisecond)
					continue
				}
				parent = p
				// Check GVK

				if _, ok := parent.Spec.FooExampleGvk[nc.DisplayName()]; !ok {
					time.Sleep(500 * time.Millisecond)
					continue
				}

				gvkExist = true
				break
			}
			if parent == nil {
				hashedName := helper.GetHashedName("configs.config.tsm.tanzu.vmware.com", nc.Labels, nc.Labels["configs.config.tsm.tanzu.vmware.com"])
				parent, err = c.client.Config().ForceReadConfigByName(context.TODO(), hashedName)
				if err != nil {
					if errors.IsNotFound(err) {
						return
					}
					panic("error occurred while fetching parent " + err.Error())
				}
				panic(fmt.Sprintf("parent found (event loop is stalled) " + nc.DisplayName()))
			}
			if !gvkExist {
				// Check GVK

				if _, ok := parent.Spec.FooExampleGvk[nc.DisplayName()]; !ok {
					return
				}

				panic(fmt.Sprintf("gvk found (event loop is stalled) " + nc.DisplayName()))
			}

			addCB(nc)
		},

		UpdateFunc: func(oldObj, newObj interface{}) {
			oldData := &ConfigFooTypeABC{
				client:     c.client,
				FooTypeABC: oldObj.(*baseconfigtsmtanzuvmwarecomv1.FooTypeABC),
			}
			newData := &ConfigFooTypeABC{
				client:     c.client,
				FooTypeABC: newObj.(*baseconfigtsmtanzuvmwarecomv1.FooTypeABC),
			}
			updateCB(oldData, newData)
		},

		DeleteFunc: func(obj interface{}) {
			nc := &ConfigFooTypeABC{
				client:     c.client,
				FooTypeABC: obj.(*baseconfigtsmtanzuvmwarecomv1.FooTypeABC),
			}

			var parent *ConfigConfig
			gvkExist := true
			for i := 0; i < 600; i++ {
				// Check if parent exists
				p, err := nc.GetParent(context.TODO())
				if err != nil || p == nil {
					time.Sleep(500 * time.Millisecond)
					continue
				}
				parent = p
				// Check GVK

				if _, ok := parent.Spec.FooExampleGvk[nc.DisplayName()]; ok {
					time.Sleep(500 * time.Millisecond)
					continue
				}

				gvkExist = false
				break
			}
			if parent == nil {
				hashedName := helper.GetHashedName("configs.config.tsm.tanzu.vmware.com", nc.Labels, nc.Labels["configs.config.tsm.tanzu.vmware.com"])
				parent, err = c.client.Config().ForceReadConfigByName(context.TODO(), hashedName)
				if err != nil {
					if errors.IsNotFound(err) {
						return
					}
					panic("error occurred while fetching parent " + err.Error())
				}
				panic(fmt.Sprintf("parent found (event loop is stalled) " + nc.DisplayName()))
			}
			if gvkExist {
				// Check GVK

				if _, ok := parent.Spec.FooExampleGvk[nc.DisplayName()]; ok {
					return
				}

				panic(fmt.Sprintf("gvk not found (event loop is stalled) " + nc.DisplayName()))
			}

			deleteCB(nc)
		},
	})
	return registrationId, err
}

func (c *footypeabcConfigTsmV1Chainer) RegisterAddCallback(cbfn func(obj *ConfigFooTypeABC)) (cache.ResourceEventHandlerRegistration, error) {
	log.Debugf("[RegisterAddCallback] Received for ConfigFooTypeABC")
	var (
		registrationId cache.ResourceEventHandlerRegistration
		err            error
	)
	key := "footypeabcs.config.tsm.tanzu.vmware.com"
	stopper := make(chan struct{})
	if s, ok := subscriptionMap.Load(key); ok {
		log.Debugf("[RegisterAddCallback] ConfigFooTypeABC Use Subscription Informer")
		sub := s.(subscription)
		registrationId, err = sub.informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
			AddFunc: func(obj interface{}) {
				nc := &ConfigFooTypeABC{
					client:     c.client,
					FooTypeABC: obj.(*baseconfigtsmtanzuvmwarecomv1.FooTypeABC),
				}

				var parent *ConfigConfig
				gvkExist := false
				for i := 0; i < 600; i++ {
					// Check if parent exists
					p, err := nc.GetParent(context.TODO())
					if err != nil || p == nil {
						time.Sleep(500 * time.Millisecond)
						continue
					}
					parent = p

					// Check GVK

					if _, ok := parent.Spec.FooExampleGvk[nc.DisplayName()]; !ok {
						time.Sleep(500 * time.Millisecond)
						continue
					}

					gvkExist = true

					break
				}

				if parent == nil {
					hashedName := helper.GetHashedName("configs.config.tsm.tanzu.vmware.com", nc.Labels, nc.Labels["configs.config.tsm.tanzu.vmware.com"])
					parent, err = c.client.Config().ForceReadConfigByName(context.TODO(), hashedName)
					if err != nil {
						if errors.IsNotFound(err) {
							return
						}

						panic("error occurred while fetching parent " + err.Error())
					}
					panic(fmt.Sprintf("parent found (event loop is stalled) " + nc.DisplayName()))
				}

				if !gvkExist {
					// Check GVK

					if _, ok := parent.Spec.FooExampleGvk[nc.DisplayName()]; !ok {
						return
					}

					panic(fmt.Sprintf("gvk found (event loop is stalled) " + nc.DisplayName()))
				}

				cbfn(nc)
			},
		})
	} else {
		log.Debugf("[RegisterAddCallback] ConfigFooTypeABC Create New Informer")
		informer := informerconfigtsmtanzuvmwarecomv1.NewFooTypeABCInformer(c.client.baseClient, 0, cache.Indexers{})
		registrationId, err = informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
			AddFunc: func(obj interface{}) {
				nc := &ConfigFooTypeABC{
					client:     c.client,
					FooTypeABC: obj.(*baseconfigtsmtanzuvmwarecomv1.FooTypeABC),
				}

				var parent *ConfigConfig
				gvkExist := false
				for i := 0; i < 600; i++ {
					// Check if parent exists
					p, err := nc.GetParent(context.TODO())
					if err != nil || p == nil {
						time.Sleep(500 * time.Millisecond)
						continue
					}
					parent = p

					// Check GVK

					if _, ok := parent.Spec.FooExampleGvk[nc.DisplayName()]; !ok {
						time.Sleep(500 * time.Millisecond)
						continue
					}

					gvkExist = true

					break
				}

				if parent == nil {
					hashedName := helper.GetHashedName("configs.config.tsm.tanzu.vmware.com", nc.Labels, nc.Labels["configs.config.tsm.tanzu.vmware.com"])
					parent, err = c.client.Config().ForceReadConfigByName(context.TODO(), hashedName)
					if err != nil {
						if errors.IsNotFound(err) {
							return
						}

						panic("error occurred while fetching parent " + err.Error())
					}
					panic(fmt.Sprintf("parent found (event loop is stalled) " + nc.DisplayName()))
				}

				if !gvkExist {
					// Check GVK

					if _, ok := parent.Spec.FooExampleGvk[nc.DisplayName()]; !ok {
						return
					}

					panic(fmt.Sprintf("gvk found (event loop is stalled) " + nc.DisplayName()))
				}

				cbfn(nc)
			},
		})
		go informer.Run(stopper)
	}
	return registrationId, err
}

func (c *footypeabcConfigTsmV1Chainer) RegisterUpdateCallback(cbfn func(oldObj, newObj *ConfigFooTypeABC)) (cache.ResourceEventHandlerRegistration, error) {
	log.Debugf("[RegisterUpdateCallback] Received for ConfigFooTypeABC")
	var (
		registrationId cache.ResourceEventHandlerRegistration
		err            error
	)
	key := "footypeabcs.config.tsm.tanzu.vmware.com"
	stopper := make(chan struct{})
	if s, ok := subscriptionMap.Load(key); ok {
		log.Debugf("[RegisterUpdateCallback] ConfigFooTypeABC Use Subscription Informer")
		sub := s.(subscription)
		registrationId, err = sub.informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
			UpdateFunc: func(oldObj, newObj interface{}) {
				oldData := &ConfigFooTypeABC{
					client:     c.client,
					FooTypeABC: oldObj.(*baseconfigtsmtanzuvmwarecomv1.FooTypeABC),
				}
				newData := &ConfigFooTypeABC{
					client:     c.client,
					FooTypeABC: newObj.(*baseconfigtsmtanzuvmwarecomv1.FooTypeABC),
				}
				cbfn(oldData, newData)
			},
		})
	} else {
		log.Debugf("[RegisterUpdateCallback] ConfigFooTypeABC Create New Informer")
		informer := informerconfigtsmtanzuvmwarecomv1.NewFooTypeABCInformer(c.client.baseClient, 0, cache.Indexers{})
		registrationId, err = informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
			UpdateFunc: func(oldObj, newObj interface{}) {
				oldData := &ConfigFooTypeABC{
					client:     c.client,
					FooTypeABC: oldObj.(*baseconfigtsmtanzuvmwarecomv1.FooTypeABC),
				}
				newData := &ConfigFooTypeABC{
					client:     c.client,
					FooTypeABC: newObj.(*baseconfigtsmtanzuvmwarecomv1.FooTypeABC),
				}
				cbfn(oldData, newData)
			},
		})
		go informer.Run(stopper)
	}
	return registrationId, err
}

func (c *footypeabcConfigTsmV1Chainer) RegisterDeleteCallback(cbfn func(obj *ConfigFooTypeABC)) (cache.ResourceEventHandlerRegistration, error) {
	log.Debugf("[RegisterDeleteCallback] Received for ConfigFooTypeABC")
	var (
		registrationId cache.ResourceEventHandlerRegistration
		err            error
	)
	key := "footypeabcs.config.tsm.tanzu.vmware.com"
	stopper := make(chan struct{})
	if s, ok := subscriptionMap.Load(key); ok {
		log.Debugf("[RegisterDeleteCallback] ConfigFooTypeABC Use Subscription Informer")
		sub := s.(subscription)
		registrationId, err = sub.informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
			DeleteFunc: func(obj interface{}) {
				nc := &ConfigFooTypeABC{
					client:     c.client,
					FooTypeABC: obj.(*baseconfigtsmtanzuvmwarecomv1.FooTypeABC),
				}

				var parent *ConfigConfig
				gvkExist := true
				for i := 0; i < 600; i++ {
					// Check if parent exists
					p, err := nc.GetParent(context.TODO())
					if err != nil || p == nil {
						time.Sleep(500 * time.Millisecond)
						continue
					}
					parent = p

					// Check GVK

					if _, ok := parent.Spec.FooExampleGvk[nc.DisplayName()]; ok {
						time.Sleep(500 * time.Millisecond)
						continue
					}

					gvkExist = false
					break
				}

				if parent == nil {
					hashedName := helper.GetHashedName("configs.config.tsm.tanzu.vmware.com", nc.Labels, nc.Labels["configs.config.tsm.tanzu.vmware.com"])
					parent, err = c.client.Config().ForceReadConfigByName(context.TODO(), hashedName)
					if err != nil {
						if errors.IsNotFound(err) {
							return
						}

						panic("error occurred while fetching parent " + err.Error())
					}
					panic(fmt.Sprintf("parent found (event loop is stalled) " + nc.DisplayName()))
				}

				if gvkExist {
					// Check GVK

					if _, ok := parent.Spec.FooExampleGvk[nc.DisplayName()]; ok {
						return
					}

					panic(fmt.Sprintf("gvk not found (event loop is stalled) " + nc.DisplayName()))
				}

				cbfn(nc)
			},
		})
	} else {
		log.Debugf("[RegisterDeleteCallback] ConfigFooTypeABC Create New Informer")
		informer := informerconfigtsmtanzuvmwarecomv1.NewFooTypeABCInformer(c.client.baseClient, 0, cache.Indexers{})
		registrationId, err = informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
			DeleteFunc: func(obj interface{}) {
				nc := &ConfigFooTypeABC{
					client:     c.client,
					FooTypeABC: obj.(*baseconfigtsmtanzuvmwarecomv1.FooTypeABC),
				}

				var parent *ConfigConfig
				gvkExist := true
				for i := 0; i < 600; i++ {
					// Check if parent exists
					p, err := nc.GetParent(context.TODO())
					if err != nil || p == nil {
						time.Sleep(500 * time.Millisecond)
						continue
					}
					parent = p

					// Check GVK

					if _, ok := parent.Spec.FooExampleGvk[nc.DisplayName()]; ok {
						time.Sleep(500 * time.Millisecond)
						continue
					}

					gvkExist = false

					break
				}

				if parent == nil {
					hashedName := helper.GetHashedName("configs.config.tsm.tanzu.vmware.com", nc.Labels, nc.Labels["configs.config.tsm.tanzu.vmware.com"])
					parent, err = c.client.Config().ForceReadConfigByName(context.TODO(), hashedName)
					if err != nil {
						if errors.IsNotFound(err) {
							return
						}

						panic("error occurred while fetching parent " + err.Error())
					}
					panic(fmt.Sprintf("parent found (event loop is stalled) " + nc.DisplayName()))
				}

				if gvkExist {
					// Check GVK

					if _, ok := parent.Spec.FooExampleGvk[nc.DisplayName()]; ok {
						return
					}

					panic(fmt.Sprintf("gvk not found (event loop is stalled) " + nc.DisplayName()))
				}

				cbfn(nc)
			},
		})
		go informer.Run(stopper)
	}
	return registrationId, err
}

// GetDomainByName returns object stored in the database under the hashedName which is a hash of display
// name and parents names. Use it when you know hashed name of object.
func (group *ConfigTsmV1) GetDomainByName(ctx context.Context, hashedName string) (*ConfigDomain, error) {
	key := "domains.config.tsm.tanzu.vmware.com"
	if s, ok := subscriptionMap.Load(key); ok {
		log.Debugf("[GetDomainByName] GetObject: %s from cache", hashedName)
		item, exists, err := s.(subscription).informer.GetStore().GetByKey(hashedName)
		if !exists {
			return nil, err
		}

		log.Debugf("[GetDomainByName] Object: %s exists in cache", hashedName)
		result, _ := item.(*baseconfigtsmtanzuvmwarecomv1.Domain)
		return &ConfigDomain{
			client: group.client,
			Domain: result,
		}, nil
	} else {
		retryCount := 0
		for {
			result, err := group.client.baseClient.
				ConfigTsmV1().
				Domains().Get(ctx, hashedName, metav1.GetOptions{})
			if err != nil {
				log.Errorf("[GetDomainByName] Failed to Get Domains: %+v", err)
				if errors.IsTimeout(err) || customerrors.Is(err, context.DeadlineExceeded) {
					log.Errorf("[Retry Count: %d ] %+v", retryCount, err)
					if retryCount == maxRetryCount {
						log.Error("Max Retry exceed on Get Domains")
						return nil, err
					}
					retryCount += 1
					time.Sleep(sleepTime * time.Second)
				} else if customerrors.Is(err, context.Canceled) {
					log.Errorf("[GetDomainByName]: %+v", err)
					return nil, context.Canceled
				} else {
					log.Errorf("[GetDomainByName]: %+v", err)
					return nil, err
				}
			} else {
				return &ConfigDomain{
					client: group.client,
					Domain: result,
				}, nil
			}
		}
	}
}

// ForceReadDomainByName read object directly from the database under the hashedName which is a hash of display
// name and parents names. Use it when you know hashed name of object.
func (group *ConfigTsmV1) ForceReadDomainByName(ctx context.Context, hashedName string) (*ConfigDomain, error) {
	log.Debugf("[ForceReadDomainByName] Received object :%s to read from DB", hashedName)
	retryCount := 0
	for {
		result, err := group.client.baseClient.
			ConfigTsmV1().
			Domains().Get(ctx, hashedName, metav1.GetOptions{})
		if err != nil {
			log.Errorf("[ForceReadDomainByName] Failed to Get Domains: %+v", err)
			if errors.IsTimeout(err) || customerrors.Is(err, context.DeadlineExceeded) {
				log.Errorf("[Retry Count: %d ] %+v", retryCount, err)
				if retryCount == maxRetryCount {
					log.Error("Max Retry exceed on Get Domains")
					return nil, err
				}
				retryCount += 1
				time.Sleep(sleepTime * time.Second)
			} else if customerrors.Is(err, context.Canceled) {
				log.Errorf("[ForceReadDomainByName]: %+v", err)
				return nil, context.Canceled
			} else {
				log.Errorf("[ForceReadDomainByName]: %+v", err)
				return nil, err
			}
		} else {
			log.Debugf("[ForceReadDomainByName] Executed Successfully :%s", hashedName)
			return &ConfigDomain{
				client: group.client,
				Domain: result,
			}, nil
		}
	}
}

// DeleteDomainByName deletes object stored in the database under the hashedName which is a hash of
// display name and parents names. Use it when you know hashed name of object.
func (group *ConfigTsmV1) DeleteDomainByName(ctx context.Context, hashedName string) (err error) {
	log.Debugf("[DeleteDomainByName] Received objectToDelete: %s", hashedName)

	var (
		retryCount int
		result     *baseconfigtsmtanzuvmwarecomv1.Domain
	)
	retryCount = 0
	for {
		result, err = group.client.baseClient.
			ConfigTsmV1().
			Domains().Get(ctx, hashedName, metav1.GetOptions{})
		if err != nil {
			log.Errorf("[DeleteDomainByName] Failed to Get Domains: %+v", err)
			if errors.IsTimeout(err) || customerrors.Is(err, context.DeadlineExceeded) {
				log.Errorf("[Retry Count: %d ] %+v", retryCount, err)
				if retryCount == maxRetryCount {
					log.Error("Max Retry exceed on Get Domains")
					return err
				}
				retryCount += 1
				time.Sleep(sleepTime * time.Second)
			} else if customerrors.Is(err, context.Canceled) {
				log.Errorf("[DeleteDomainByName]: %+v", err)
				return context.Canceled
			} else if errors.IsNotFound(err) {
				log.Errorf("[DeleteDomainByName] Object Notfound: %+v", err)
				break
			} else {
				log.Errorf("[DeleteDomainByName]: %+v", err)
				return err
			}
		} else {
			break
		}
	}

	retryCount = 0
	for {
		err = group.client.baseClient.
			ConfigTsmV1().
			Domains().Delete(ctx, hashedName, metav1.DeleteOptions{})
		if err != nil {
			log.Errorf("[DeleteDomainByName] failed to delete Domains: %+v", err)
			if errors.IsTimeout(err) || customerrors.Is(err, context.DeadlineExceeded) {
				log.Errorf("[Retry Count: %d ] %+v", retryCount, err)
				if retryCount == maxRetryCount {
					log.Error("Max retry exceed on delete Domains")
					return err
				}
				retryCount += 1
				time.Sleep(sleepTime * time.Second)
			} else if customerrors.Is(err, context.Canceled) {
				log.Errorf("[DeleteDomainByName]: %+v", err)
				return context.Canceled
			} else if errors.IsNotFound(err) {
				log.Errorf("[DeleteDomainByName] Object not found: %+v", err)
				break
			} else {
				log.Errorf("[DeleteDomainByName]: %+v", err)
				return err
			}
		}
	}
	// Get Parent Node and check if gvk present before patch

	var gvkPresent bool
	log.Debugf("[DeleteDomainByName] Get Parent details")
	var patch Patch
	parents := result.GetLabels()
	if parents == nil {
		parents = make(map[string]string)
	}
	parentName, ok := parents["configs.config.tsm.tanzu.vmware.com"]
	if !ok {
		parentName = helper.DEFAULT_KEY
	}
	if result.GetLabels() != nil {
		if parents[common.IS_NAME_HASHED_LABEL] == "true" {
			parentName = helper.GetHashedName("configs.config.tsm.tanzu.vmware.com", parents, parentName)
		}
	} else {
		parentName = helper.GetHashedName("configs.config.tsm.tanzu.vmware.com", parents, parentName)
	}
	parentData, err := group.client.baseClient.
		ConfigTsmV1().
		Configs().Get(ctx, parentName, metav1.GetOptions{})
	if err != nil {
		log.Errorf("[DeleteDomainByName] Failed to get Parent node: %+v", err)
		if errors.IsNotFound(err) {
			return nil
		} else {
			return err
		}
	}

	if parentData.Spec.DomainGvk != nil {
		log.Debugf("[DeleteDomainByName] GVK present in parent for node: %s", hashedName)
		gvkPresent = true
	}

	if gvkPresent {

		patchOp := PatchOp{
			Op:   "remove",
			Path: "/spec/domainGvk",
		}

		patch = append(patch, patchOp)
		marshaled, err := patch.Marshal()
		if err != nil {
			return err
		}

		retryCount = 0
		newCtx := context.TODO()
		for {
			_, err = group.client.baseClient.
				ConfigTsmV1().
				Configs().Patch(newCtx, parentName, types.JSONPatchType, marshaled, metav1.PatchOptions{})
			if err != nil {
				log.Errorf("Failed to patch Domain gvk in parent node[Configs]: %+v", err)
				if errors.IsTimeout(err) || customerrors.Is(err, context.DeadlineExceeded) {
					log.Errorf("[Retry Count: %d ] %+v", retryCount, err)
					if retryCount == maxRetryCount {
						log.Error("Max Retry exceed on patching gvk")
						return err
					}
					retryCount += 1
					time.Sleep(sleepTime * time.Second)
				} else if customerrors.Is(err, context.Canceled) {
					log.Errorf("[DeleteDomainByName]: %+v", err)
					return context.Canceled
				} else {
					log.Errorf("Unexpected Error occur Domain]: %+v", err)
					return err
				}
			} else {
				log.Debugf("[DeleteDomainByName] Patch Domain Success: %s", hashedName)
				break
			}
		}
		log.Debugf("[DeleteDomainByName] Executed Successfully: %s", hashedName)
	}

	return
}

// CreateDomainByName creates object in the database without hashing the name.
// Use it directly ONLY when objToCreate.Name is hashed name of the object.
func (group *ConfigTsmV1) CreateDomainByName(ctx context.Context,
	objToCreate *baseconfigtsmtanzuvmwarecomv1.Domain) (*ConfigDomain, error) {
	log.Debugf("[CreateDomainByName] Received objToCreate: %s", objToCreate.GetName())
	if objToCreate.GetLabels() == nil {
		objToCreate.Labels = make(map[string]string)
	}
	if _, ok := objToCreate.Labels[common.DISPLAY_NAME_LABEL]; !ok {
		objToCreate.Labels[common.DISPLAY_NAME_LABEL] = objToCreate.GetName()
	}

	var (
		retryCount int
		result     *baseconfigtsmtanzuvmwarecomv1.Domain
		err        error
	)
	retryCount = 0
	for {
		result, err = group.client.baseClient.
			ConfigTsmV1().
			Domains().Create(ctx, objToCreate, metav1.CreateOptions{})
		if err != nil {
			log.Errorf("[CreateDomainByName] Failed to Create Domains: %+v", err)
			if errors.IsTimeout(err) || customerrors.Is(err, context.DeadlineExceeded) {
				log.Errorf("[Retry Count: %d ] %+v", retryCount, err)
				if retryCount == maxRetryCount {
					log.Error("Max Retry exceed on Get Domains")
					return nil, err
				}
				retryCount += 1
				time.Sleep(sleepTime * time.Second)
			} else if customerrors.Is(err, context.Canceled) {
				log.Errorf("[CreateDomainByName]: %+v", err)
				return nil, context.Canceled
			} else {
				log.Errorf("[CreateDomainByName]: %+v", err)
				return nil, err
			}
		} else {
			break
		}
	}
	log.Debugf("[CreateDomainByName] Domains created successfully: %s", objToCreate.GetName())

	parentName, ok := objToCreate.GetLabels()["configs.config.tsm.tanzu.vmware.com"]
	if !ok {
		parentName = helper.DEFAULT_KEY
	}
	if objToCreate.Labels[common.IS_NAME_HASHED_LABEL] == "true" {
		parentName = helper.GetHashedName("configs.config.tsm.tanzu.vmware.com", objToCreate.GetLabels(), parentName)
	}

	var patch Patch
	patchOp := PatchOp{
		Op:   "replace",
		Path: "/spec/domainGvk",
		Value: baseconfigtsmtanzuvmwarecomv1.Child{
			Group: "config.tsm.tanzu.vmware.com",
			Kind:  "Domain",
			Name:  objToCreate.Name,
		},
	}
	patch = append(patch, patchOp)
	marshaled, err := patch.Marshal()
	if err != nil {
		return nil, err
	}
	retryCount = 0
	newCtx := context.TODO()
	for {
		_, err = group.client.baseClient.
			ConfigTsmV1().
			Configs().Patch(newCtx, parentName, types.JSONPatchType, marshaled, metav1.PatchOptions{})
		if err != nil {
			log.Errorf("[CreateDomainByName] Failed to patch Domain gvk in parent node[Configs]: %+v", err)
			if errors.IsTimeout(err) || customerrors.Is(err, context.DeadlineExceeded) {
				log.Errorf("[Retry Count: %d ] %+v", retryCount, err)
				if retryCount == maxRetryCount {
					log.Error("Max Retry exceed on patching gvk")
					log.Errorf("Trigger Domain Delete: %s", objToCreate.GetName())
					delErr := group.DeleteDomainByName(newCtx, objToCreate.GetName())
					if delErr != nil {
						log.Errorf("Error occur while deleting Domain: %s", objToCreate.GetName())
						return nil, delErr
					}
					log.Errorf("Domain Deleted: %s", objToCreate.GetName())
					return nil, err
				}
				retryCount += 1
				time.Sleep(sleepTime * time.Second)
			} else if customerrors.Is(err, context.Canceled) {
				log.Errorf("[CreateDomainByName]: %+v", err)
				return nil, context.Canceled
			} else {
				log.Errorf("[CreateDomainByName] Unexpected Error Domain] :%+v", err)
				log.Errorf("Trigger Domain Delete: %s", objToCreate.GetName())
				delErr := group.DeleteDomainByName(newCtx, objToCreate.GetName())
				if delErr != nil {
					log.Errorf("Error occur while deleting Domain: %+v", objToCreate.GetName())
					return nil, delErr
				}
				log.Errorf("Domain Deleted: %s", objToCreate.GetName())
				return nil, err
			}
		} else {
			log.Debugf("[CreateDomainByName] Patch Domain Success :%s", objToCreate.GetName())
			break
		}
	}

	log.Debugf("[CreateDomainByName] Executed Successfully: %s", objToCreate.GetName())
	return &ConfigDomain{
		client: group.client,
		Domain: result,
	}, nil
}

// UpdateDomainByName updates object stored in the database under the hashedName which is a hash of
// display name and parents names.
func (group *ConfigTsmV1) UpdateDomainByName(ctx context.Context,
	objToUpdate *baseconfigtsmtanzuvmwarecomv1.Domain) (*ConfigDomain, error) {
	log.Debugf("[UpdateDomainByName] Received objToUpdate: %s", objToUpdate.GetName())

	var patch Patch

	if objToUpdate.Annotations != nil || objToUpdate.Labels != nil {
		current, err := group.client.Config().GetDomainByName(ctx, objToUpdate.Name)
		if err != nil {
			return nil, err
		}

		if objToUpdate.Annotations != nil {
			if current.Annotations[ownershipAnnotation] != "" {
				objToUpdate.Annotations[ownershipAnnotation] = current.Annotations[ownershipAnnotation]
			}
			patch = append(patch, PatchOp{
				Op:    "replace",
				Path:  "/metadata/annotations",
				Value: objToUpdate.Annotations,
			})
		}

		if objToUpdate.Labels != nil {
			parentsList := helper.GetCRDParentsMap()["domains.config.tsm.tanzu.vmware.com"]
			for _, k := range parentsList {
				objToUpdate.Labels[k] = current.Labels[k]
			}
			objToUpdate.Labels[common.IS_NAME_HASHED_LABEL] = current.Labels[common.IS_NAME_HASHED_LABEL]
			objToUpdate.Labels[common.DISPLAY_NAME_LABEL] = current.Labels[common.DISPLAY_NAME_LABEL]
			patch = append(patch, PatchOp{
				Op:    "replace",
				Path:  "/metadata/labels",
				Value: objToUpdate.Labels,
			})
		}
	}

	var rt reflect.Type

	rt = reflect.TypeOf(objToUpdate.Spec.PointPort)
	if rt.Kind() == reflect.Slice || rt.Kind() == reflect.Array || rt.Kind() == reflect.Map {
		if !reflect.ValueOf(objToUpdate.Spec.PointPort).IsNil() {
			patchValuePointPort := objToUpdate.Spec.PointPort
			patchOpPointPort := PatchOp{
				Op:    "replace",
				Path:  "/spec/pointPort",
				Value: patchValuePointPort,
			}
			patch = append(patch, patchOpPointPort)
		}
	} else {
		patchValuePointPort := objToUpdate.Spec.PointPort
		patchOpPointPort := PatchOp{
			Op:    "replace",
			Path:  "/spec/pointPort",
			Value: patchValuePointPort,
		}
		patch = append(patch, patchOpPointPort)
	}

	rt = reflect.TypeOf(objToUpdate.Spec.PointString)
	if rt.Kind() == reflect.Slice || rt.Kind() == reflect.Array || rt.Kind() == reflect.Map {
		if !reflect.ValueOf(objToUpdate.Spec.PointString).IsNil() {
			patchValuePointString := objToUpdate.Spec.PointString
			patchOpPointString := PatchOp{
				Op:    "replace",
				Path:  "/spec/pointString",
				Value: patchValuePointString,
			}
			patch = append(patch, patchOpPointString)
		}
	} else {
		patchValuePointString := objToUpdate.Spec.PointString
		patchOpPointString := PatchOp{
			Op:    "replace",
			Path:  "/spec/pointString",
			Value: patchValuePointString,
		}
		patch = append(patch, patchOpPointString)
	}

	rt = reflect.TypeOf(objToUpdate.Spec.PointInt)
	if rt.Kind() == reflect.Slice || rt.Kind() == reflect.Array || rt.Kind() == reflect.Map {
		if !reflect.ValueOf(objToUpdate.Spec.PointInt).IsNil() {
			patchValuePointInt := objToUpdate.Spec.PointInt
			patchOpPointInt := PatchOp{
				Op:    "replace",
				Path:  "/spec/pointInt",
				Value: patchValuePointInt,
			}
			patch = append(patch, patchOpPointInt)
		}
	} else {
		patchValuePointInt := objToUpdate.Spec.PointInt
		patchOpPointInt := PatchOp{
			Op:    "replace",
			Path:  "/spec/pointInt",
			Value: patchValuePointInt,
		}
		patch = append(patch, patchOpPointInt)
	}

	rt = reflect.TypeOf(objToUpdate.Spec.PointMap)
	if rt.Kind() == reflect.Slice || rt.Kind() == reflect.Array || rt.Kind() == reflect.Map {
		if !reflect.ValueOf(objToUpdate.Spec.PointMap).IsNil() {
			patchValuePointMap := objToUpdate.Spec.PointMap
			patchOpPointMap := PatchOp{
				Op:    "replace",
				Path:  "/spec/pointMap",
				Value: patchValuePointMap,
			}
			patch = append(patch, patchOpPointMap)
		}
	} else {
		patchValuePointMap := objToUpdate.Spec.PointMap
		patchOpPointMap := PatchOp{
			Op:    "replace",
			Path:  "/spec/pointMap",
			Value: patchValuePointMap,
		}
		patch = append(patch, patchOpPointMap)
	}

	rt = reflect.TypeOf(objToUpdate.Spec.PointSlice)
	if rt.Kind() == reflect.Slice || rt.Kind() == reflect.Array || rt.Kind() == reflect.Map {
		if !reflect.ValueOf(objToUpdate.Spec.PointSlice).IsNil() {
			patchValuePointSlice := objToUpdate.Spec.PointSlice
			patchOpPointSlice := PatchOp{
				Op:    "replace",
				Path:  "/spec/pointSlice",
				Value: patchValuePointSlice,
			}
			patch = append(patch, patchOpPointSlice)
		}
	} else {
		patchValuePointSlice := objToUpdate.Spec.PointSlice
		patchOpPointSlice := PatchOp{
			Op:    "replace",
			Path:  "/spec/pointSlice",
			Value: patchValuePointSlice,
		}
		patch = append(patch, patchOpPointSlice)
	}

	rt = reflect.TypeOf(objToUpdate.Spec.SliceOfPoints)
	if rt.Kind() == reflect.Slice || rt.Kind() == reflect.Array || rt.Kind() == reflect.Map {
		if !reflect.ValueOf(objToUpdate.Spec.SliceOfPoints).IsNil() {
			patchValueSliceOfPoints := objToUpdate.Spec.SliceOfPoints
			patchOpSliceOfPoints := PatchOp{
				Op:    "replace",
				Path:  "/spec/sliceOfPoints",
				Value: patchValueSliceOfPoints,
			}
			patch = append(patch, patchOpSliceOfPoints)
		}
	} else {
		patchValueSliceOfPoints := objToUpdate.Spec.SliceOfPoints
		patchOpSliceOfPoints := PatchOp{
			Op:    "replace",
			Path:  "/spec/sliceOfPoints",
			Value: patchValueSliceOfPoints,
		}
		patch = append(patch, patchOpSliceOfPoints)
	}

	rt = reflect.TypeOf(objToUpdate.Spec.SliceOfArrPoints)
	if rt.Kind() == reflect.Slice || rt.Kind() == reflect.Array || rt.Kind() == reflect.Map {
		if !reflect.ValueOf(objToUpdate.Spec.SliceOfArrPoints).IsNil() {
			patchValueSliceOfArrPoints := objToUpdate.Spec.SliceOfArrPoints
			patchOpSliceOfArrPoints := PatchOp{
				Op:    "replace",
				Path:  "/spec/sliceOfArrPoints",
				Value: patchValueSliceOfArrPoints,
			}
			patch = append(patch, patchOpSliceOfArrPoints)
		}
	} else {
		patchValueSliceOfArrPoints := objToUpdate.Spec.SliceOfArrPoints
		patchOpSliceOfArrPoints := PatchOp{
			Op:    "replace",
			Path:  "/spec/sliceOfArrPoints",
			Value: patchValueSliceOfArrPoints,
		}
		patch = append(patch, patchOpSliceOfArrPoints)
	}

	rt = reflect.TypeOf(objToUpdate.Spec.MapOfArrsPoints)
	if rt.Kind() == reflect.Slice || rt.Kind() == reflect.Array || rt.Kind() == reflect.Map {
		if !reflect.ValueOf(objToUpdate.Spec.MapOfArrsPoints).IsNil() {
			patchValueMapOfArrsPoints := objToUpdate.Spec.MapOfArrsPoints
			patchOpMapOfArrsPoints := PatchOp{
				Op:    "replace",
				Path:  "/spec/mapOfArrsPoints",
				Value: patchValueMapOfArrsPoints,
			}
			patch = append(patch, patchOpMapOfArrsPoints)
		}
	} else {
		patchValueMapOfArrsPoints := objToUpdate.Spec.MapOfArrsPoints
		patchOpMapOfArrsPoints := PatchOp{
			Op:    "replace",
			Path:  "/spec/mapOfArrsPoints",
			Value: patchValueMapOfArrsPoints,
		}
		patch = append(patch, patchOpMapOfArrsPoints)
	}

	rt = reflect.TypeOf(objToUpdate.Spec.PointStruct)
	if rt.Kind() == reflect.Slice || rt.Kind() == reflect.Array || rt.Kind() == reflect.Map {
		if !reflect.ValueOf(objToUpdate.Spec.PointStruct).IsNil() {
			patchValuePointStruct := objToUpdate.Spec.PointStruct
			patchOpPointStruct := PatchOp{
				Op:    "replace",
				Path:  "/spec/pointStruct",
				Value: patchValuePointStruct,
			}
			patch = append(patch, patchOpPointStruct)
		}
	} else {
		patchValuePointStruct := objToUpdate.Spec.PointStruct
		patchOpPointStruct := PatchOp{
			Op:    "replace",
			Path:  "/spec/pointStruct",
			Value: patchValuePointStruct,
		}
		patch = append(patch, patchOpPointStruct)
	}

	marshaled, err := patch.Marshal()
	if err != nil {
		return nil, err
	}

	var (
		result *baseconfigtsmtanzuvmwarecomv1.Domain
	)
	newCtx := context.TODO()
	retryCount := 0
	for {
		result, err = group.client.baseClient.
			ConfigTsmV1().
			Domains().Patch(newCtx, objToUpdate.GetName(), types.JSONPatchType, marshaled, metav1.PatchOptions{}, "")
		if err != nil {
			log.Errorf("[UpdateDomainByName] Failed to patch Domain gvk in parent node[Configs]: %+v", err)
			if errors.IsTimeout(err) || customerrors.Is(err, context.DeadlineExceeded) {
				log.Errorf("[Retry Count: %d ] %+v", retryCount, err)
				if retryCount == maxRetryCount {
					log.Error("Max Retry exceed on patching gvk")
					log.Errorf("Trigger Domain Delete: %s", objToUpdate.GetName())
					delErr := group.DeleteDomainByName(newCtx, objToUpdate.GetName())
					if delErr != nil {
						log.Errorf("Error occur while deleting Domain: %s", objToUpdate.GetName())
						return nil, delErr
					}
					log.Errorf("Domain Deleted: %s", objToUpdate.GetName())
					return nil, err
				}
				retryCount += 1
				time.Sleep(sleepTime * time.Second)
			} else if customerrors.Is(err, context.Canceled) {
				log.Errorf("[CreateDomainByName]: %+v", err)
				return nil, context.Canceled
			} else {
				log.Errorf("[CreateDomainByName] Unexpected Error Domain] :%+v", err)
				log.Errorf("Trigger Domain Delete: %s", objToUpdate.GetName())
				delErr := group.DeleteDomainByName(newCtx, objToUpdate.GetName())
				if delErr != nil {
					log.Errorf("Error occur while deleting Domain: %+v", objToUpdate.GetName())
					return nil, delErr
				}
				log.Errorf("Domain Deleted: %s", objToUpdate.GetName())
				return nil, err
			}
		} else {
			log.Debugf("[CreateDomainByName] Patch Domain Success :%s", objToUpdate.GetName())
			break
		}
	}
	log.Debugf("[UpdateDomainByName] Executed Successfully %s", objToUpdate.GetName())
	return &ConfigDomain{
		client: group.client,
		Domain: result,
	}, nil
}

// ListDomains returns slice of all existing objects of this type. Selectors can be provided in opts parameter.
func (group *ConfigTsmV1) ListDomains(ctx context.Context,
	opts metav1.ListOptions) (result []*ConfigDomain, err error) {
	key := "domains.config.tsm.tanzu.vmware.com"
	if s, ok := subscriptionMap.Load(key); ok {
		items := s.(subscription).informer.GetStore().List()
		result = make([]*ConfigDomain, len(items))
		for k, v := range items {
			item, _ := v.(*baseconfigtsmtanzuvmwarecomv1.Domain)
			result[k] = &ConfigDomain{
				client: group.client,
				Domain: item,
			}
		}
	} else {
		list, err := group.client.baseClient.ConfigTsmV1().
			Domains().List(ctx, opts)
		if err != nil {
			return nil, err
		}
		result = make([]*ConfigDomain, len(list.Items))
		for k, v := range list.Items {
			item := v
			result[k] = &ConfigDomain{
				client: group.client,
				Domain: &item,
			}
		}
	}
	return
}

type ConfigDomain struct {
	client *Clientset
	*baseconfigtsmtanzuvmwarecomv1.Domain
}

// Delete removes obj and all it's children from the database.
func (obj *ConfigDomain) Delete(ctx context.Context) error {
	err := obj.client.Config().DeleteDomainByName(ctx, obj.GetName())
	if err != nil {
		return err
	}
	obj.Domain = nil
	return nil
}

// Update updates spec of object in database. Children and Link can not be updated using this function.
func (obj *ConfigDomain) Update(ctx context.Context) error {
	result, err := obj.client.Config().UpdateDomainByName(ctx, obj.Domain)
	if err != nil {
		return err
	}
	obj.Domain = result.Domain
	return nil
}

func (obj *ConfigDomain) GetParent(ctx context.Context) (result *ConfigConfig, err error) {
	hashedName := helper.GetHashedName("configs.config.tsm.tanzu.vmware.com", obj.Labels, obj.Labels["configs.config.tsm.tanzu.vmware.com"])
	return obj.client.Config().GetConfigByName(ctx, hashedName)
}

type domainConfigTsmV1Chainer struct {
	client       *Clientset
	name         string
	parentLabels map[string]string
}

func (c *domainConfigTsmV1Chainer) Subscribe() {
	key := "domains.config.tsm.tanzu.vmware.com"
	if _, ok := subscriptionMap.Load(key); !ok {
		informer := informerconfigtsmtanzuvmwarecomv1.NewDomainInformer(c.client.baseClient, 0, cache.Indexers{})
		subscribe(key, informer)
	}
}

func (c *domainConfigTsmV1Chainer) Unsubscribe() {
	key := "domains.config.tsm.tanzu.vmware.com"
	if s, ok := subscriptionMap.Load(key); ok {
		close(s.(subscription).stop)
		subscriptionMap.Delete(key)
	}
}

func (c *domainConfigTsmV1Chainer) IsSubscribed() bool {
	key := "domains.config.tsm.tanzu.vmware.com"
	_, ok := subscriptionMap.Load(key)
	return ok
}

func (c *domainConfigTsmV1Chainer) RegisterEventHandler(addCB func(obj *ConfigDomain), updateCB func(oldObj, newObj *ConfigDomain), deleteCB func(obj *ConfigDomain)) (cache.ResourceEventHandlerRegistration, error) {
	fmt.Println("RegisterEventHandler for ConfigDomain")
	var (
		registrationId cache.ResourceEventHandlerRegistration
		err            error
		informer       cache.SharedIndexInformer
	)
	key := "domains.config.tsm.tanzu.vmware.com"
	stopper := make(chan struct{})
	if s, ok := subscriptionMap.Load(key); ok {
		fmt.Println("Informer exists for ConfigDomain")
		sub := s.(subscription)
		informer = sub.informer
	} else {
		fmt.Println("Informer doesn't exists for ConfigDomain, so creating a new one")
		informer = informerconfigtsmtanzuvmwarecomv1.NewDomainInformer(c.client.baseClient, 0, cache.Indexers{})
		go informer.Run(stopper)
		subscribe(key, informer)
	}
	registrationId, err = informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
		AddFunc: func(obj interface{}) {
			nc := &ConfigDomain{
				client: c.client,
				Domain: obj.(*baseconfigtsmtanzuvmwarecomv1.Domain),
			}

			var parent *ConfigConfig
			gvkExist := false
			for i := 0; i < 600; i++ {
				// Check if parent exists
				p, err := nc.GetParent(context.TODO())
				if err != nil || p == nil {
					time.Sleep(500 * time.Millisecond)
					continue
				}
				parent = p
				// Check GVK

				if parent.Spec.DomainGvk == nil {
					time.Sleep(500 * time.Millisecond)
					continue
				}

				gvkExist = true
				break
			}
			if parent == nil {
				hashedName := helper.GetHashedName("configs.config.tsm.tanzu.vmware.com", nc.Labels, nc.Labels["configs.config.tsm.tanzu.vmware.com"])
				parent, err = c.client.Config().ForceReadConfigByName(context.TODO(), hashedName)
				if err != nil {
					if errors.IsNotFound(err) {
						return
					}
					panic("error occurred while fetching parent " + err.Error())
				}
				panic(fmt.Sprintf("parent found (event loop is stalled) " + nc.DisplayName()))
			}
			if !gvkExist {
				// Check GVK

				if parent.Spec.DomainGvk == nil {
					return
				}

				panic(fmt.Sprintf("gvk found (event loop is stalled) " + nc.DisplayName()))
			}

			addCB(nc)
		},

		UpdateFunc: func(oldObj, newObj interface{}) {
			oldData := &ConfigDomain{
				client: c.client,
				Domain: oldObj.(*baseconfigtsmtanzuvmwarecomv1.Domain),
			}
			newData := &ConfigDomain{
				client: c.client,
				Domain: newObj.(*baseconfigtsmtanzuvmwarecomv1.Domain),
			}
			updateCB(oldData, newData)
		},

		DeleteFunc: func(obj interface{}) {
			nc := &ConfigDomain{
				client: c.client,
				Domain: obj.(*baseconfigtsmtanzuvmwarecomv1.Domain),
			}

			var parent *ConfigConfig
			gvkExist := true
			for i := 0; i < 600; i++ {
				// Check if parent exists
				p, err := nc.GetParent(context.TODO())
				if err != nil || p == nil {
					time.Sleep(500 * time.Millisecond)
					continue
				}
				parent = p
				// Check GVK

				if parent.Spec.DomainGvk != nil {
					time.Sleep(500 * time.Millisecond)
					continue
				}

				gvkExist = false
				break
			}
			if parent == nil {
				hashedName := helper.GetHashedName("configs.config.tsm.tanzu.vmware.com", nc.Labels, nc.Labels["configs.config.tsm.tanzu.vmware.com"])
				parent, err = c.client.Config().ForceReadConfigByName(context.TODO(), hashedName)
				if err != nil {
					if errors.IsNotFound(err) {
						return
					}
					panic("error occurred while fetching parent " + err.Error())
				}
				panic(fmt.Sprintf("parent found (event loop is stalled) " + nc.DisplayName()))
			}
			if gvkExist {
				// Check GVK

				if parent.Spec.DomainGvk != nil {
					return
				}

				panic(fmt.Sprintf("gvk not found (event loop is stalled) " + nc.DisplayName()))
			}

			deleteCB(nc)
		},
	})
	return registrationId, err
}

func (c *domainConfigTsmV1Chainer) RegisterAddCallback(cbfn func(obj *ConfigDomain)) (cache.ResourceEventHandlerRegistration, error) {
	log.Debugf("[RegisterAddCallback] Received for ConfigDomain")
	var (
		registrationId cache.ResourceEventHandlerRegistration
		err            error
	)
	key := "domains.config.tsm.tanzu.vmware.com"
	stopper := make(chan struct{})
	if s, ok := subscriptionMap.Load(key); ok {
		log.Debugf("[RegisterAddCallback] ConfigDomain Use Subscription Informer")
		sub := s.(subscription)
		registrationId, err = sub.informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
			AddFunc: func(obj interface{}) {
				nc := &ConfigDomain{
					client: c.client,
					Domain: obj.(*baseconfigtsmtanzuvmwarecomv1.Domain),
				}

				var parent *ConfigConfig
				gvkExist := false
				for i := 0; i < 600; i++ {
					// Check if parent exists
					p, err := nc.GetParent(context.TODO())
					if err != nil || p == nil {
						time.Sleep(500 * time.Millisecond)
						continue
					}
					parent = p

					// Check GVK

					if parent.Spec.DomainGvk == nil {
						time.Sleep(500 * time.Millisecond)
						continue
					}

					gvkExist = true

					break
				}

				if parent == nil {
					hashedName := helper.GetHashedName("configs.config.tsm.tanzu.vmware.com", nc.Labels, nc.Labels["configs.config.tsm.tanzu.vmware.com"])
					parent, err = c.client.Config().ForceReadConfigByName(context.TODO(), hashedName)
					if err != nil {
						if errors.IsNotFound(err) {
							return
						}

						panic("error occurred while fetching parent " + err.Error())
					}
					panic(fmt.Sprintf("parent found (event loop is stalled) " + nc.DisplayName()))
				}

				if !gvkExist {
					// Check GVK

					if parent.Spec.DomainGvk == nil {
						return
					}

					panic(fmt.Sprintf("gvk found (event loop is stalled) " + nc.DisplayName()))
				}

				cbfn(nc)
			},
		})
	} else {
		log.Debugf("[RegisterAddCallback] ConfigDomain Create New Informer")
		informer := informerconfigtsmtanzuvmwarecomv1.NewDomainInformer(c.client.baseClient, 0, cache.Indexers{})
		registrationId, err = informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
			AddFunc: func(obj interface{}) {
				nc := &ConfigDomain{
					client: c.client,
					Domain: obj.(*baseconfigtsmtanzuvmwarecomv1.Domain),
				}

				var parent *ConfigConfig
				gvkExist := false
				for i := 0; i < 600; i++ {
					// Check if parent exists
					p, err := nc.GetParent(context.TODO())
					if err != nil || p == nil {
						time.Sleep(500 * time.Millisecond)
						continue
					}
					parent = p

					// Check GVK

					if parent.Spec.DomainGvk == nil {
						time.Sleep(500 * time.Millisecond)
						continue
					}

					gvkExist = true

					break
				}

				if parent == nil {
					hashedName := helper.GetHashedName("configs.config.tsm.tanzu.vmware.com", nc.Labels, nc.Labels["configs.config.tsm.tanzu.vmware.com"])
					parent, err = c.client.Config().ForceReadConfigByName(context.TODO(), hashedName)
					if err != nil {
						if errors.IsNotFound(err) {
							return
						}

						panic("error occurred while fetching parent " + err.Error())
					}
					panic(fmt.Sprintf("parent found (event loop is stalled) " + nc.DisplayName()))
				}

				if !gvkExist {
					// Check GVK

					if parent.Spec.DomainGvk == nil {
						return
					}

					panic(fmt.Sprintf("gvk found (event loop is stalled) " + nc.DisplayName()))
				}

				cbfn(nc)
			},
		})
		go informer.Run(stopper)
	}
	return registrationId, err
}

func (c *domainConfigTsmV1Chainer) RegisterUpdateCallback(cbfn func(oldObj, newObj *ConfigDomain)) (cache.ResourceEventHandlerRegistration, error) {
	log.Debugf("[RegisterUpdateCallback] Received for ConfigDomain")
	var (
		registrationId cache.ResourceEventHandlerRegistration
		err            error
	)
	key := "domains.config.tsm.tanzu.vmware.com"
	stopper := make(chan struct{})
	if s, ok := subscriptionMap.Load(key); ok {
		log.Debugf("[RegisterUpdateCallback] ConfigDomain Use Subscription Informer")
		sub := s.(subscription)
		registrationId, err = sub.informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
			UpdateFunc: func(oldObj, newObj interface{}) {
				oldData := &ConfigDomain{
					client: c.client,
					Domain: oldObj.(*baseconfigtsmtanzuvmwarecomv1.Domain),
				}
				newData := &ConfigDomain{
					client: c.client,
					Domain: newObj.(*baseconfigtsmtanzuvmwarecomv1.Domain),
				}
				cbfn(oldData, newData)
			},
		})
	} else {
		log.Debugf("[RegisterUpdateCallback] ConfigDomain Create New Informer")
		informer := informerconfigtsmtanzuvmwarecomv1.NewDomainInformer(c.client.baseClient, 0, cache.Indexers{})
		registrationId, err = informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
			UpdateFunc: func(oldObj, newObj interface{}) {
				oldData := &ConfigDomain{
					client: c.client,
					Domain: oldObj.(*baseconfigtsmtanzuvmwarecomv1.Domain),
				}
				newData := &ConfigDomain{
					client: c.client,
					Domain: newObj.(*baseconfigtsmtanzuvmwarecomv1.Domain),
				}
				cbfn(oldData, newData)
			},
		})
		go informer.Run(stopper)
	}
	return registrationId, err
}

func (c *domainConfigTsmV1Chainer) RegisterDeleteCallback(cbfn func(obj *ConfigDomain)) (cache.ResourceEventHandlerRegistration, error) {
	log.Debugf("[RegisterDeleteCallback] Received for ConfigDomain")
	var (
		registrationId cache.ResourceEventHandlerRegistration
		err            error
	)
	key := "domains.config.tsm.tanzu.vmware.com"
	stopper := make(chan struct{})
	if s, ok := subscriptionMap.Load(key); ok {
		log.Debugf("[RegisterDeleteCallback] ConfigDomain Use Subscription Informer")
		sub := s.(subscription)
		registrationId, err = sub.informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
			DeleteFunc: func(obj interface{}) {
				nc := &ConfigDomain{
					client: c.client,
					Domain: obj.(*baseconfigtsmtanzuvmwarecomv1.Domain),
				}

				var parent *ConfigConfig
				gvkExist := true
				for i := 0; i < 600; i++ {
					// Check if parent exists
					p, err := nc.GetParent(context.TODO())
					if err != nil || p == nil {
						time.Sleep(500 * time.Millisecond)
						continue
					}
					parent = p

					// Check GVK

					if parent.Spec.DomainGvk != nil {
						time.Sleep(500 * time.Millisecond)
						continue
					}

					gvkExist = false
					break
				}

				if parent == nil {
					hashedName := helper.GetHashedName("configs.config.tsm.tanzu.vmware.com", nc.Labels, nc.Labels["configs.config.tsm.tanzu.vmware.com"])
					parent, err = c.client.Config().ForceReadConfigByName(context.TODO(), hashedName)
					if err != nil {
						if errors.IsNotFound(err) {
							return
						}

						panic("error occurred while fetching parent " + err.Error())
					}
					panic(fmt.Sprintf("parent found (event loop is stalled) " + nc.DisplayName()))
				}

				if gvkExist {
					// Check GVK

					if parent.Spec.DomainGvk != nil {
						return
					}

					panic(fmt.Sprintf("gvk not found (event loop is stalled) " + nc.DisplayName()))
				}

				cbfn(nc)
			},
		})
	} else {
		log.Debugf("[RegisterDeleteCallback] ConfigDomain Create New Informer")
		informer := informerconfigtsmtanzuvmwarecomv1.NewDomainInformer(c.client.baseClient, 0, cache.Indexers{})
		registrationId, err = informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
			DeleteFunc: func(obj interface{}) {
				nc := &ConfigDomain{
					client: c.client,
					Domain: obj.(*baseconfigtsmtanzuvmwarecomv1.Domain),
				}

				var parent *ConfigConfig
				gvkExist := true
				for i := 0; i < 600; i++ {
					// Check if parent exists
					p, err := nc.GetParent(context.TODO())
					if err != nil || p == nil {
						time.Sleep(500 * time.Millisecond)
						continue
					}
					parent = p

					// Check GVK

					if parent.Spec.DomainGvk != nil {
						time.Sleep(500 * time.Millisecond)
						continue
					}

					gvkExist = false

					break
				}

				if parent == nil {
					hashedName := helper.GetHashedName("configs.config.tsm.tanzu.vmware.com", nc.Labels, nc.Labels["configs.config.tsm.tanzu.vmware.com"])
					parent, err = c.client.Config().ForceReadConfigByName(context.TODO(), hashedName)
					if err != nil {
						if errors.IsNotFound(err) {
							return
						}

						panic("error occurred while fetching parent " + err.Error())
					}
					panic(fmt.Sprintf("parent found (event loop is stalled) " + nc.DisplayName()))
				}

				if gvkExist {
					// Check GVK

					if parent.Spec.DomainGvk != nil {
						return
					}

					panic(fmt.Sprintf("gvk not found (event loop is stalled) " + nc.DisplayName()))
				}

				cbfn(nc)
			},
		})
		go informer.Run(stopper)
	}
	return registrationId, err
}

// GetFooByName returns object stored in the database under the hashedName which is a hash of display
// name and parents names. Use it when you know hashed name of object.
func (group *GnsTsmV1) GetFooByName(ctx context.Context, hashedName string) (*GnsFoo, error) {
	key := "foos.gns.tsm.tanzu.vmware.com"
	if s, ok := subscriptionMap.Load(key); ok {
		log.Debugf("[GetFooByName] GetObject: %s from cache", hashedName)
		item, exists, err := s.(subscription).informer.GetStore().GetByKey(hashedName)
		if !exists {
			return nil, err
		}

		log.Debugf("[GetFooByName] Object: %s exists in cache", hashedName)
		result, _ := item.(*basegnstsmtanzuvmwarecomv1.Foo)
		return &GnsFoo{
			client: group.client,
			Foo:    result,
		}, nil
	} else {
		retryCount := 0
		for {
			result, err := group.client.baseClient.
				GnsTsmV1().
				Foos().Get(ctx, hashedName, metav1.GetOptions{})
			if err != nil {
				log.Errorf("[GetFooByName] Failed to Get Foos: %+v", err)
				if errors.IsTimeout(err) || customerrors.Is(err, context.DeadlineExceeded) {
					log.Errorf("[Retry Count: %d ] %+v", retryCount, err)
					if retryCount == maxRetryCount {
						log.Error("Max Retry exceed on Get Foos")
						return nil, err
					}
					retryCount += 1
					time.Sleep(sleepTime * time.Second)
				} else if customerrors.Is(err, context.Canceled) {
					log.Errorf("[GetFooByName]: %+v", err)
					return nil, context.Canceled
				} else {
					log.Errorf("[GetFooByName]: %+v", err)
					return nil, err
				}
			} else {
				return &GnsFoo{
					client: group.client,
					Foo:    result,
				}, nil
			}
		}
	}
}

// ForceReadFooByName read object directly from the database under the hashedName which is a hash of display
// name and parents names. Use it when you know hashed name of object.
func (group *GnsTsmV1) ForceReadFooByName(ctx context.Context, hashedName string) (*GnsFoo, error) {
	log.Debugf("[ForceReadFooByName] Received object :%s to read from DB", hashedName)
	retryCount := 0
	for {
		result, err := group.client.baseClient.
			GnsTsmV1().
			Foos().Get(ctx, hashedName, metav1.GetOptions{})
		if err != nil {
			log.Errorf("[ForceReadFooByName] Failed to Get Foos: %+v", err)
			if errors.IsTimeout(err) || customerrors.Is(err, context.DeadlineExceeded) {
				log.Errorf("[Retry Count: %d ] %+v", retryCount, err)
				if retryCount == maxRetryCount {
					log.Error("Max Retry exceed on Get Foos")
					return nil, err
				}
				retryCount += 1
				time.Sleep(sleepTime * time.Second)
			} else if customerrors.Is(err, context.Canceled) {
				log.Errorf("[ForceReadFooByName]: %+v", err)
				return nil, context.Canceled
			} else {
				log.Errorf("[ForceReadFooByName]: %+v", err)
				return nil, err
			}
		} else {
			log.Debugf("[ForceReadFooByName] Executed Successfully :%s", hashedName)
			return &GnsFoo{
				client: group.client,
				Foo:    result,
			}, nil
		}
	}
}

// DeleteFooByName deletes object stored in the database under the hashedName which is a hash of
// display name and parents names. Use it when you know hashed name of object.
func (group *GnsTsmV1) DeleteFooByName(ctx context.Context, hashedName string) (err error) {
	log.Debugf("[DeleteFooByName] Received objectToDelete: %s", hashedName)

	var (
		retryCount int
		result     *basegnstsmtanzuvmwarecomv1.Foo
	)
	retryCount = 0
	for {
		result, err = group.client.baseClient.
			GnsTsmV1().
			Foos().Get(ctx, hashedName, metav1.GetOptions{})
		if err != nil {
			log.Errorf("[DeleteFooByName] Failed to Get Foos: %+v", err)
			if errors.IsTimeout(err) || customerrors.Is(err, context.DeadlineExceeded) {
				log.Errorf("[Retry Count: %d ] %+v", retryCount, err)
				if retryCount == maxRetryCount {
					log.Error("Max Retry exceed on Get Foos")
					return err
				}
				retryCount += 1
				time.Sleep(sleepTime * time.Second)
			} else if customerrors.Is(err, context.Canceled) {
				log.Errorf("[DeleteFooByName]: %+v", err)
				return context.Canceled
			} else if errors.IsNotFound(err) {
				log.Errorf("[DeleteFooByName] Object Notfound: %+v", err)
				break
			} else {
				log.Errorf("[DeleteFooByName]: %+v", err)
				return err
			}
		} else {
			break
		}
	}

	retryCount = 0
	for {
		err = group.client.baseClient.
			GnsTsmV1().
			Foos().Delete(ctx, hashedName, metav1.DeleteOptions{})
		if err != nil {
			log.Errorf("[DeleteFooByName] failed to delete Foos: %+v", err)
			if errors.IsTimeout(err) || customerrors.Is(err, context.DeadlineExceeded) {
				log.Errorf("[Retry Count: %d ] %+v", retryCount, err)
				if retryCount == maxRetryCount {
					log.Error("Max retry exceed on delete Foos")
					return err
				}
				retryCount += 1
				time.Sleep(sleepTime * time.Second)
			} else if customerrors.Is(err, context.Canceled) {
				log.Errorf("[DeleteFooByName]: %+v", err)
				return context.Canceled
			} else if errors.IsNotFound(err) {
				log.Errorf("[DeleteFooByName] Object not found: %+v", err)
				break
			} else {
				log.Errorf("[DeleteFooByName]: %+v", err)
				return err
			}
		}
	}
	// Get Parent Node and check if gvk present before patch

	var gvkPresent bool
	log.Debugf("[DeleteFooByName] Get Parent details")
	var patch Patch
	parents := result.GetLabels()
	if parents == nil {
		parents = make(map[string]string)
	}
	parentName, ok := parents["gnses.gns.tsm.tanzu.vmware.com"]
	if !ok {
		parentName = helper.DEFAULT_KEY
	}
	if result.GetLabels() != nil {
		if parents[common.IS_NAME_HASHED_LABEL] == "true" {
			parentName = helper.GetHashedName("gnses.gns.tsm.tanzu.vmware.com", parents, parentName)
		}
	} else {
		parentName = helper.GetHashedName("gnses.gns.tsm.tanzu.vmware.com", parents, parentName)
	}
	parentData, err := group.client.baseClient.
		GnsTsmV1().
		Gnses().Get(ctx, parentName, metav1.GetOptions{})
	if err != nil {
		log.Errorf("[DeleteFooByName] Failed to get Parent node: %+v", err)
		if errors.IsNotFound(err) {
			return nil
		} else {
			return err
		}
	}

	if parentData.Spec.FooGvk != nil {
		log.Debugf("[DeleteFooByName] GVK present in parent for node: %s", hashedName)
		gvkPresent = true
	}

	if gvkPresent {

		patchOp := PatchOp{
			Op:   "remove",
			Path: "/spec/fooGvk",
		}

		patch = append(patch, patchOp)
		marshaled, err := patch.Marshal()
		if err != nil {
			return err
		}

		retryCount = 0
		newCtx := context.TODO()
		for {
			_, err = group.client.baseClient.
				GnsTsmV1().
				Gnses().Patch(newCtx, parentName, types.JSONPatchType, marshaled, metav1.PatchOptions{})
			if err != nil {
				log.Errorf("Failed to patch Foo gvk in parent node[Gnses]: %+v", err)
				if errors.IsTimeout(err) || customerrors.Is(err, context.DeadlineExceeded) {
					log.Errorf("[Retry Count: %d ] %+v", retryCount, err)
					if retryCount == maxRetryCount {
						log.Error("Max Retry exceed on patching gvk")
						return err
					}
					retryCount += 1
					time.Sleep(sleepTime * time.Second)
				} else if customerrors.Is(err, context.Canceled) {
					log.Errorf("[DeleteFooByName]: %+v", err)
					return context.Canceled
				} else {
					log.Errorf("Unexpected Error occur Foo]: %+v", err)
					return err
				}
			} else {
				log.Debugf("[DeleteFooByName] Patch Foo Success: %s", hashedName)
				break
			}
		}
		log.Debugf("[DeleteFooByName] Executed Successfully: %s", hashedName)
	}

	return
}

// CreateFooByName creates object in the database without hashing the name.
// Use it directly ONLY when objToCreate.Name is hashed name of the object.
func (group *GnsTsmV1) CreateFooByName(ctx context.Context,
	objToCreate *basegnstsmtanzuvmwarecomv1.Foo) (*GnsFoo, error) {
	log.Debugf("[CreateFooByName] Received objToCreate: %s", objToCreate.GetName())
	if objToCreate.GetLabels() == nil {
		objToCreate.Labels = make(map[string]string)
	}
	if _, ok := objToCreate.Labels[common.DISPLAY_NAME_LABEL]; !ok {
		objToCreate.Labels[common.DISPLAY_NAME_LABEL] = objToCreate.GetName()
	}

	var (
		retryCount int
		result     *basegnstsmtanzuvmwarecomv1.Foo
		err        error
	)
	retryCount = 0
	for {
		result, err = group.client.baseClient.
			GnsTsmV1().
			Foos().Create(ctx, objToCreate, metav1.CreateOptions{})
		if err != nil {
			log.Errorf("[CreateFooByName] Failed to Create Foos: %+v", err)
			if errors.IsTimeout(err) || customerrors.Is(err, context.DeadlineExceeded) {
				log.Errorf("[Retry Count: %d ] %+v", retryCount, err)
				if retryCount == maxRetryCount {
					log.Error("Max Retry exceed on Get Foos")
					return nil, err
				}
				retryCount += 1
				time.Sleep(sleepTime * time.Second)
			} else if customerrors.Is(err, context.Canceled) {
				log.Errorf("[CreateFooByName]: %+v", err)
				return nil, context.Canceled
			} else {
				log.Errorf("[CreateFooByName]: %+v", err)
				return nil, err
			}
		} else {
			break
		}
	}
	log.Debugf("[CreateFooByName] Foos created successfully: %s", objToCreate.GetName())

	parentName, ok := objToCreate.GetLabels()["gnses.gns.tsm.tanzu.vmware.com"]
	if !ok {
		parentName = helper.DEFAULT_KEY
	}
	if objToCreate.Labels[common.IS_NAME_HASHED_LABEL] == "true" {
		parentName = helper.GetHashedName("gnses.gns.tsm.tanzu.vmware.com", objToCreate.GetLabels(), parentName)
	}

	var patch Patch
	patchOp := PatchOp{
		Op:   "replace",
		Path: "/spec/fooGvk",
		Value: basegnstsmtanzuvmwarecomv1.Child{
			Group: "gns.tsm.tanzu.vmware.com",
			Kind:  "Foo",
			Name:  objToCreate.Name,
		},
	}
	patch = append(patch, patchOp)
	marshaled, err := patch.Marshal()
	if err != nil {
		return nil, err
	}
	retryCount = 0
	newCtx := context.TODO()
	for {
		_, err = group.client.baseClient.
			GnsTsmV1().
			Gnses().Patch(newCtx, parentName, types.JSONPatchType, marshaled, metav1.PatchOptions{})
		if err != nil {
			log.Errorf("[CreateFooByName] Failed to patch Foo gvk in parent node[Gnses]: %+v", err)
			if errors.IsTimeout(err) || customerrors.Is(err, context.DeadlineExceeded) {
				log.Errorf("[Retry Count: %d ] %+v", retryCount, err)
				if retryCount == maxRetryCount {
					log.Error("Max Retry exceed on patching gvk")
					log.Errorf("Trigger Foo Delete: %s", objToCreate.GetName())
					delErr := group.DeleteFooByName(newCtx, objToCreate.GetName())
					if delErr != nil {
						log.Errorf("Error occur while deleting Foo: %s", objToCreate.GetName())
						return nil, delErr
					}
					log.Errorf("Foo Deleted: %s", objToCreate.GetName())
					return nil, err
				}
				retryCount += 1
				time.Sleep(sleepTime * time.Second)
			} else if customerrors.Is(err, context.Canceled) {
				log.Errorf("[CreateFooByName]: %+v", err)
				return nil, context.Canceled
			} else {
				log.Errorf("[CreateFooByName] Unexpected Error Foo] :%+v", err)
				log.Errorf("Trigger Foo Delete: %s", objToCreate.GetName())
				delErr := group.DeleteFooByName(newCtx, objToCreate.GetName())
				if delErr != nil {
					log.Errorf("Error occur while deleting Foo: %+v", objToCreate.GetName())
					return nil, delErr
				}
				log.Errorf("Foo Deleted: %s", objToCreate.GetName())
				return nil, err
			}
		} else {
			log.Debugf("[CreateFooByName] Patch Foo Success :%s", objToCreate.GetName())
			break
		}
	}

	log.Debugf("[CreateFooByName] Executed Successfully: %s", objToCreate.GetName())
	return &GnsFoo{
		client: group.client,
		Foo:    result,
	}, nil
}

// UpdateFooByName updates object stored in the database under the hashedName which is a hash of
// display name and parents names.
func (group *GnsTsmV1) UpdateFooByName(ctx context.Context,
	objToUpdate *basegnstsmtanzuvmwarecomv1.Foo) (*GnsFoo, error) {
	log.Debugf("[UpdateFooByName] Received objToUpdate: %s", objToUpdate.GetName())

	var patch Patch

	if objToUpdate.Annotations != nil || objToUpdate.Labels != nil {
		current, err := group.client.Gns().GetFooByName(ctx, objToUpdate.Name)
		if err != nil {
			return nil, err
		}

		if objToUpdate.Annotations != nil {
			if current.Annotations[ownershipAnnotation] != "" {
				objToUpdate.Annotations[ownershipAnnotation] = current.Annotations[ownershipAnnotation]
			}
			patch = append(patch, PatchOp{
				Op:    "replace",
				Path:  "/metadata/annotations",
				Value: objToUpdate.Annotations,
			})
		}

		if objToUpdate.Labels != nil {
			parentsList := helper.GetCRDParentsMap()["foos.gns.tsm.tanzu.vmware.com"]
			for _, k := range parentsList {
				objToUpdate.Labels[k] = current.Labels[k]
			}
			objToUpdate.Labels[common.IS_NAME_HASHED_LABEL] = current.Labels[common.IS_NAME_HASHED_LABEL]
			objToUpdate.Labels[common.DISPLAY_NAME_LABEL] = current.Labels[common.DISPLAY_NAME_LABEL]
			patch = append(patch, PatchOp{
				Op:    "replace",
				Path:  "/metadata/labels",
				Value: objToUpdate.Labels,
			})
		}
	}

	var rt reflect.Type

	rt = reflect.TypeOf(objToUpdate.Spec.Password)
	if rt.Kind() == reflect.Slice || rt.Kind() == reflect.Array || rt.Kind() == reflect.Map {
		if !reflect.ValueOf(objToUpdate.Spec.Password).IsNil() {
			patchValuePassword := objToUpdate.Spec.Password
			patchOpPassword := PatchOp{
				Op:    "replace",
				Path:  "/spec/password",
				Value: patchValuePassword,
			}
			patch = append(patch, patchOpPassword)
		}
	} else {
		patchValuePassword := objToUpdate.Spec.Password
		patchOpPassword := PatchOp{
			Op:    "replace",
			Path:  "/spec/password",
			Value: patchValuePassword,
		}
		patch = append(patch, patchOpPassword)
	}

	marshaled, err := patch.Marshal()
	if err != nil {
		return nil, err
	}

	var (
		result *basegnstsmtanzuvmwarecomv1.Foo
	)
	newCtx := context.TODO()
	retryCount := 0
	for {
		result, err = group.client.baseClient.
			GnsTsmV1().
			Foos().Patch(newCtx, objToUpdate.GetName(), types.JSONPatchType, marshaled, metav1.PatchOptions{}, "")
		if err != nil {
			log.Errorf("[UpdateFooByName] Failed to patch Foo gvk in parent node[Gnses]: %+v", err)
			if errors.IsTimeout(err) || customerrors.Is(err, context.DeadlineExceeded) {
				log.Errorf("[Retry Count: %d ] %+v", retryCount, err)
				if retryCount == maxRetryCount {
					log.Error("Max Retry exceed on patching gvk")
					log.Errorf("Trigger Foo Delete: %s", objToUpdate.GetName())
					delErr := group.DeleteFooByName(newCtx, objToUpdate.GetName())
					if delErr != nil {
						log.Errorf("Error occur while deleting Foo: %s", objToUpdate.GetName())
						return nil, delErr
					}
					log.Errorf("Foo Deleted: %s", objToUpdate.GetName())
					return nil, err
				}
				retryCount += 1
				time.Sleep(sleepTime * time.Second)
			} else if customerrors.Is(err, context.Canceled) {
				log.Errorf("[CreateFooByName]: %+v", err)
				return nil, context.Canceled
			} else {
				log.Errorf("[CreateFooByName] Unexpected Error Foo] :%+v", err)
				log.Errorf("Trigger Foo Delete: %s", objToUpdate.GetName())
				delErr := group.DeleteFooByName(newCtx, objToUpdate.GetName())
				if delErr != nil {
					log.Errorf("Error occur while deleting Foo: %+v", objToUpdate.GetName())
					return nil, delErr
				}
				log.Errorf("Foo Deleted: %s", objToUpdate.GetName())
				return nil, err
			}
		} else {
			log.Debugf("[CreateFooByName] Patch Foo Success :%s", objToUpdate.GetName())
			break
		}
	}
	log.Debugf("[UpdateFooByName] Executed Successfully %s", objToUpdate.GetName())
	return &GnsFoo{
		client: group.client,
		Foo:    result,
	}, nil
}

// ListFoos returns slice of all existing objects of this type. Selectors can be provided in opts parameter.
func (group *GnsTsmV1) ListFoos(ctx context.Context,
	opts metav1.ListOptions) (result []*GnsFoo, err error) {
	key := "foos.gns.tsm.tanzu.vmware.com"
	if s, ok := subscriptionMap.Load(key); ok {
		items := s.(subscription).informer.GetStore().List()
		result = make([]*GnsFoo, len(items))
		for k, v := range items {
			item, _ := v.(*basegnstsmtanzuvmwarecomv1.Foo)
			result[k] = &GnsFoo{
				client: group.client,
				Foo:    item,
			}
		}
	} else {
		list, err := group.client.baseClient.GnsTsmV1().
			Foos().List(ctx, opts)
		if err != nil {
			return nil, err
		}
		result = make([]*GnsFoo, len(list.Items))
		for k, v := range list.Items {
			item := v
			result[k] = &GnsFoo{
				client: group.client,
				Foo:    &item,
			}
		}
	}
	return
}

type GnsFoo struct {
	client *Clientset
	*basegnstsmtanzuvmwarecomv1.Foo
}

// Delete removes obj and all it's children from the database.
func (obj *GnsFoo) Delete(ctx context.Context) error {
	err := obj.client.Gns().DeleteFooByName(ctx, obj.GetName())
	if err != nil {
		return err
	}
	obj.Foo = nil
	return nil
}

// Update updates spec of object in database. Children and Link can not be updated using this function.
func (obj *GnsFoo) Update(ctx context.Context) error {
	result, err := obj.client.Gns().UpdateFooByName(ctx, obj.Foo)
	if err != nil {
		return err
	}
	obj.Foo = result.Foo
	return nil
}

func (obj *GnsFoo) GetParent(ctx context.Context) (result *GnsGns, err error) {
	hashedName := helper.GetHashedName("gnses.gns.tsm.tanzu.vmware.com", obj.Labels, obj.Labels["gnses.gns.tsm.tanzu.vmware.com"])
	return obj.client.Gns().GetGnsByName(ctx, hashedName)
}

type fooGnsTsmV1Chainer struct {
	client       *Clientset
	name         string
	parentLabels map[string]string
}

func (c *fooGnsTsmV1Chainer) Subscribe() {
	key := "foos.gns.tsm.tanzu.vmware.com"
	if _, ok := subscriptionMap.Load(key); !ok {
		informer := informergnstsmtanzuvmwarecomv1.NewFooInformer(c.client.baseClient, 0, cache.Indexers{})
		subscribe(key, informer)
	}
}

func (c *fooGnsTsmV1Chainer) Unsubscribe() {
	key := "foos.gns.tsm.tanzu.vmware.com"
	if s, ok := subscriptionMap.Load(key); ok {
		close(s.(subscription).stop)
		subscriptionMap.Delete(key)
	}
}

func (c *fooGnsTsmV1Chainer) IsSubscribed() bool {
	key := "foos.gns.tsm.tanzu.vmware.com"
	_, ok := subscriptionMap.Load(key)
	return ok
}

func (c *fooGnsTsmV1Chainer) RegisterEventHandler(addCB func(obj *GnsFoo), updateCB func(oldObj, newObj *GnsFoo), deleteCB func(obj *GnsFoo)) (cache.ResourceEventHandlerRegistration, error) {
	fmt.Println("RegisterEventHandler for GnsFoo")
	var (
		registrationId cache.ResourceEventHandlerRegistration
		err            error
		informer       cache.SharedIndexInformer
	)
	key := "foos.gns.tsm.tanzu.vmware.com"
	stopper := make(chan struct{})
	if s, ok := subscriptionMap.Load(key); ok {
		fmt.Println("Informer exists for GnsFoo")
		sub := s.(subscription)
		informer = sub.informer
	} else {
		fmt.Println("Informer doesn't exists for GnsFoo, so creating a new one")
		informer = informergnstsmtanzuvmwarecomv1.NewFooInformer(c.client.baseClient, 0, cache.Indexers{})
		go informer.Run(stopper)
		subscribe(key, informer)
	}
	registrationId, err = informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
		AddFunc: func(obj interface{}) {
			nc := &GnsFoo{
				client: c.client,
				Foo:    obj.(*basegnstsmtanzuvmwarecomv1.Foo),
			}

			var parent *GnsGns
			gvkExist := false
			for i := 0; i < 600; i++ {
				// Check if parent exists
				p, err := nc.GetParent(context.TODO())
				if err != nil || p == nil {
					time.Sleep(500 * time.Millisecond)
					continue
				}
				parent = p
				// Check GVK

				if parent.Spec.FooGvk == nil {
					time.Sleep(500 * time.Millisecond)
					continue
				}

				gvkExist = true
				break
			}
			if parent == nil {
				hashedName := helper.GetHashedName("gnses.gns.tsm.tanzu.vmware.com", nc.Labels, nc.Labels["gnses.gns.tsm.tanzu.vmware.com"])
				parent, err = c.client.Gns().ForceReadGnsByName(context.TODO(), hashedName)
				if err != nil {
					if errors.IsNotFound(err) {
						return
					}
					panic("error occurred while fetching parent " + err.Error())
				}
				panic(fmt.Sprintf("parent found (event loop is stalled) " + nc.DisplayName()))
			}
			if !gvkExist {
				// Check GVK

				if parent.Spec.FooGvk == nil {
					return
				}

				panic(fmt.Sprintf("gvk found (event loop is stalled) " + nc.DisplayName()))
			}

			addCB(nc)
		},

		UpdateFunc: func(oldObj, newObj interface{}) {
			oldData := &GnsFoo{
				client: c.client,
				Foo:    oldObj.(*basegnstsmtanzuvmwarecomv1.Foo),
			}
			newData := &GnsFoo{
				client: c.client,
				Foo:    newObj.(*basegnstsmtanzuvmwarecomv1.Foo),
			}
			updateCB(oldData, newData)
		},

		DeleteFunc: func(obj interface{}) {
			nc := &GnsFoo{
				client: c.client,
				Foo:    obj.(*basegnstsmtanzuvmwarecomv1.Foo),
			}

			var parent *GnsGns
			gvkExist := true
			for i := 0; i < 600; i++ {
				// Check if parent exists
				p, err := nc.GetParent(context.TODO())
				if err != nil || p == nil {
					time.Sleep(500 * time.Millisecond)
					continue
				}
				parent = p
				// Check GVK

				if parent.Spec.FooGvk != nil {
					time.Sleep(500 * time.Millisecond)
					continue
				}

				gvkExist = false
				break
			}
			if parent == nil {
				hashedName := helper.GetHashedName("gnses.gns.tsm.tanzu.vmware.com", nc.Labels, nc.Labels["gnses.gns.tsm.tanzu.vmware.com"])
				parent, err = c.client.Gns().ForceReadGnsByName(context.TODO(), hashedName)
				if err != nil {
					if errors.IsNotFound(err) {
						return
					}
					panic("error occurred while fetching parent " + err.Error())
				}
				panic(fmt.Sprintf("parent found (event loop is stalled) " + nc.DisplayName()))
			}
			if gvkExist {
				// Check GVK

				if parent.Spec.FooGvk != nil {
					return
				}

				panic(fmt.Sprintf("gvk not found (event loop is stalled) " + nc.DisplayName()))
			}

			deleteCB(nc)
		},
	})
	return registrationId, err
}

func (c *fooGnsTsmV1Chainer) RegisterAddCallback(cbfn func(obj *GnsFoo)) (cache.ResourceEventHandlerRegistration, error) {
	log.Debugf("[RegisterAddCallback] Received for GnsFoo")
	var (
		registrationId cache.ResourceEventHandlerRegistration
		err            error
	)
	key := "foos.gns.tsm.tanzu.vmware.com"
	stopper := make(chan struct{})
	if s, ok := subscriptionMap.Load(key); ok {
		log.Debugf("[RegisterAddCallback] GnsFoo Use Subscription Informer")
		sub := s.(subscription)
		registrationId, err = sub.informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
			AddFunc: func(obj interface{}) {
				nc := &GnsFoo{
					client: c.client,
					Foo:    obj.(*basegnstsmtanzuvmwarecomv1.Foo),
				}

				var parent *GnsGns
				gvkExist := false
				for i := 0; i < 600; i++ {
					// Check if parent exists
					p, err := nc.GetParent(context.TODO())
					if err != nil || p == nil {
						time.Sleep(500 * time.Millisecond)
						continue
					}
					parent = p

					// Check GVK

					if parent.Spec.FooGvk == nil {
						time.Sleep(500 * time.Millisecond)
						continue
					}

					gvkExist = true

					break
				}

				if parent == nil {
					hashedName := helper.GetHashedName("gnses.gns.tsm.tanzu.vmware.com", nc.Labels, nc.Labels["gnses.gns.tsm.tanzu.vmware.com"])
					parent, err = c.client.Gns().ForceReadGnsByName(context.TODO(), hashedName)
					if err != nil {
						if errors.IsNotFound(err) {
							return
						}

						panic("error occurred while fetching parent " + err.Error())
					}
					panic(fmt.Sprintf("parent found (event loop is stalled) " + nc.DisplayName()))
				}

				if !gvkExist {
					// Check GVK

					if parent.Spec.FooGvk == nil {
						return
					}

					panic(fmt.Sprintf("gvk found (event loop is stalled) " + nc.DisplayName()))
				}

				cbfn(nc)
			},
		})
	} else {
		log.Debugf("[RegisterAddCallback] GnsFoo Create New Informer")
		informer := informergnstsmtanzuvmwarecomv1.NewFooInformer(c.client.baseClient, 0, cache.Indexers{})
		registrationId, err = informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
			AddFunc: func(obj interface{}) {
				nc := &GnsFoo{
					client: c.client,
					Foo:    obj.(*basegnstsmtanzuvmwarecomv1.Foo),
				}

				var parent *GnsGns
				gvkExist := false
				for i := 0; i < 600; i++ {
					// Check if parent exists
					p, err := nc.GetParent(context.TODO())
					if err != nil || p == nil {
						time.Sleep(500 * time.Millisecond)
						continue
					}
					parent = p

					// Check GVK

					if parent.Spec.FooGvk == nil {
						time.Sleep(500 * time.Millisecond)
						continue
					}

					gvkExist = true

					break
				}

				if parent == nil {
					hashedName := helper.GetHashedName("gnses.gns.tsm.tanzu.vmware.com", nc.Labels, nc.Labels["gnses.gns.tsm.tanzu.vmware.com"])
					parent, err = c.client.Gns().ForceReadGnsByName(context.TODO(), hashedName)
					if err != nil {
						if errors.IsNotFound(err) {
							return
						}

						panic("error occurred while fetching parent " + err.Error())
					}
					panic(fmt.Sprintf("parent found (event loop is stalled) " + nc.DisplayName()))
				}

				if !gvkExist {
					// Check GVK

					if parent.Spec.FooGvk == nil {
						return
					}

					panic(fmt.Sprintf("gvk found (event loop is stalled) " + nc.DisplayName()))
				}

				cbfn(nc)
			},
		})
		go informer.Run(stopper)
	}
	return registrationId, err
}

func (c *fooGnsTsmV1Chainer) RegisterUpdateCallback(cbfn func(oldObj, newObj *GnsFoo)) (cache.ResourceEventHandlerRegistration, error) {
	log.Debugf("[RegisterUpdateCallback] Received for GnsFoo")
	var (
		registrationId cache.ResourceEventHandlerRegistration
		err            error
	)
	key := "foos.gns.tsm.tanzu.vmware.com"
	stopper := make(chan struct{})
	if s, ok := subscriptionMap.Load(key); ok {
		log.Debugf("[RegisterUpdateCallback] GnsFoo Use Subscription Informer")
		sub := s.(subscription)
		registrationId, err = sub.informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
			UpdateFunc: func(oldObj, newObj interface{}) {
				oldData := &GnsFoo{
					client: c.client,
					Foo:    oldObj.(*basegnstsmtanzuvmwarecomv1.Foo),
				}
				newData := &GnsFoo{
					client: c.client,
					Foo:    newObj.(*basegnstsmtanzuvmwarecomv1.Foo),
				}
				cbfn(oldData, newData)
			},
		})
	} else {
		log.Debugf("[RegisterUpdateCallback] GnsFoo Create New Informer")
		informer := informergnstsmtanzuvmwarecomv1.NewFooInformer(c.client.baseClient, 0, cache.Indexers{})
		registrationId, err = informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
			UpdateFunc: func(oldObj, newObj interface{}) {
				oldData := &GnsFoo{
					client: c.client,
					Foo:    oldObj.(*basegnstsmtanzuvmwarecomv1.Foo),
				}
				newData := &GnsFoo{
					client: c.client,
					Foo:    newObj.(*basegnstsmtanzuvmwarecomv1.Foo),
				}
				cbfn(oldData, newData)
			},
		})
		go informer.Run(stopper)
	}
	return registrationId, err
}

func (c *fooGnsTsmV1Chainer) RegisterDeleteCallback(cbfn func(obj *GnsFoo)) (cache.ResourceEventHandlerRegistration, error) {
	log.Debugf("[RegisterDeleteCallback] Received for GnsFoo")
	var (
		registrationId cache.ResourceEventHandlerRegistration
		err            error
	)
	key := "foos.gns.tsm.tanzu.vmware.com"
	stopper := make(chan struct{})
	if s, ok := subscriptionMap.Load(key); ok {
		log.Debugf("[RegisterDeleteCallback] GnsFoo Use Subscription Informer")
		sub := s.(subscription)
		registrationId, err = sub.informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
			DeleteFunc: func(obj interface{}) {
				nc := &GnsFoo{
					client: c.client,
					Foo:    obj.(*basegnstsmtanzuvmwarecomv1.Foo),
				}

				var parent *GnsGns
				gvkExist := true
				for i := 0; i < 600; i++ {
					// Check if parent exists
					p, err := nc.GetParent(context.TODO())
					if err != nil || p == nil {
						time.Sleep(500 * time.Millisecond)
						continue
					}
					parent = p

					// Check GVK

					if parent.Spec.FooGvk != nil {
						time.Sleep(500 * time.Millisecond)
						continue
					}

					gvkExist = false
					break
				}

				if parent == nil {
					hashedName := helper.GetHashedName("gnses.gns.tsm.tanzu.vmware.com", nc.Labels, nc.Labels["gnses.gns.tsm.tanzu.vmware.com"])
					parent, err = c.client.Gns().ForceReadGnsByName(context.TODO(), hashedName)
					if err != nil {
						if errors.IsNotFound(err) {
							return
						}

						panic("error occurred while fetching parent " + err.Error())
					}
					panic(fmt.Sprintf("parent found (event loop is stalled) " + nc.DisplayName()))
				}

				if gvkExist {
					// Check GVK

					if parent.Spec.FooGvk != nil {
						return
					}

					panic(fmt.Sprintf("gvk not found (event loop is stalled) " + nc.DisplayName()))
				}

				cbfn(nc)
			},
		})
	} else {
		log.Debugf("[RegisterDeleteCallback] GnsFoo Create New Informer")
		informer := informergnstsmtanzuvmwarecomv1.NewFooInformer(c.client.baseClient, 0, cache.Indexers{})
		registrationId, err = informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
			DeleteFunc: func(obj interface{}) {
				nc := &GnsFoo{
					client: c.client,
					Foo:    obj.(*basegnstsmtanzuvmwarecomv1.Foo),
				}

				var parent *GnsGns
				gvkExist := true
				for i := 0; i < 600; i++ {
					// Check if parent exists
					p, err := nc.GetParent(context.TODO())
					if err != nil || p == nil {
						time.Sleep(500 * time.Millisecond)
						continue
					}
					parent = p

					// Check GVK

					if parent.Spec.FooGvk != nil {
						time.Sleep(500 * time.Millisecond)
						continue
					}

					gvkExist = false

					break
				}

				if parent == nil {
					hashedName := helper.GetHashedName("gnses.gns.tsm.tanzu.vmware.com", nc.Labels, nc.Labels["gnses.gns.tsm.tanzu.vmware.com"])
					parent, err = c.client.Gns().ForceReadGnsByName(context.TODO(), hashedName)
					if err != nil {
						if errors.IsNotFound(err) {
							return
						}

						panic("error occurred while fetching parent " + err.Error())
					}
					panic(fmt.Sprintf("parent found (event loop is stalled) " + nc.DisplayName()))
				}

				if gvkExist {
					// Check GVK

					if parent.Spec.FooGvk != nil {
						return
					}

					panic(fmt.Sprintf("gvk not found (event loop is stalled) " + nc.DisplayName()))
				}

				cbfn(nc)
			},
		})
		go informer.Run(stopper)
	}
	return registrationId, err
}

// GetGnsByName returns object stored in the database under the hashedName which is a hash of display
// name and parents names. Use it when you know hashed name of object.
func (group *GnsTsmV1) GetGnsByName(ctx context.Context, hashedName string) (*GnsGns, error) {
	key := "gnses.gns.tsm.tanzu.vmware.com"
	if s, ok := subscriptionMap.Load(key); ok {
		log.Debugf("[GetGnsByName] GetObject: %s from cache", hashedName)
		item, exists, err := s.(subscription).informer.GetStore().GetByKey(hashedName)
		if !exists {
			return nil, err
		}

		log.Debugf("[GetGnsByName] Object: %s exists in cache", hashedName)
		result, _ := item.(*basegnstsmtanzuvmwarecomv1.Gns)
		return &GnsGns{
			client: group.client,
			Gns:    result,
		}, nil
	} else {
		retryCount := 0
		for {
			result, err := group.client.baseClient.
				GnsTsmV1().
				Gnses().Get(ctx, hashedName, metav1.GetOptions{})
			if err != nil {
				log.Errorf("[GetGnsByName] Failed to Get Gnses: %+v", err)
				if errors.IsTimeout(err) || customerrors.Is(err, context.DeadlineExceeded) {
					log.Errorf("[Retry Count: %d ] %+v", retryCount, err)
					if retryCount == maxRetryCount {
						log.Error("Max Retry exceed on Get Gnses")
						return nil, err
					}
					retryCount += 1
					time.Sleep(sleepTime * time.Second)
				} else if customerrors.Is(err, context.Canceled) {
					log.Errorf("[GetGnsByName]: %+v", err)
					return nil, context.Canceled
				} else {
					log.Errorf("[GetGnsByName]: %+v", err)
					return nil, err
				}
			} else {
				return &GnsGns{
					client: group.client,
					Gns:    result,
				}, nil
			}
		}
	}
}

// ForceReadGnsByName read object directly from the database under the hashedName which is a hash of display
// name and parents names. Use it when you know hashed name of object.
func (group *GnsTsmV1) ForceReadGnsByName(ctx context.Context, hashedName string) (*GnsGns, error) {
	log.Debugf("[ForceReadGnsByName] Received object :%s to read from DB", hashedName)
	retryCount := 0
	for {
		result, err := group.client.baseClient.
			GnsTsmV1().
			Gnses().Get(ctx, hashedName, metav1.GetOptions{})
		if err != nil {
			log.Errorf("[ForceReadGnsByName] Failed to Get Gnses: %+v", err)
			if errors.IsTimeout(err) || customerrors.Is(err, context.DeadlineExceeded) {
				log.Errorf("[Retry Count: %d ] %+v", retryCount, err)
				if retryCount == maxRetryCount {
					log.Error("Max Retry exceed on Get Gnses")
					return nil, err
				}
				retryCount += 1
				time.Sleep(sleepTime * time.Second)
			} else if customerrors.Is(err, context.Canceled) {
				log.Errorf("[ForceReadGnsByName]: %+v", err)
				return nil, context.Canceled
			} else {
				log.Errorf("[ForceReadGnsByName]: %+v", err)
				return nil, err
			}
		} else {
			log.Debugf("[ForceReadGnsByName] Executed Successfully :%s", hashedName)
			return &GnsGns{
				client: group.client,
				Gns:    result,
			}, nil
		}
	}
}

// DeleteGnsByName deletes object stored in the database under the hashedName which is a hash of
// display name and parents names. Use it when you know hashed name of object.
func (group *GnsTsmV1) DeleteGnsByName(ctx context.Context, hashedName string) (err error) {
	log.Debugf("[DeleteGnsByName] Received objectToDelete: %s", hashedName)

	var (
		retryCount int
		result     *basegnstsmtanzuvmwarecomv1.Gns
	)
	retryCount = 0
	for {
		result, err = group.client.baseClient.
			GnsTsmV1().
			Gnses().Get(ctx, hashedName, metav1.GetOptions{})
		if err != nil {
			log.Errorf("[DeleteGnsByName] Failed to Get Gnses: %+v", err)
			if errors.IsTimeout(err) || customerrors.Is(err, context.DeadlineExceeded) {
				log.Errorf("[Retry Count: %d ] %+v", retryCount, err)
				if retryCount == maxRetryCount {
					log.Error("Max Retry exceed on Get Gnses")
					return err
				}
				retryCount += 1
				time.Sleep(sleepTime * time.Second)
			} else if customerrors.Is(err, context.Canceled) {
				log.Errorf("[DeleteGnsByName]: %+v", err)
				return context.Canceled
			} else if errors.IsNotFound(err) {
				log.Errorf("[DeleteGnsByName] Object Notfound: %+v", err)
				break
			} else {
				log.Errorf("[DeleteGnsByName]: %+v", err)
				return err
			}
		} else {
			break
		}
	}

	for _, v := range result.Spec.GnsServiceGroupsGvk {
		err := group.client.
			Servicegroup().DeleteSvcGroupByName(ctx, v.Name)
		if err != nil {
			if errors.IsNotFound(err) {
				continue
			} else {
				return err
			}
		}
	}

	if result.Spec.GnsAccessControlPolicyGvk != nil {
		err := group.client.
			Policypkg().
			DeleteAccessControlPolicyByName(ctx, result.Spec.GnsAccessControlPolicyGvk.Name)
		if err != nil && !errors.IsNotFound(err) {
			return err
		}
	}

	if result.Spec.FooChildGvk != nil {
		err := group.client.
			Gns().
			DeleteBarChildByName(ctx, result.Spec.FooChildGvk.Name)
		if err != nil && !errors.IsNotFound(err) {
			return err
		}
	}

	if result.Spec.IgnoreChildGvk != nil {
		err := group.client.
			Gns().
			DeleteIgnoreChildByName(ctx, result.Spec.IgnoreChildGvk.Name)
		if err != nil && !errors.IsNotFound(err) {
			return err
		}
	}

	if result.Spec.FooGvk != nil {
		err := group.client.
			Gns().
			DeleteFooByName(ctx, result.Spec.FooGvk.Name)
		if err != nil && !errors.IsNotFound(err) {
			return err
		}
	}

	retryCount = 0
	for {
		err = group.client.baseClient.
			GnsTsmV1().
			Gnses().Delete(ctx, hashedName, metav1.DeleteOptions{})
		if err != nil {
			log.Errorf("[DeleteGnsByName] failed to delete Gnses: %+v", err)
			if errors.IsTimeout(err) || customerrors.Is(err, context.DeadlineExceeded) {
				log.Errorf("[Retry Count: %d ] %+v", retryCount, err)
				if retryCount == maxRetryCount {
					log.Error("Max retry exceed on delete Gnses")
					return err
				}
				retryCount += 1
				time.Sleep(sleepTime * time.Second)
			} else if customerrors.Is(err, context.Canceled) {
				log.Errorf("[DeleteGnsByName]: %+v", err)
				return context.Canceled
			} else if errors.IsNotFound(err) {
				log.Errorf("[DeleteGnsByName] Object not found: %+v", err)
				break
			} else {
				log.Errorf("[DeleteGnsByName]: %+v", err)
				return err
			}
		}
	}
	// Get Parent Node and check if gvk present before patch

	var gvkPresent bool
	log.Debugf("[DeleteGnsByName] Get Parent details")
	var patch Patch
	parents := result.GetLabels()
	if parents == nil {
		parents = make(map[string]string)
	}
	parentName, ok := parents["configs.config.tsm.tanzu.vmware.com"]
	if !ok {
		parentName = helper.DEFAULT_KEY
	}
	if result.GetLabels() != nil {
		if parents[common.IS_NAME_HASHED_LABEL] == "true" {
			parentName = helper.GetHashedName("configs.config.tsm.tanzu.vmware.com", parents, parentName)
		}
	} else {
		parentName = helper.GetHashedName("configs.config.tsm.tanzu.vmware.com", parents, parentName)
	}
	parentData, err := group.client.baseClient.
		ConfigTsmV1().
		Configs().Get(ctx, parentName, metav1.GetOptions{})
	if err != nil {
		log.Errorf("[DeleteGnsByName] Failed to get Parent node: %+v", err)
		if errors.IsNotFound(err) {
			return nil
		} else {
			return err
		}
	}

	if parentData.Spec.GNSGvk != nil {
		log.Debugf("[DeleteGnsByName] GVK present in parent for node: %s", hashedName)
		gvkPresent = true
	}

	if gvkPresent {

		patchOp := PatchOp{
			Op:   "remove",
			Path: "/spec/gNSGvk",
		}

		patch = append(patch, patchOp)
		marshaled, err := patch.Marshal()
		if err != nil {
			return err
		}

		retryCount = 0
		newCtx := context.TODO()
		for {
			_, err = group.client.baseClient.
				ConfigTsmV1().
				Configs().Patch(newCtx, parentName, types.JSONPatchType, marshaled, metav1.PatchOptions{})
			if err != nil {
				log.Errorf("Failed to patch Gns gvk in parent node[Configs]: %+v", err)
				if errors.IsTimeout(err) || customerrors.Is(err, context.DeadlineExceeded) {
					log.Errorf("[Retry Count: %d ] %+v", retryCount, err)
					if retryCount == maxRetryCount {
						log.Error("Max Retry exceed on patching gvk")
						return err
					}
					retryCount += 1
					time.Sleep(sleepTime * time.Second)
				} else if customerrors.Is(err, context.Canceled) {
					log.Errorf("[DeleteGnsByName]: %+v", err)
					return context.Canceled
				} else {
					log.Errorf("Unexpected Error occur Gns]: %+v", err)
					return err
				}
			} else {
				log.Debugf("[DeleteGnsByName] Patch Gns Success: %s", hashedName)
				break
			}
		}
		log.Debugf("[DeleteGnsByName] Executed Successfully: %s", hashedName)
	}

	return
}

// CreateGnsByName creates object in the database without hashing the name.
// Use it directly ONLY when objToCreate.Name is hashed name of the object.
func (group *GnsTsmV1) CreateGnsByName(ctx context.Context,
	objToCreate *basegnstsmtanzuvmwarecomv1.Gns) (*GnsGns, error) {
	log.Debugf("[CreateGnsByName] Received objToCreate: %s", objToCreate.GetName())
	if objToCreate.GetLabels() == nil {
		objToCreate.Labels = make(map[string]string)
	}
	if _, ok := objToCreate.Labels[common.DISPLAY_NAME_LABEL]; !ok {
		objToCreate.Labels[common.DISPLAY_NAME_LABEL] = objToCreate.GetName()
	}

	objToCreate.Spec.GnsServiceGroupsGvk = nil
	objToCreate.Spec.GnsAccessControlPolicyGvk = nil
	objToCreate.Spec.FooChildGvk = nil
	objToCreate.Spec.IgnoreChildGvk = nil
	objToCreate.Spec.FooGvk = nil
	objToCreate.Spec.DnsGvk = nil

	var (
		retryCount int
		result     *basegnstsmtanzuvmwarecomv1.Gns
		err        error
	)
	retryCount = 0
	for {
		result, err = group.client.baseClient.
			GnsTsmV1().
			Gnses().Create(ctx, objToCreate, metav1.CreateOptions{})
		if err != nil {
			log.Errorf("[CreateGnsByName] Failed to Create Gnses: %+v", err)
			if errors.IsTimeout(err) || customerrors.Is(err, context.DeadlineExceeded) {
				log.Errorf("[Retry Count: %d ] %+v", retryCount, err)
				if retryCount == maxRetryCount {
					log.Error("Max Retry exceed on Get Gnses")
					return nil, err
				}
				retryCount += 1
				time.Sleep(sleepTime * time.Second)
			} else if customerrors.Is(err, context.Canceled) {
				log.Errorf("[CreateGnsByName]: %+v", err)
				return nil, context.Canceled
			} else {
				log.Errorf("[CreateGnsByName]: %+v", err)
				return nil, err
			}
		} else {
			break
		}
	}
	log.Debugf("[CreateGnsByName] Gnses created successfully: %s", objToCreate.GetName())

	parentName, ok := objToCreate.GetLabels()["configs.config.tsm.tanzu.vmware.com"]
	if !ok {
		parentName = helper.DEFAULT_KEY
	}
	if objToCreate.Labels[common.IS_NAME_HASHED_LABEL] == "true" {
		parentName = helper.GetHashedName("configs.config.tsm.tanzu.vmware.com", objToCreate.GetLabels(), parentName)
	}

	var patch Patch
	patchOp := PatchOp{
		Op:   "replace",
		Path: "/spec/gNSGvk",
		Value: basegnstsmtanzuvmwarecomv1.Child{
			Group: "gns.tsm.tanzu.vmware.com",
			Kind:  "Gns",
			Name:  objToCreate.Name,
		},
	}
	patch = append(patch, patchOp)
	marshaled, err := patch.Marshal()
	if err != nil {
		return nil, err
	}
	retryCount = 0
	newCtx := context.TODO()
	for {
		_, err = group.client.baseClient.
			ConfigTsmV1().
			Configs().Patch(newCtx, parentName, types.JSONPatchType, marshaled, metav1.PatchOptions{})
		if err != nil {
			log.Errorf("[CreateGnsByName] Failed to patch Gns gvk in parent node[Configs]: %+v", err)
			if errors.IsTimeout(err) || customerrors.Is(err, context.DeadlineExceeded) {
				log.Errorf("[Retry Count: %d ] %+v", retryCount, err)
				if retryCount == maxRetryCount {
					log.Error("Max Retry exceed on patching gvk")
					log.Errorf("Trigger Gns Delete: %s", objToCreate.GetName())
					delErr := group.DeleteGnsByName(newCtx, objToCreate.GetName())
					if delErr != nil {
						log.Errorf("Error occur while deleting Gns: %s", objToCreate.GetName())
						return nil, delErr
					}
					log.Errorf("Gns Deleted: %s", objToCreate.GetName())
					return nil, err
				}
				retryCount += 1
				time.Sleep(sleepTime * time.Second)
			} else if customerrors.Is(err, context.Canceled) {
				log.Errorf("[CreateGnsByName]: %+v", err)
				return nil, context.Canceled
			} else {
				log.Errorf("[CreateGnsByName] Unexpected Error Gns] :%+v", err)
				log.Errorf("Trigger Gns Delete: %s", objToCreate.GetName())
				delErr := group.DeleteGnsByName(newCtx, objToCreate.GetName())
				if delErr != nil {
					log.Errorf("Error occur while deleting Gns: %+v", objToCreate.GetName())
					return nil, delErr
				}
				log.Errorf("Gns Deleted: %s", objToCreate.GetName())
				return nil, err
			}
		} else {
			log.Debugf("[CreateGnsByName] Patch Gns Success :%s", objToCreate.GetName())
			break
		}
	}

	log.Debugf("[CreateGnsByName] Executed Successfully: %s", objToCreate.GetName())
	return &GnsGns{
		client: group.client,
		Gns:    result,
	}, nil
}

// SetGnsStateByName sets user defined status
func (group *GnsTsmV1) SetGnsStateByName(ctx context.Context,
	objToUpdate *basegnstsmtanzuvmwarecomv1.Gns, status *basegnstsmtanzuvmwarecomv1.GnsState) (*GnsGns, error) {
	log.Debugf("[SetGnsStateByName] Received objToUpdate:%s", objToUpdate.GetName())
	// Make sure status field is present first
	m := []byte("{\"status\":{}}")
	result, err := group.client.baseClient.
		GnsTsmV1().
		Gnses().Patch(ctx, objToUpdate.GetName(), types.MergePatchType, m, metav1.PatchOptions{}, "status")
	if err != nil {
		return nil, err
	}

	patch := Patch{
		PatchOp{
			Op:    "replace",
			Path:  "/status/state",
			Value: status,
		},
	}
	marshaled, err := patch.Marshal()
	if err != nil {
		return nil, err
	}
	result, err = group.client.baseClient.
		GnsTsmV1().
		Gnses().Patch(ctx, objToUpdate.GetName(), types.JSONPatchType, marshaled, metav1.PatchOptions{}, "status")
	if err != nil {
		return nil, err
	}
	log.Debugf("[SetGnsStateByName] Patch Gnses Success: %s", objToUpdate.GetName())
	return &GnsGns{
		client: group.client,
		Gns:    result,
	}, nil
}

// UpdateGnsByName updates object stored in the database under the hashedName which is a hash of
// display name and parents names.
func (group *GnsTsmV1) UpdateGnsByName(ctx context.Context,
	objToUpdate *basegnstsmtanzuvmwarecomv1.Gns) (*GnsGns, error) {
	log.Debugf("[UpdateGnsByName] Received objToUpdate: %s", objToUpdate.GetName())

	var patch Patch

	if objToUpdate.Annotations != nil || objToUpdate.Labels != nil {
		current, err := group.client.Gns().GetGnsByName(ctx, objToUpdate.Name)
		if err != nil {
			return nil, err
		}

		if objToUpdate.Annotations != nil {
			if current.Annotations[ownershipAnnotation] != "" {
				objToUpdate.Annotations[ownershipAnnotation] = current.Annotations[ownershipAnnotation]
			}
			patch = append(patch, PatchOp{
				Op:    "replace",
				Path:  "/metadata/annotations",
				Value: objToUpdate.Annotations,
			})
		}

		if objToUpdate.Labels != nil {
			parentsList := helper.GetCRDParentsMap()["gnses.gns.tsm.tanzu.vmware.com"]
			for _, k := range parentsList {
				objToUpdate.Labels[k] = current.Labels[k]
			}
			objToUpdate.Labels[common.IS_NAME_HASHED_LABEL] = current.Labels[common.IS_NAME_HASHED_LABEL]
			objToUpdate.Labels[common.DISPLAY_NAME_LABEL] = current.Labels[common.DISPLAY_NAME_LABEL]
			patch = append(patch, PatchOp{
				Op:    "replace",
				Path:  "/metadata/labels",
				Value: objToUpdate.Labels,
			})
		}
	}

	var rt reflect.Type

	rt = reflect.TypeOf(objToUpdate.Spec.Domain)
	if rt.Kind() == reflect.Slice || rt.Kind() == reflect.Array || rt.Kind() == reflect.Map {
		if !reflect.ValueOf(objToUpdate.Spec.Domain).IsNil() {
			patchValueDomain := objToUpdate.Spec.Domain
			patchOpDomain := PatchOp{
				Op:    "replace",
				Path:  "/spec/domain",
				Value: patchValueDomain,
			}
			patch = append(patch, patchOpDomain)
		}
	} else {
		patchValueDomain := objToUpdate.Spec.Domain
		patchOpDomain := PatchOp{
			Op:    "replace",
			Path:  "/spec/domain",
			Value: patchValueDomain,
		}
		patch = append(patch, patchOpDomain)
	}

	rt = reflect.TypeOf(objToUpdate.Spec.UseSharedGateway)
	if rt.Kind() == reflect.Slice || rt.Kind() == reflect.Array || rt.Kind() == reflect.Map {
		if !reflect.ValueOf(objToUpdate.Spec.UseSharedGateway).IsNil() {
			patchValueUseSharedGateway := objToUpdate.Spec.UseSharedGateway
			patchOpUseSharedGateway := PatchOp{
				Op:    "replace",
				Path:  "/spec/useSharedGateway",
				Value: patchValueUseSharedGateway,
			}
			patch = append(patch, patchOpUseSharedGateway)
		}
	} else {
		patchValueUseSharedGateway := objToUpdate.Spec.UseSharedGateway
		patchOpUseSharedGateway := PatchOp{
			Op:    "replace",
			Path:  "/spec/useSharedGateway",
			Value: patchValueUseSharedGateway,
		}
		patch = append(patch, patchOpUseSharedGateway)
	}

	rt = reflect.TypeOf(objToUpdate.Spec.Annotations)
	if rt.Kind() == reflect.Slice || rt.Kind() == reflect.Array || rt.Kind() == reflect.Map {
		if !reflect.ValueOf(objToUpdate.Spec.Annotations).IsNil() {
			patchValueAnnotations := objToUpdate.Spec.Annotations
			patchOpAnnotations := PatchOp{
				Op:    "replace",
				Path:  "/spec/annotations",
				Value: patchValueAnnotations,
			}
			patch = append(patch, patchOpAnnotations)
		}
	} else {
		patchValueAnnotations := objToUpdate.Spec.Annotations
		patchOpAnnotations := PatchOp{
			Op:    "replace",
			Path:  "/spec/annotations",
			Value: patchValueAnnotations,
		}
		patch = append(patch, patchOpAnnotations)
	}

	rt = reflect.TypeOf(objToUpdate.Spec.TargetPort)
	if rt.Kind() == reflect.Slice || rt.Kind() == reflect.Array || rt.Kind() == reflect.Map {
		if !reflect.ValueOf(objToUpdate.Spec.TargetPort).IsNil() {
			patchValueTargetPort := objToUpdate.Spec.TargetPort
			patchOpTargetPort := PatchOp{
				Op:    "replace",
				Path:  "/spec/targetPort",
				Value: patchValueTargetPort,
			}
			patch = append(patch, patchOpTargetPort)
		}
	} else {
		patchValueTargetPort := objToUpdate.Spec.TargetPort
		patchOpTargetPort := PatchOp{
			Op:    "replace",
			Path:  "/spec/targetPort",
			Value: patchValueTargetPort,
		}
		patch = append(patch, patchOpTargetPort)
	}

	rt = reflect.TypeOf(objToUpdate.Spec.Description)
	if rt.Kind() == reflect.Slice || rt.Kind() == reflect.Array || rt.Kind() == reflect.Map {
		if !reflect.ValueOf(objToUpdate.Spec.Description).IsNil() {
			patchValueDescription := objToUpdate.Spec.Description
			patchOpDescription := PatchOp{
				Op:    "replace",
				Path:  "/spec/description",
				Value: patchValueDescription,
			}
			patch = append(patch, patchOpDescription)
		}
	} else {
		patchValueDescription := objToUpdate.Spec.Description
		patchOpDescription := PatchOp{
			Op:    "replace",
			Path:  "/spec/description",
			Value: patchValueDescription,
		}
		patch = append(patch, patchOpDescription)
	}

	rt = reflect.TypeOf(objToUpdate.Spec.Meta)
	if rt.Kind() == reflect.Slice || rt.Kind() == reflect.Array || rt.Kind() == reflect.Map {
		if !reflect.ValueOf(objToUpdate.Spec.Meta).IsNil() {
			patchValueMeta := objToUpdate.Spec.Meta
			patchOpMeta := PatchOp{
				Op:    "replace",
				Path:  "/spec/meta",
				Value: patchValueMeta,
			}
			patch = append(patch, patchOpMeta)
		}
	} else {
		patchValueMeta := objToUpdate.Spec.Meta
		patchOpMeta := PatchOp{
			Op:    "replace",
			Path:  "/spec/meta",
			Value: patchValueMeta,
		}
		patch = append(patch, patchOpMeta)
	}

	rt = reflect.TypeOf(objToUpdate.Spec.Port)
	if rt.Kind() == reflect.Slice || rt.Kind() == reflect.Array || rt.Kind() == reflect.Map {
		if !reflect.ValueOf(objToUpdate.Spec.Port).IsNil() {
			patchValuePort := objToUpdate.Spec.Port
			patchOpPort := PatchOp{
				Op:    "replace",
				Path:  "/spec/port",
				Value: patchValuePort,
			}
			patch = append(patch, patchOpPort)
		}
	} else {
		patchValuePort := objToUpdate.Spec.Port
		patchOpPort := PatchOp{
			Op:    "replace",
			Path:  "/spec/port",
			Value: patchValuePort,
		}
		patch = append(patch, patchOpPort)
	}

	rt = reflect.TypeOf(objToUpdate.Spec.OtherDescription)
	if rt.Kind() == reflect.Slice || rt.Kind() == reflect.Array || rt.Kind() == reflect.Map {
		if !reflect.ValueOf(objToUpdate.Spec.OtherDescription).IsNil() {
			patchValueOtherDescription := objToUpdate.Spec.OtherDescription
			patchOpOtherDescription := PatchOp{
				Op:    "replace",
				Path:  "/spec/otherDescription",
				Value: patchValueOtherDescription,
			}
			patch = append(patch, patchOpOtherDescription)
		}
	} else {
		patchValueOtherDescription := objToUpdate.Spec.OtherDescription
		patchOpOtherDescription := PatchOp{
			Op:    "replace",
			Path:  "/spec/otherDescription",
			Value: patchValueOtherDescription,
		}
		patch = append(patch, patchOpOtherDescription)
	}

	rt = reflect.TypeOf(objToUpdate.Spec.MapPointer)
	if rt.Kind() == reflect.Slice || rt.Kind() == reflect.Array || rt.Kind() == reflect.Map {
		if !reflect.ValueOf(objToUpdate.Spec.MapPointer).IsNil() {
			patchValueMapPointer := objToUpdate.Spec.MapPointer
			patchOpMapPointer := PatchOp{
				Op:    "replace",
				Path:  "/spec/mapPointer",
				Value: patchValueMapPointer,
			}
			patch = append(patch, patchOpMapPointer)
		}
	} else {
		patchValueMapPointer := objToUpdate.Spec.MapPointer
		patchOpMapPointer := PatchOp{
			Op:    "replace",
			Path:  "/spec/mapPointer",
			Value: patchValueMapPointer,
		}
		patch = append(patch, patchOpMapPointer)
	}

	rt = reflect.TypeOf(objToUpdate.Spec.SlicePointer)
	if rt.Kind() == reflect.Slice || rt.Kind() == reflect.Array || rt.Kind() == reflect.Map {
		if !reflect.ValueOf(objToUpdate.Spec.SlicePointer).IsNil() {
			patchValueSlicePointer := objToUpdate.Spec.SlicePointer
			patchOpSlicePointer := PatchOp{
				Op:    "replace",
				Path:  "/spec/slicePointer",
				Value: patchValueSlicePointer,
			}
			patch = append(patch, patchOpSlicePointer)
		}
	} else {
		patchValueSlicePointer := objToUpdate.Spec.SlicePointer
		patchOpSlicePointer := PatchOp{
			Op:    "replace",
			Path:  "/spec/slicePointer",
			Value: patchValueSlicePointer,
		}
		patch = append(patch, patchOpSlicePointer)
	}

	rt = reflect.TypeOf(objToUpdate.Spec.WorkloadSpec)
	if rt.Kind() == reflect.Slice || rt.Kind() == reflect.Array || rt.Kind() == reflect.Map {
		if !reflect.ValueOf(objToUpdate.Spec.WorkloadSpec).IsNil() {
			patchValueWorkloadSpec := objToUpdate.Spec.WorkloadSpec
			patchOpWorkloadSpec := PatchOp{
				Op:    "replace",
				Path:  "/spec/workloadSpec",
				Value: patchValueWorkloadSpec,
			}
			patch = append(patch, patchOpWorkloadSpec)
		}
	} else {
		patchValueWorkloadSpec := objToUpdate.Spec.WorkloadSpec
		patchOpWorkloadSpec := PatchOp{
			Op:    "replace",
			Path:  "/spec/workloadSpec",
			Value: patchValueWorkloadSpec,
		}
		patch = append(patch, patchOpWorkloadSpec)
	}

	rt = reflect.TypeOf(objToUpdate.Spec.DifferentSpec)
	if rt.Kind() == reflect.Slice || rt.Kind() == reflect.Array || rt.Kind() == reflect.Map {
		if !reflect.ValueOf(objToUpdate.Spec.DifferentSpec).IsNil() {
			patchValueDifferentSpec := objToUpdate.Spec.DifferentSpec
			patchOpDifferentSpec := PatchOp{
				Op:    "replace",
				Path:  "/spec/differentSpec",
				Value: patchValueDifferentSpec,
			}
			patch = append(patch, patchOpDifferentSpec)
		}
	} else {
		patchValueDifferentSpec := objToUpdate.Spec.DifferentSpec
		patchOpDifferentSpec := PatchOp{
			Op:    "replace",
			Path:  "/spec/differentSpec",
			Value: patchValueDifferentSpec,
		}
		patch = append(patch, patchOpDifferentSpec)
	}

	rt = reflect.TypeOf(objToUpdate.Spec.ServiceSegmentRef)
	if rt.Kind() == reflect.Slice || rt.Kind() == reflect.Array || rt.Kind() == reflect.Map {
		if !reflect.ValueOf(objToUpdate.Spec.ServiceSegmentRef).IsNil() {
			patchValueServiceSegmentRef := objToUpdate.Spec.ServiceSegmentRef
			patchOpServiceSegmentRef := PatchOp{
				Op:    "replace",
				Path:  "/spec/serviceSegmentRef",
				Value: patchValueServiceSegmentRef,
			}
			patch = append(patch, patchOpServiceSegmentRef)
		}
	} else {
		patchValueServiceSegmentRef := objToUpdate.Spec.ServiceSegmentRef
		patchOpServiceSegmentRef := PatchOp{
			Op:    "replace",
			Path:  "/spec/serviceSegmentRef",
			Value: patchValueServiceSegmentRef,
		}
		patch = append(patch, patchOpServiceSegmentRef)
	}

	rt = reflect.TypeOf(objToUpdate.Spec.ServiceSegmentRefPointer)
	if rt.Kind() == reflect.Slice || rt.Kind() == reflect.Array || rt.Kind() == reflect.Map {
		if !reflect.ValueOf(objToUpdate.Spec.ServiceSegmentRefPointer).IsNil() {
			patchValueServiceSegmentRefPointer := objToUpdate.Spec.ServiceSegmentRefPointer
			patchOpServiceSegmentRefPointer := PatchOp{
				Op:    "replace",
				Path:  "/spec/serviceSegmentRefPointer",
				Value: patchValueServiceSegmentRefPointer,
			}
			patch = append(patch, patchOpServiceSegmentRefPointer)
		}
	} else {
		patchValueServiceSegmentRefPointer := objToUpdate.Spec.ServiceSegmentRefPointer
		patchOpServiceSegmentRefPointer := PatchOp{
			Op:    "replace",
			Path:  "/spec/serviceSegmentRefPointer",
			Value: patchValueServiceSegmentRefPointer,
		}
		patch = append(patch, patchOpServiceSegmentRefPointer)
	}

	rt = reflect.TypeOf(objToUpdate.Spec.ServiceSegmentRefs)
	if rt.Kind() == reflect.Slice || rt.Kind() == reflect.Array || rt.Kind() == reflect.Map {
		if !reflect.ValueOf(objToUpdate.Spec.ServiceSegmentRefs).IsNil() {
			patchValueServiceSegmentRefs := objToUpdate.Spec.ServiceSegmentRefs
			patchOpServiceSegmentRefs := PatchOp{
				Op:    "replace",
				Path:  "/spec/serviceSegmentRefs",
				Value: patchValueServiceSegmentRefs,
			}
			patch = append(patch, patchOpServiceSegmentRefs)
		}
	} else {
		patchValueServiceSegmentRefs := objToUpdate.Spec.ServiceSegmentRefs
		patchOpServiceSegmentRefs := PatchOp{
			Op:    "replace",
			Path:  "/spec/serviceSegmentRefs",
			Value: patchValueServiceSegmentRefs,
		}
		patch = append(patch, patchOpServiceSegmentRefs)
	}

	rt = reflect.TypeOf(objToUpdate.Spec.ServiceSegmentRefMap)
	if rt.Kind() == reflect.Slice || rt.Kind() == reflect.Array || rt.Kind() == reflect.Map {
		if !reflect.ValueOf(objToUpdate.Spec.ServiceSegmentRefMap).IsNil() {
			patchValueServiceSegmentRefMap := objToUpdate.Spec.ServiceSegmentRefMap
			patchOpServiceSegmentRefMap := PatchOp{
				Op:    "replace",
				Path:  "/spec/serviceSegmentRefMap",
				Value: patchValueServiceSegmentRefMap,
			}
			patch = append(patch, patchOpServiceSegmentRefMap)
		}
	} else {
		patchValueServiceSegmentRefMap := objToUpdate.Spec.ServiceSegmentRefMap
		patchOpServiceSegmentRefMap := PatchOp{
			Op:    "replace",
			Path:  "/spec/serviceSegmentRefMap",
			Value: patchValueServiceSegmentRefMap,
		}
		patch = append(patch, patchOpServiceSegmentRefMap)
	}

	marshaled, err := patch.Marshal()
	if err != nil {
		return nil, err
	}

	var (
		result *basegnstsmtanzuvmwarecomv1.Gns
	)
	newCtx := context.TODO()
	retryCount := 0
	for {
		result, err = group.client.baseClient.
			GnsTsmV1().
			Gnses().Patch(newCtx, objToUpdate.GetName(), types.JSONPatchType, marshaled, metav1.PatchOptions{}, "")
		if err != nil {
			log.Errorf("[UpdateGnsByName] Failed to patch Gns gvk in parent node[Configs]: %+v", err)
			if errors.IsTimeout(err) || customerrors.Is(err, context.DeadlineExceeded) {
				log.Errorf("[Retry Count: %d ] %+v", retryCount, err)
				if retryCount == maxRetryCount {
					log.Error("Max Retry exceed on patching gvk")
					log.Errorf("Trigger Gns Delete: %s", objToUpdate.GetName())
					delErr := group.DeleteGnsByName(newCtx, objToUpdate.GetName())
					if delErr != nil {
						log.Errorf("Error occur while deleting Gns: %s", objToUpdate.GetName())
						return nil, delErr
					}
					log.Errorf("Gns Deleted: %s", objToUpdate.GetName())
					return nil, err
				}
				retryCount += 1
				time.Sleep(sleepTime * time.Second)
			} else if customerrors.Is(err, context.Canceled) {
				log.Errorf("[CreateGnsByName]: %+v", err)
				return nil, context.Canceled
			} else {
				log.Errorf("[CreateGnsByName] Unexpected Error Gns] :%+v", err)
				log.Errorf("Trigger Gns Delete: %s", objToUpdate.GetName())
				delErr := group.DeleteGnsByName(newCtx, objToUpdate.GetName())
				if delErr != nil {
					log.Errorf("Error occur while deleting Gns: %+v", objToUpdate.GetName())
					return nil, delErr
				}
				log.Errorf("Gns Deleted: %s", objToUpdate.GetName())
				return nil, err
			}
		} else {
			log.Debugf("[CreateGnsByName] Patch Gns Success :%s", objToUpdate.GetName())
			break
		}
	}
	log.Debugf("[UpdateGnsByName] Executed Successfully %s", objToUpdate.GetName())
	return &GnsGns{
		client: group.client,
		Gns:    result,
	}, nil
}

// ListGnses returns slice of all existing objects of this type. Selectors can be provided in opts parameter.
func (group *GnsTsmV1) ListGnses(ctx context.Context,
	opts metav1.ListOptions) (result []*GnsGns, err error) {
	key := "gnses.gns.tsm.tanzu.vmware.com"
	if s, ok := subscriptionMap.Load(key); ok {
		items := s.(subscription).informer.GetStore().List()
		result = make([]*GnsGns, len(items))
		for k, v := range items {
			item, _ := v.(*basegnstsmtanzuvmwarecomv1.Gns)
			result[k] = &GnsGns{
				client: group.client,
				Gns:    item,
			}
		}
	} else {
		list, err := group.client.baseClient.GnsTsmV1().
			Gnses().List(ctx, opts)
		if err != nil {
			return nil, err
		}
		result = make([]*GnsGns, len(list.Items))
		for k, v := range list.Items {
			item := v
			result[k] = &GnsGns{
				client: group.client,
				Gns:    &item,
			}
		}
	}
	return
}

type GnsGns struct {
	client *Clientset
	*basegnstsmtanzuvmwarecomv1.Gns
}

// Delete removes obj and all it's children from the database.
func (obj *GnsGns) Delete(ctx context.Context) error {
	err := obj.client.Gns().DeleteGnsByName(ctx, obj.GetName())
	if err != nil {
		return err
	}
	obj.Gns = nil
	return nil
}

// Update updates spec of object in database. Children and Link can not be updated using this function.
func (obj *GnsGns) Update(ctx context.Context) error {
	result, err := obj.client.Gns().UpdateGnsByName(ctx, obj.Gns)
	if err != nil {
		return err
	}
	obj.Gns = result.Gns
	return nil
}

// SetState sets user defined status
func (obj *GnsGns) SetState(ctx context.Context, status *basegnstsmtanzuvmwarecomv1.GnsState) error {
	result, err := obj.client.Gns().SetGnsStateByName(ctx, obj.Gns, status)
	if err != nil {
		return err
	}
	obj.Gns = result.Gns
	return nil
}

// GetState to get user defined status
func (obj *GnsGns) GetState(ctx context.Context) (*basegnstsmtanzuvmwarecomv1.GnsState, error) {
	getObj, err := obj.client.Gns().GetGnsByName(ctx, obj.GetName())
	if err != nil {
		return nil, err
	}
	return &getObj.Status.State, nil
}

// ClearState to clear user defined status
func (obj *GnsGns) ClearState(ctx context.Context) error {
	result, err := obj.client.Gns().SetGnsStateByName(ctx, obj.Gns, &basegnstsmtanzuvmwarecomv1.GnsState{})
	if err != nil {
		return err
	}
	obj.Gns = result.Gns
	return nil
}

func (obj *GnsGns) GetParent(ctx context.Context) (result *ConfigConfig, err error) {
	hashedName := helper.GetHashedName("configs.config.tsm.tanzu.vmware.com", obj.Labels, obj.Labels["configs.config.tsm.tanzu.vmware.com"])
	return obj.client.Config().GetConfigByName(ctx, hashedName)
}

// GetAllGnsServiceGroups returns all children of given type
func (obj *GnsGns) GetAllGnsServiceGroups(ctx context.Context) (
	result []*ServicegroupSvcGroup, err error) {
	result = make([]*ServicegroupSvcGroup, 0, len(obj.Spec.GnsServiceGroupsGvk))
	for _, v := range obj.Spec.GnsServiceGroupsGvk {
		l, err := obj.client.Servicegroup().GetSvcGroupByName(ctx, v.Name)
		if err != nil {
			return nil, err
		}
		result = append(result, l)
	}
	return
}

// GetGnsServiceGroups returns child which has given displayName
func (obj *GnsGns) GetGnsServiceGroups(ctx context.Context,
	displayName string) (result *ServicegroupSvcGroup, err error) {
	l, ok := obj.Spec.GnsServiceGroupsGvk[displayName]
	if !ok {
		return nil, NewChildNotFound(obj.DisplayName(), "Gns.Gns", "GnsServiceGroups", displayName)
	}
	result, err = obj.client.Servicegroup().GetSvcGroupByName(ctx, l.Name)
	return
}

// AddGnsServiceGroups calculates hashed name of the child to create based on objToCreate.Name
// and parents names and creates it. objToCreate.Name is changed to the hashed name. Original name is preserved in
// nexus/display_name label and can be obtained using DisplayName() method.
func (obj *GnsGns) AddGnsServiceGroups(ctx context.Context,
	objToCreate *baseservicegrouptsmtanzuvmwarecomv1.SvcGroup) (result *ServicegroupSvcGroup, err error) {
	log.Debugf("[AddGnsServiceGroups] Received objToCreate: %s", objToCreate.GetName())
	if objToCreate.Labels == nil {
		objToCreate.Labels = map[string]string{}
	}
	for _, v := range helper.GetCRDParentsMap()["gnses.gns.tsm.tanzu.vmware.com"] {
		objToCreate.Labels[v] = obj.Labels[v]
	}
	objToCreate.Labels["gnses.gns.tsm.tanzu.vmware.com"] = obj.DisplayName()
	if objToCreate.Labels[common.IS_NAME_HASHED_LABEL] != "true" {
		objToCreate.Labels[common.DISPLAY_NAME_LABEL] = objToCreate.GetName()
		objToCreate.Labels[common.IS_NAME_HASHED_LABEL] = "true"
		hashedName := helper.GetHashedName(objToCreate.CRDName(), objToCreate.Labels, objToCreate.GetName())
		objToCreate.Name = hashedName
	}
	result, err = obj.client.Servicegroup().CreateSvcGroupByName(ctx, objToCreate)
	log.Debugf("[AddGnsServiceGroups] ApiSpecification created successfully: %s", objToCreate.GetName())
	updatedObj, getErr := obj.client.Gns().GetGnsByName(ctx, obj.GetName())
	if getErr == nil {
		obj.Gns = updatedObj.Gns
	}
	log.Debugf("[AddGnsServiceGroups] Executed Successfully: %s", objToCreate.GetName())
	return
}

// DeleteGnsServiceGroups calculates hashed name of the child to delete based on displayName
// and parents names and deletes it.

func (obj *GnsGns) DeleteGnsServiceGroups(ctx context.Context, displayName string) (err error) {
	log.Debugf("[ DeleteGnsServiceGroups] Received for SvcGroup object: %s to delete", displayName)
	l, ok := obj.Spec.GnsServiceGroupsGvk[displayName]
	if !ok {
		return NewChildNotFound(obj.DisplayName(), "Gns.Gns", "GnsServiceGroups", displayName)
	}
	err = obj.client.Servicegroup().DeleteSvcGroupByName(ctx, l.Name)
	if err != nil {
		return err
	}
	log.Debugf("[ DeleteGnsServiceGroups] SvcGroup object: %s deleted successfully", displayName)
	updatedObj, err := obj.client.Gns().GetGnsByName(ctx, obj.GetName())
	if err == nil {
		obj.Gns = updatedObj.Gns
	}
	return
}

// GetGnsAccessControlPolicy returns child of given type
func (obj *GnsGns) GetGnsAccessControlPolicy(ctx context.Context) (
	result *PolicypkgAccessControlPolicy, err error) {
	if obj.Spec.GnsAccessControlPolicyGvk == nil {
		return nil, NewChildNotFound(obj.DisplayName(), "Gns.Gns", "GnsAccessControlPolicy")
	}
	return obj.client.Policypkg().GetAccessControlPolicyByName(ctx, obj.Spec.GnsAccessControlPolicyGvk.Name)
}

// AddGnsAccessControlPolicy calculates hashed name of the child to create based on objToCreate.Name
// and parents names and creates it. objToCreate.Name is changed to the hashed name. Original name is preserved in
// nexus/display_name label and can be obtained using DisplayName() method.
func (obj *GnsGns) AddGnsAccessControlPolicy(ctx context.Context,
	objToCreate *basepolicypkgtsmtanzuvmwarecomv1.AccessControlPolicy) (result *PolicypkgAccessControlPolicy, err error) {
	log.Debugf("[AddGnsAccessControlPolicy] Received objToCreate: %s", objToCreate.GetName())
	if objToCreate.Labels == nil {
		objToCreate.Labels = map[string]string{}
	}
	for _, v := range helper.GetCRDParentsMap()["gnses.gns.tsm.tanzu.vmware.com"] {
		objToCreate.Labels[v] = obj.Labels[v]
	}
	objToCreate.Labels["gnses.gns.tsm.tanzu.vmware.com"] = obj.DisplayName()
	if objToCreate.Labels[common.IS_NAME_HASHED_LABEL] != "true" {
		objToCreate.Labels[common.DISPLAY_NAME_LABEL] = objToCreate.GetName()
		objToCreate.Labels[common.IS_NAME_HASHED_LABEL] = "true"
		hashedName := helper.GetHashedName(objToCreate.CRDName(), objToCreate.Labels, objToCreate.GetName())
		objToCreate.Name = hashedName
	}
	result, err = obj.client.Policypkg().CreateAccessControlPolicyByName(ctx, objToCreate)
	log.Debugf("[AddGnsAccessControlPolicy] ApiSpecification created successfully: %s", objToCreate.GetName())
	updatedObj, getErr := obj.client.Gns().GetGnsByName(ctx, obj.GetName())
	if getErr == nil {
		obj.Gns = updatedObj.Gns
	}
	log.Debugf("[AddGnsAccessControlPolicy] Executed Successfully: %s", objToCreate.GetName())
	return
}

// DeleteGnsAccessControlPolicy calculates hashed name of the child to delete based on displayName
// and parents names and deletes it.

func (obj *GnsGns) DeleteGnsAccessControlPolicy(ctx context.Context) (err error) {
	if obj.Spec.GnsAccessControlPolicyGvk != nil {
		err = obj.client.
			Policypkg().DeleteAccessControlPolicyByName(ctx, obj.Spec.GnsAccessControlPolicyGvk.Name)
		if err != nil {
			return err
		}
	}
	updatedObj, err := obj.client.
		Gns().GetGnsByName(ctx, obj.GetName())
	if err == nil {
		obj.Gns = updatedObj.Gns
	}
	return
}

// GetFooChild returns child of given type
func (obj *GnsGns) GetFooChild(ctx context.Context) (
	result *GnsBarChild, err error) {
	if obj.Spec.FooChildGvk == nil {
		return nil, NewChildNotFound(obj.DisplayName(), "Gns.Gns", "FooChild")
	}
	return obj.client.Gns().GetBarChildByName(ctx, obj.Spec.FooChildGvk.Name)
}

// AddFooChild calculates hashed name of the child to create based on objToCreate.Name
// and parents names and creates it. objToCreate.Name is changed to the hashed name. Original name is preserved in
// nexus/display_name label and can be obtained using DisplayName() method.
func (obj *GnsGns) AddFooChild(ctx context.Context,
	objToCreate *basegnstsmtanzuvmwarecomv1.BarChild) (result *GnsBarChild, err error) {
	log.Debugf("[AddFooChild] Received objToCreate: %s", objToCreate.GetName())
	if objToCreate.Labels == nil {
		objToCreate.Labels = map[string]string{}
	}
	for _, v := range helper.GetCRDParentsMap()["gnses.gns.tsm.tanzu.vmware.com"] {
		objToCreate.Labels[v] = obj.Labels[v]
	}
	objToCreate.Labels["gnses.gns.tsm.tanzu.vmware.com"] = obj.DisplayName()
	if objToCreate.Labels[common.IS_NAME_HASHED_LABEL] != "true" {
		if objToCreate.GetName() == "" {
			objToCreate.SetName(helper.DEFAULT_KEY)
		}
		if objToCreate.GetName() != helper.DEFAULT_KEY {
			return nil, NewSingletonNameError(objToCreate.GetName())
		}
		objToCreate.Labels[common.DISPLAY_NAME_LABEL] = objToCreate.GetName()
		objToCreate.Labels[common.IS_NAME_HASHED_LABEL] = "true"
		hashedName := helper.GetHashedName(objToCreate.CRDName(), objToCreate.Labels, objToCreate.GetName())
		objToCreate.Name = hashedName
	}
	result, err = obj.client.Gns().CreateBarChildByName(ctx, objToCreate)
	log.Debugf("[AddFooChild] ApiSpecification created successfully: %s", objToCreate.GetName())
	updatedObj, getErr := obj.client.Gns().GetGnsByName(ctx, obj.GetName())
	if getErr == nil {
		obj.Gns = updatedObj.Gns
	}
	log.Debugf("[AddFooChild] Executed Successfully: %s", objToCreate.GetName())
	return
}

// DeleteFooChild calculates hashed name of the child to delete based on displayName
// and parents names and deletes it.

func (obj *GnsGns) DeleteFooChild(ctx context.Context) (err error) {
	if obj.Spec.FooChildGvk != nil {
		err = obj.client.
			Gns().DeleteBarChildByName(ctx, obj.Spec.FooChildGvk.Name)
		if err != nil {
			return err
		}
	}
	updatedObj, err := obj.client.
		Gns().GetGnsByName(ctx, obj.GetName())
	if err == nil {
		obj.Gns = updatedObj.Gns
	}
	return
}

// GetIgnoreChild returns child of given type
func (obj *GnsGns) GetIgnoreChild(ctx context.Context) (
	result *GnsIgnoreChild, err error) {
	if obj.Spec.IgnoreChildGvk == nil {
		return nil, NewChildNotFound(obj.DisplayName(), "Gns.Gns", "IgnoreChild")
	}
	return obj.client.Gns().GetIgnoreChildByName(ctx, obj.Spec.IgnoreChildGvk.Name)
}

// AddIgnoreChild calculates hashed name of the child to create based on objToCreate.Name
// and parents names and creates it. objToCreate.Name is changed to the hashed name. Original name is preserved in
// nexus/display_name label and can be obtained using DisplayName() method.
func (obj *GnsGns) AddIgnoreChild(ctx context.Context,
	objToCreate *basegnstsmtanzuvmwarecomv1.IgnoreChild) (result *GnsIgnoreChild, err error) {
	log.Debugf("[AddIgnoreChild] Received objToCreate: %s", objToCreate.GetName())
	if objToCreate.Labels == nil {
		objToCreate.Labels = map[string]string{}
	}
	for _, v := range helper.GetCRDParentsMap()["gnses.gns.tsm.tanzu.vmware.com"] {
		objToCreate.Labels[v] = obj.Labels[v]
	}
	objToCreate.Labels["gnses.gns.tsm.tanzu.vmware.com"] = obj.DisplayName()
	if objToCreate.Labels[common.IS_NAME_HASHED_LABEL] != "true" {
		objToCreate.Labels[common.DISPLAY_NAME_LABEL] = objToCreate.GetName()
		objToCreate.Labels[common.IS_NAME_HASHED_LABEL] = "true"
		hashedName := helper.GetHashedName(objToCreate.CRDName(), objToCreate.Labels, objToCreate.GetName())
		objToCreate.Name = hashedName
	}
	result, err = obj.client.Gns().CreateIgnoreChildByName(ctx, objToCreate)
	log.Debugf("[AddIgnoreChild] ApiSpecification created successfully: %s", objToCreate.GetName())
	updatedObj, getErr := obj.client.Gns().GetGnsByName(ctx, obj.GetName())
	if getErr == nil {
		obj.Gns = updatedObj.Gns
	}
	log.Debugf("[AddIgnoreChild] Executed Successfully: %s", objToCreate.GetName())
	return
}

// DeleteIgnoreChild calculates hashed name of the child to delete based on displayName
// and parents names and deletes it.

func (obj *GnsGns) DeleteIgnoreChild(ctx context.Context) (err error) {
	if obj.Spec.IgnoreChildGvk != nil {
		err = obj.client.
			Gns().DeleteIgnoreChildByName(ctx, obj.Spec.IgnoreChildGvk.Name)
		if err != nil {
			return err
		}
	}
	updatedObj, err := obj.client.
		Gns().GetGnsByName(ctx, obj.GetName())
	if err == nil {
		obj.Gns = updatedObj.Gns
	}
	return
}

// GetFoo returns child of given type
func (obj *GnsGns) GetFoo(ctx context.Context) (
	result *GnsFoo, err error) {
	if obj.Spec.FooGvk == nil {
		return nil, NewChildNotFound(obj.DisplayName(), "Gns.Gns", "Foo")
	}
	return obj.client.Gns().GetFooByName(ctx, obj.Spec.FooGvk.Name)
}

// AddFoo calculates hashed name of the child to create based on objToCreate.Name
// and parents names and creates it. objToCreate.Name is changed to the hashed name. Original name is preserved in
// nexus/display_name label and can be obtained using DisplayName() method.
func (obj *GnsGns) AddFoo(ctx context.Context,
	objToCreate *basegnstsmtanzuvmwarecomv1.Foo) (result *GnsFoo, err error) {
	log.Debugf("[AddFoo] Received objToCreate: %s", objToCreate.GetName())
	if objToCreate.Labels == nil {
		objToCreate.Labels = map[string]string{}
	}
	for _, v := range helper.GetCRDParentsMap()["gnses.gns.tsm.tanzu.vmware.com"] {
		objToCreate.Labels[v] = obj.Labels[v]
	}
	objToCreate.Labels["gnses.gns.tsm.tanzu.vmware.com"] = obj.DisplayName()
	if objToCreate.Labels[common.IS_NAME_HASHED_LABEL] != "true" {
		objToCreate.Labels[common.DISPLAY_NAME_LABEL] = objToCreate.GetName()
		objToCreate.Labels[common.IS_NAME_HASHED_LABEL] = "true"
		hashedName := helper.GetHashedName(objToCreate.CRDName(), objToCreate.Labels, objToCreate.GetName())
		objToCreate.Name = hashedName
	}
	result, err = obj.client.Gns().CreateFooByName(ctx, objToCreate)
	log.Debugf("[AddFoo] ApiSpecification created successfully: %s", objToCreate.GetName())
	updatedObj, getErr := obj.client.Gns().GetGnsByName(ctx, obj.GetName())
	if getErr == nil {
		obj.Gns = updatedObj.Gns
	}
	log.Debugf("[AddFoo] Executed Successfully: %s", objToCreate.GetName())
	return
}

// DeleteFoo calculates hashed name of the child to delete based on displayName
// and parents names and deletes it.

func (obj *GnsGns) DeleteFoo(ctx context.Context) (err error) {
	if obj.Spec.FooGvk != nil {
		err = obj.client.
			Gns().DeleteFooByName(ctx, obj.Spec.FooGvk.Name)
		if err != nil {
			return err
		}
	}
	updatedObj, err := obj.client.
		Gns().GetGnsByName(ctx, obj.GetName())
	if err == nil {
		obj.Gns = updatedObj.Gns
	}
	return
}

// GetDns returns link of given type
func (obj *GnsGns) GetDns(ctx context.Context) (
	result *GnsDns, err error) {
	if obj.Spec.DnsGvk == nil {
		return nil, NewLinkNotFound(obj.DisplayName(), "Gns.Gns", "Dns")
	}
	return obj.client.Gns().GetDnsByName(ctx, obj.Spec.DnsGvk.Name)
}

// LinkDns links obj with linkToAdd object. This function doesn't create linked object, it must be
// already created.
func (obj *GnsGns) LinkDns(ctx context.Context,
	linkToAdd *GnsDns) error {

	var patch Patch
	patchOp := PatchOp{
		Op:   "replace",
		Path: "/spec/dnsGvk",
		Value: basegnstsmtanzuvmwarecomv1.Child{
			Group: "gns.tsm.tanzu.vmware.com",
			Kind:  "Dns",
			Name:  linkToAdd.Name,
		},
	}
	patch = append(patch, patchOp)
	marshaled, err := patch.Marshal()
	if err != nil {
		return err
	}
	result, err := obj.client.baseClient.GnsTsmV1().Gnses().Patch(ctx, obj.Name, types.JSONPatchType, marshaled, metav1.PatchOptions{})
	if err != nil {
		return err
	}

	obj.Gns = result
	return nil
}

// UnlinkDns unlinks linkToRemove object from obj. This function doesn't delete linked object.
func (obj *GnsGns) UnlinkDns(ctx context.Context) (err error) {
	var patch Patch

	patchOp := PatchOp{
		Op:   "remove",
		Path: "/spec/dnsGvk",
	}

	patch = append(patch, patchOp)
	marshaled, err := patch.Marshal()
	if err != nil {
		return err
	}
	result, err := obj.client.baseClient.GnsTsmV1().Gnses().Patch(ctx, obj.Name, types.JSONPatchType, marshaled, metav1.PatchOptions{})
	if err != nil {
		return err
	}
	obj.Gns = result
	return nil

}

type gnsGnsTsmV1Chainer struct {
	client       *Clientset
	name         string
	parentLabels map[string]string
}

func (c *gnsGnsTsmV1Chainer) Subscribe() {
	key := "gnses.gns.tsm.tanzu.vmware.com"
	if _, ok := subscriptionMap.Load(key); !ok {
		informer := informergnstsmtanzuvmwarecomv1.NewGnsInformer(c.client.baseClient, 0, cache.Indexers{})
		subscribe(key, informer)
	}
}

func (c *gnsGnsTsmV1Chainer) Unsubscribe() {
	key := "gnses.gns.tsm.tanzu.vmware.com"
	if s, ok := subscriptionMap.Load(key); ok {
		close(s.(subscription).stop)
		subscriptionMap.Delete(key)
	}
}

func (c *gnsGnsTsmV1Chainer) IsSubscribed() bool {
	key := "gnses.gns.tsm.tanzu.vmware.com"
	_, ok := subscriptionMap.Load(key)
	return ok
}

func (c *gnsGnsTsmV1Chainer) RegisterEventHandler(addCB func(obj *GnsGns), updateCB func(oldObj, newObj *GnsGns), deleteCB func(obj *GnsGns)) (cache.ResourceEventHandlerRegistration, error) {
	fmt.Println("RegisterEventHandler for GnsGns")
	var (
		registrationId cache.ResourceEventHandlerRegistration
		err            error
		informer       cache.SharedIndexInformer
	)
	key := "gnses.gns.tsm.tanzu.vmware.com"
	stopper := make(chan struct{})
	if s, ok := subscriptionMap.Load(key); ok {
		fmt.Println("Informer exists for GnsGns")
		sub := s.(subscription)
		informer = sub.informer
	} else {
		fmt.Println("Informer doesn't exists for GnsGns, so creating a new one")
		informer = informergnstsmtanzuvmwarecomv1.NewGnsInformer(c.client.baseClient, 0, cache.Indexers{})
		go informer.Run(stopper)
		subscribe(key, informer)
	}
	registrationId, err = informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
		AddFunc: func(obj interface{}) {
			nc := &GnsGns{
				client: c.client,
				Gns:    obj.(*basegnstsmtanzuvmwarecomv1.Gns),
			}

			var parent *ConfigConfig
			gvkExist := false
			for i := 0; i < 600; i++ {
				// Check if parent exists
				p, err := nc.GetParent(context.TODO())
				if err != nil || p == nil {
					time.Sleep(500 * time.Millisecond)
					continue
				}
				parent = p
				// Check GVK

				if parent.Spec.GNSGvk == nil {
					time.Sleep(500 * time.Millisecond)
					continue
				}

				gvkExist = true
				break
			}
			if parent == nil {
				hashedName := helper.GetHashedName("configs.config.tsm.tanzu.vmware.com", nc.Labels, nc.Labels["configs.config.tsm.tanzu.vmware.com"])
				parent, err = c.client.Config().ForceReadConfigByName(context.TODO(), hashedName)
				if err != nil {
					if errors.IsNotFound(err) {
						return
					}
					panic("error occurred while fetching parent " + err.Error())
				}
				panic(fmt.Sprintf("parent found (event loop is stalled) " + nc.DisplayName()))
			}
			if !gvkExist {
				// Check GVK

				if parent.Spec.GNSGvk == nil {
					return
				}

				panic(fmt.Sprintf("gvk found (event loop is stalled) " + nc.DisplayName()))
			}

			addCB(nc)
		},

		UpdateFunc: func(oldObj, newObj interface{}) {
			oldData := &GnsGns{
				client: c.client,
				Gns:    oldObj.(*basegnstsmtanzuvmwarecomv1.Gns),
			}
			newData := &GnsGns{
				client: c.client,
				Gns:    newObj.(*basegnstsmtanzuvmwarecomv1.Gns),
			}
			updateCB(oldData, newData)
		},

		DeleteFunc: func(obj interface{}) {
			nc := &GnsGns{
				client: c.client,
				Gns:    obj.(*basegnstsmtanzuvmwarecomv1.Gns),
			}

			var parent *ConfigConfig
			gvkExist := true
			for i := 0; i < 600; i++ {
				// Check if parent exists
				p, err := nc.GetParent(context.TODO())
				if err != nil || p == nil {
					time.Sleep(500 * time.Millisecond)
					continue
				}
				parent = p
				// Check GVK

				if parent.Spec.GNSGvk != nil {
					time.Sleep(500 * time.Millisecond)
					continue
				}

				gvkExist = false
				break
			}
			if parent == nil {
				hashedName := helper.GetHashedName("configs.config.tsm.tanzu.vmware.com", nc.Labels, nc.Labels["configs.config.tsm.tanzu.vmware.com"])
				parent, err = c.client.Config().ForceReadConfigByName(context.TODO(), hashedName)
				if err != nil {
					if errors.IsNotFound(err) {
						return
					}
					panic("error occurred while fetching parent " + err.Error())
				}
				panic(fmt.Sprintf("parent found (event loop is stalled) " + nc.DisplayName()))
			}
			if gvkExist {
				// Check GVK

				if parent.Spec.GNSGvk != nil {
					return
				}

				panic(fmt.Sprintf("gvk not found (event loop is stalled) " + nc.DisplayName()))
			}

			deleteCB(nc)
		},
	})
	return registrationId, err
}

func (c *gnsGnsTsmV1Chainer) RegisterAddCallback(cbfn func(obj *GnsGns)) (cache.ResourceEventHandlerRegistration, error) {
	log.Debugf("[RegisterAddCallback] Received for GnsGns")
	var (
		registrationId cache.ResourceEventHandlerRegistration
		err            error
	)
	key := "gnses.gns.tsm.tanzu.vmware.com"
	stopper := make(chan struct{})
	if s, ok := subscriptionMap.Load(key); ok {
		log.Debugf("[RegisterAddCallback] GnsGns Use Subscription Informer")
		sub := s.(subscription)
		registrationId, err = sub.informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
			AddFunc: func(obj interface{}) {
				nc := &GnsGns{
					client: c.client,
					Gns:    obj.(*basegnstsmtanzuvmwarecomv1.Gns),
				}

				var parent *ConfigConfig
				gvkExist := false
				for i := 0; i < 600; i++ {
					// Check if parent exists
					p, err := nc.GetParent(context.TODO())
					if err != nil || p == nil {
						time.Sleep(500 * time.Millisecond)
						continue
					}
					parent = p

					// Check GVK

					if parent.Spec.GNSGvk == nil {
						time.Sleep(500 * time.Millisecond)
						continue
					}

					gvkExist = true

					break
				}

				if parent == nil {
					hashedName := helper.GetHashedName("configs.config.tsm.tanzu.vmware.com", nc.Labels, nc.Labels["configs.config.tsm.tanzu.vmware.com"])
					parent, err = c.client.Config().ForceReadConfigByName(context.TODO(), hashedName)
					if err != nil {
						if errors.IsNotFound(err) {
							return
						}

						panic("error occurred while fetching parent " + err.Error())
					}
					panic(fmt.Sprintf("parent found (event loop is stalled) " + nc.DisplayName()))
				}

				if !gvkExist {
					// Check GVK

					if parent.Spec.GNSGvk == nil {
						return
					}

					panic(fmt.Sprintf("gvk found (event loop is stalled) " + nc.DisplayName()))
				}

				cbfn(nc)
			},
		})
	} else {
		log.Debugf("[RegisterAddCallback] GnsGns Create New Informer")
		informer := informergnstsmtanzuvmwarecomv1.NewGnsInformer(c.client.baseClient, 0, cache.Indexers{})
		registrationId, err = informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
			AddFunc: func(obj interface{}) {
				nc := &GnsGns{
					client: c.client,
					Gns:    obj.(*basegnstsmtanzuvmwarecomv1.Gns),
				}

				var parent *ConfigConfig
				gvkExist := false
				for i := 0; i < 600; i++ {
					// Check if parent exists
					p, err := nc.GetParent(context.TODO())
					if err != nil || p == nil {
						time.Sleep(500 * time.Millisecond)
						continue
					}
					parent = p

					// Check GVK

					if parent.Spec.GNSGvk == nil {
						time.Sleep(500 * time.Millisecond)
						continue
					}

					gvkExist = true

					break
				}

				if parent == nil {
					hashedName := helper.GetHashedName("configs.config.tsm.tanzu.vmware.com", nc.Labels, nc.Labels["configs.config.tsm.tanzu.vmware.com"])
					parent, err = c.client.Config().ForceReadConfigByName(context.TODO(), hashedName)
					if err != nil {
						if errors.IsNotFound(err) {
							return
						}

						panic("error occurred while fetching parent " + err.Error())
					}
					panic(fmt.Sprintf("parent found (event loop is stalled) " + nc.DisplayName()))
				}

				if !gvkExist {
					// Check GVK

					if parent.Spec.GNSGvk == nil {
						return
					}

					panic(fmt.Sprintf("gvk found (event loop is stalled) " + nc.DisplayName()))
				}

				cbfn(nc)
			},
		})
		go informer.Run(stopper)
	}
	return registrationId, err
}

func (c *gnsGnsTsmV1Chainer) RegisterUpdateCallback(cbfn func(oldObj, newObj *GnsGns)) (cache.ResourceEventHandlerRegistration, error) {
	log.Debugf("[RegisterUpdateCallback] Received for GnsGns")
	var (
		registrationId cache.ResourceEventHandlerRegistration
		err            error
	)
	key := "gnses.gns.tsm.tanzu.vmware.com"
	stopper := make(chan struct{})
	if s, ok := subscriptionMap.Load(key); ok {
		log.Debugf("[RegisterUpdateCallback] GnsGns Use Subscription Informer")
		sub := s.(subscription)
		registrationId, err = sub.informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
			UpdateFunc: func(oldObj, newObj interface{}) {
				oldData := &GnsGns{
					client: c.client,
					Gns:    oldObj.(*basegnstsmtanzuvmwarecomv1.Gns),
				}
				newData := &GnsGns{
					client: c.client,
					Gns:    newObj.(*basegnstsmtanzuvmwarecomv1.Gns),
				}
				cbfn(oldData, newData)
			},
		})
	} else {
		log.Debugf("[RegisterUpdateCallback] GnsGns Create New Informer")
		informer := informergnstsmtanzuvmwarecomv1.NewGnsInformer(c.client.baseClient, 0, cache.Indexers{})
		registrationId, err = informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
			UpdateFunc: func(oldObj, newObj interface{}) {
				oldData := &GnsGns{
					client: c.client,
					Gns:    oldObj.(*basegnstsmtanzuvmwarecomv1.Gns),
				}
				newData := &GnsGns{
					client: c.client,
					Gns:    newObj.(*basegnstsmtanzuvmwarecomv1.Gns),
				}
				cbfn(oldData, newData)
			},
		})
		go informer.Run(stopper)
	}
	return registrationId, err
}

func (c *gnsGnsTsmV1Chainer) RegisterDeleteCallback(cbfn func(obj *GnsGns)) (cache.ResourceEventHandlerRegistration, error) {
	log.Debugf("[RegisterDeleteCallback] Received for GnsGns")
	var (
		registrationId cache.ResourceEventHandlerRegistration
		err            error
	)
	key := "gnses.gns.tsm.tanzu.vmware.com"
	stopper := make(chan struct{})
	if s, ok := subscriptionMap.Load(key); ok {
		log.Debugf("[RegisterDeleteCallback] GnsGns Use Subscription Informer")
		sub := s.(subscription)
		registrationId, err = sub.informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
			DeleteFunc: func(obj interface{}) {
				nc := &GnsGns{
					client: c.client,
					Gns:    obj.(*basegnstsmtanzuvmwarecomv1.Gns),
				}

				var parent *ConfigConfig
				gvkExist := true
				for i := 0; i < 600; i++ {
					// Check if parent exists
					p, err := nc.GetParent(context.TODO())
					if err != nil || p == nil {
						time.Sleep(500 * time.Millisecond)
						continue
					}
					parent = p

					// Check GVK

					if parent.Spec.GNSGvk != nil {
						time.Sleep(500 * time.Millisecond)
						continue
					}

					gvkExist = false
					break
				}

				if parent == nil {
					hashedName := helper.GetHashedName("configs.config.tsm.tanzu.vmware.com", nc.Labels, nc.Labels["configs.config.tsm.tanzu.vmware.com"])
					parent, err = c.client.Config().ForceReadConfigByName(context.TODO(), hashedName)
					if err != nil {
						if errors.IsNotFound(err) {
							return
						}

						panic("error occurred while fetching parent " + err.Error())
					}
					panic(fmt.Sprintf("parent found (event loop is stalled) " + nc.DisplayName()))
				}

				if gvkExist {
					// Check GVK

					if parent.Spec.GNSGvk != nil {
						return
					}

					panic(fmt.Sprintf("gvk not found (event loop is stalled) " + nc.DisplayName()))
				}

				cbfn(nc)
			},
		})
	} else {
		log.Debugf("[RegisterDeleteCallback] GnsGns Create New Informer")
		informer := informergnstsmtanzuvmwarecomv1.NewGnsInformer(c.client.baseClient, 0, cache.Indexers{})
		registrationId, err = informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
			DeleteFunc: func(obj interface{}) {
				nc := &GnsGns{
					client: c.client,
					Gns:    obj.(*basegnstsmtanzuvmwarecomv1.Gns),
				}

				var parent *ConfigConfig
				gvkExist := true
				for i := 0; i < 600; i++ {
					// Check if parent exists
					p, err := nc.GetParent(context.TODO())
					if err != nil || p == nil {
						time.Sleep(500 * time.Millisecond)
						continue
					}
					parent = p

					// Check GVK

					if parent.Spec.GNSGvk != nil {
						time.Sleep(500 * time.Millisecond)
						continue
					}

					gvkExist = false

					break
				}

				if parent == nil {
					hashedName := helper.GetHashedName("configs.config.tsm.tanzu.vmware.com", nc.Labels, nc.Labels["configs.config.tsm.tanzu.vmware.com"])
					parent, err = c.client.Config().ForceReadConfigByName(context.TODO(), hashedName)
					if err != nil {
						if errors.IsNotFound(err) {
							return
						}

						panic("error occurred while fetching parent " + err.Error())
					}
					panic(fmt.Sprintf("parent found (event loop is stalled) " + nc.DisplayName()))
				}

				if gvkExist {
					// Check GVK

					if parent.Spec.GNSGvk != nil {
						return
					}

					panic(fmt.Sprintf("gvk not found (event loop is stalled) " + nc.DisplayName()))
				}

				cbfn(nc)
			},
		})
		go informer.Run(stopper)
	}
	return registrationId, err
}

// ClearState to clear user defined status
func (c *gnsGnsTsmV1Chainer) ClearState(ctx context.Context) (err error) {
	hashedName := helper.GetHashedName("gnses.gns.tsm.tanzu.vmware.com", c.parentLabels, c.name)
	obj, err := c.client.Gns().GetGnsByName(ctx, hashedName)
	if err != nil {
		return err
	}
	_, err = c.client.Gns().SetGnsStateByName(ctx, obj.Gns, nil)
	return err
}

// GetState to get user defined status
func (c *gnsGnsTsmV1Chainer) GetState(ctx context.Context) (result *basegnstsmtanzuvmwarecomv1.GnsState, err error) {
	hashedName := helper.GetHashedName("gnses.gns.tsm.tanzu.vmware.com", c.parentLabels, c.name)
	obj, err := c.client.Gns().GetGnsByName(ctx, hashedName)
	if err != nil {
		return nil, err
	}
	return &obj.Status.State, nil
}

// SetState sets user defined status
func (c *gnsGnsTsmV1Chainer) SetState(ctx context.Context, status *basegnstsmtanzuvmwarecomv1.GnsState) (err error) {
	hashedName := helper.GetHashedName("gnses.gns.tsm.tanzu.vmware.com", c.parentLabels, c.name)
	obj, err := c.client.Gns().GetGnsByName(ctx, hashedName)
	if err != nil {
		return err
	}
	_, err = c.client.Gns().SetGnsStateByName(ctx, obj.Gns, status)
	return err
}

func (c *gnsGnsTsmV1Chainer) GnsServiceGroups(name string) *svcgroupServicegroupTsmV1Chainer {
	parentLabels := c.parentLabels
	parentLabels["svcgroups.servicegroup.tsm.tanzu.vmware.com"] = name
	return &svcgroupServicegroupTsmV1Chainer{
		client:       c.client,
		name:         name,
		parentLabels: parentLabels,
	}
}

// GetGnsServiceGroups calculates hashed name of the object based on displayName and it's parents and returns the object
func (c *gnsGnsTsmV1Chainer) GetGnsServiceGroups(ctx context.Context, displayName string) (result *ServicegroupSvcGroup, err error) {
	hashedName := helper.GetHashedName("svcgroups.servicegroup.tsm.tanzu.vmware.com", c.parentLabels, displayName)
	return c.client.Servicegroup().GetSvcGroupByName(ctx, hashedName)
}

// AddGnsServiceGroups calculates hashed name of the child to create based on objToCreate.Name
// and parents names and creates it. objToCreate.Name is changed to the hashed name. Original name is preserved in
// nexus/display_name label and can be obtained using DisplayName() method.
func (c *gnsGnsTsmV1Chainer) AddGnsServiceGroups(ctx context.Context,
	objToCreate *baseservicegrouptsmtanzuvmwarecomv1.SvcGroup) (result *ServicegroupSvcGroup, err error) {
	if objToCreate.Labels == nil {
		objToCreate.Labels = map[string]string{}
	}
	for k, v := range c.parentLabels {
		objToCreate.Labels[k] = v
	}
	if objToCreate.Labels[common.IS_NAME_HASHED_LABEL] != "true" {
		objToCreate.Labels[common.DISPLAY_NAME_LABEL] = objToCreate.GetName()
		objToCreate.Labels[common.IS_NAME_HASHED_LABEL] = "true"
		hashedName := helper.GetHashedName("svcgroups.servicegroup.tsm.tanzu.vmware.com", c.parentLabels, objToCreate.GetName())
		objToCreate.Name = hashedName
	}
	return c.client.Servicegroup().CreateSvcGroupByName(ctx, objToCreate)
}

// DeleteGnsServiceGroups calculates hashed name of the child to delete based on displayName
// and parents names and deletes it.
func (c *gnsGnsTsmV1Chainer) DeleteGnsServiceGroups(ctx context.Context, name string) (err error) {
	if c.parentLabels == nil {
		c.parentLabels = map[string]string{}
	}
	c.parentLabels[common.IS_NAME_HASHED_LABEL] = "true"
	hashedName := helper.GetHashedName("svcgroups.servicegroup.tsm.tanzu.vmware.com", c.parentLabels, name)
	return c.client.Servicegroup().DeleteSvcGroupByName(ctx, hashedName)
}

func (c *gnsGnsTsmV1Chainer) GnsAccessControlPolicy(name string) *accesscontrolpolicyPolicypkgTsmV1Chainer {
	parentLabels := c.parentLabels
	parentLabels["accesscontrolpolicies.policypkg.tsm.tanzu.vmware.com"] = name
	return &accesscontrolpolicyPolicypkgTsmV1Chainer{
		client:       c.client,
		name:         name,
		parentLabels: parentLabels,
	}
}

// GetGnsAccessControlPolicy calculates hashed name of the object based on displayName and it's parents and returns the object
func (c *gnsGnsTsmV1Chainer) GetGnsAccessControlPolicy(ctx context.Context, displayName string) (result *PolicypkgAccessControlPolicy, err error) {
	hashedName := helper.GetHashedName("accesscontrolpolicies.policypkg.tsm.tanzu.vmware.com", c.parentLabels, displayName)
	return c.client.Policypkg().GetAccessControlPolicyByName(ctx, hashedName)
}

// AddGnsAccessControlPolicy calculates hashed name of the child to create based on objToCreate.Name
// and parents names and creates it. objToCreate.Name is changed to the hashed name. Original name is preserved in
// nexus/display_name label and can be obtained using DisplayName() method.
func (c *gnsGnsTsmV1Chainer) AddGnsAccessControlPolicy(ctx context.Context,
	objToCreate *basepolicypkgtsmtanzuvmwarecomv1.AccessControlPolicy) (result *PolicypkgAccessControlPolicy, err error) {
	if objToCreate.Labels == nil {
		objToCreate.Labels = map[string]string{}
	}
	for k, v := range c.parentLabels {
		objToCreate.Labels[k] = v
	}
	if objToCreate.Labels[common.IS_NAME_HASHED_LABEL] != "true" {
		objToCreate.Labels[common.DISPLAY_NAME_LABEL] = objToCreate.GetName()
		objToCreate.Labels[common.IS_NAME_HASHED_LABEL] = "true"
		hashedName := helper.GetHashedName("accesscontrolpolicies.policypkg.tsm.tanzu.vmware.com", c.parentLabels, objToCreate.GetName())
		objToCreate.Name = hashedName
	}
	return c.client.Policypkg().CreateAccessControlPolicyByName(ctx, objToCreate)
}

// DeleteGnsAccessControlPolicy calculates hashed name of the child to delete based on displayName
// and parents names and deletes it.
func (c *gnsGnsTsmV1Chainer) DeleteGnsAccessControlPolicy(ctx context.Context, name string) (err error) {
	if c.parentLabels == nil {
		c.parentLabels = map[string]string{}
	}
	c.parentLabels[common.IS_NAME_HASHED_LABEL] = "true"
	hashedName := helper.GetHashedName("accesscontrolpolicies.policypkg.tsm.tanzu.vmware.com", c.parentLabels, name)
	return c.client.Policypkg().DeleteAccessControlPolicyByName(ctx, hashedName)
}

func (c *gnsGnsTsmV1Chainer) FooChild() *barchildGnsTsmV1Chainer {
	parentLabels := c.parentLabels
	parentLabels["barchilds.gns.tsm.tanzu.vmware.com"] = helper.DEFAULT_KEY
	return &barchildGnsTsmV1Chainer{
		client:       c.client,
		name:         helper.DEFAULT_KEY,
		parentLabels: parentLabels,
	}
}

// GetFooChild calculates hashed name of the object based on it's parents and returns the object
func (c *gnsGnsTsmV1Chainer) GetFooChild(ctx context.Context) (result *GnsBarChild, err error) {
	hashedName := helper.GetHashedName("barchilds.gns.tsm.tanzu.vmware.com", c.parentLabels, helper.DEFAULT_KEY)
	return c.client.Gns().GetBarChildByName(ctx, hashedName)
}

// AddFooChild calculates hashed name of the child to create based on parents names and creates it.
// objToCreate.Name is changed to the hashed name. Original name ('default') is preserved in
// nexus/display_name label and can be obtained using DisplayName() method.
func (c *gnsGnsTsmV1Chainer) AddFooChild(ctx context.Context,
	objToCreate *basegnstsmtanzuvmwarecomv1.BarChild) (result *GnsBarChild, err error) {
	if objToCreate.GetName() == "" {
		objToCreate.SetName(helper.DEFAULT_KEY)
	}
	if objToCreate.GetName() != helper.DEFAULT_KEY {
		return nil, NewSingletonNameError(objToCreate.GetName())
	}
	if objToCreate.Labels == nil {
		objToCreate.Labels = map[string]string{}
	}
	for k, v := range c.parentLabels {
		objToCreate.Labels[k] = v
	}
	if objToCreate.Labels[common.IS_NAME_HASHED_LABEL] != "true" {
		objToCreate.Labels[common.DISPLAY_NAME_LABEL] = objToCreate.GetName()
		objToCreate.Labels[common.IS_NAME_HASHED_LABEL] = "true"
		hashedName := helper.GetHashedName("barchilds.gns.tsm.tanzu.vmware.com", c.parentLabels, objToCreate.GetName())
		objToCreate.Name = hashedName
	}
	return c.client.Gns().CreateBarChildByName(ctx, objToCreate)
}

// DeleteFooChild calculates hashed name of the child to delete based on displayName
// and parents names and deletes it.
func (c *gnsGnsTsmV1Chainer) DeleteFooChild(ctx context.Context, name string) (err error) {
	if c.parentLabels == nil {
		c.parentLabels = map[string]string{}
	}
	c.parentLabels[common.IS_NAME_HASHED_LABEL] = "true"
	hashedName := helper.GetHashedName("barchilds.gns.tsm.tanzu.vmware.com", c.parentLabels, name)
	return c.client.Gns().DeleteBarChildByName(ctx, hashedName)
}

func (c *gnsGnsTsmV1Chainer) IgnoreChild(name string) *ignorechildGnsTsmV1Chainer {
	parentLabels := c.parentLabels
	parentLabels["ignorechilds.gns.tsm.tanzu.vmware.com"] = name
	return &ignorechildGnsTsmV1Chainer{
		client:       c.client,
		name:         name,
		parentLabels: parentLabels,
	}
}

// GetIgnoreChild calculates hashed name of the object based on displayName and it's parents and returns the object
func (c *gnsGnsTsmV1Chainer) GetIgnoreChild(ctx context.Context, displayName string) (result *GnsIgnoreChild, err error) {
	hashedName := helper.GetHashedName("ignorechilds.gns.tsm.tanzu.vmware.com", c.parentLabels, displayName)
	return c.client.Gns().GetIgnoreChildByName(ctx, hashedName)
}

// AddIgnoreChild calculates hashed name of the child to create based on objToCreate.Name
// and parents names and creates it. objToCreate.Name is changed to the hashed name. Original name is preserved in
// nexus/display_name label and can be obtained using DisplayName() method.
func (c *gnsGnsTsmV1Chainer) AddIgnoreChild(ctx context.Context,
	objToCreate *basegnstsmtanzuvmwarecomv1.IgnoreChild) (result *GnsIgnoreChild, err error) {
	if objToCreate.Labels == nil {
		objToCreate.Labels = map[string]string{}
	}
	for k, v := range c.parentLabels {
		objToCreate.Labels[k] = v
	}
	if objToCreate.Labels[common.IS_NAME_HASHED_LABEL] != "true" {
		objToCreate.Labels[common.DISPLAY_NAME_LABEL] = objToCreate.GetName()
		objToCreate.Labels[common.IS_NAME_HASHED_LABEL] = "true"
		hashedName := helper.GetHashedName("ignorechilds.gns.tsm.tanzu.vmware.com", c.parentLabels, objToCreate.GetName())
		objToCreate.Name = hashedName
	}
	return c.client.Gns().CreateIgnoreChildByName(ctx, objToCreate)
}

// DeleteIgnoreChild calculates hashed name of the child to delete based on displayName
// and parents names and deletes it.
func (c *gnsGnsTsmV1Chainer) DeleteIgnoreChild(ctx context.Context, name string) (err error) {
	if c.parentLabels == nil {
		c.parentLabels = map[string]string{}
	}
	c.parentLabels[common.IS_NAME_HASHED_LABEL] = "true"
	hashedName := helper.GetHashedName("ignorechilds.gns.tsm.tanzu.vmware.com", c.parentLabels, name)
	return c.client.Gns().DeleteIgnoreChildByName(ctx, hashedName)
}

func (c *gnsGnsTsmV1Chainer) Foo(name string) *fooGnsTsmV1Chainer {
	parentLabels := c.parentLabels
	parentLabels["foos.gns.tsm.tanzu.vmware.com"] = name
	return &fooGnsTsmV1Chainer{
		client:       c.client,
		name:         name,
		parentLabels: parentLabels,
	}
}

// GetFoo calculates hashed name of the object based on displayName and it's parents and returns the object
func (c *gnsGnsTsmV1Chainer) GetFoo(ctx context.Context, displayName string) (result *GnsFoo, err error) {
	hashedName := helper.GetHashedName("foos.gns.tsm.tanzu.vmware.com", c.parentLabels, displayName)
	return c.client.Gns().GetFooByName(ctx, hashedName)
}

// AddFoo calculates hashed name of the child to create based on objToCreate.Name
// and parents names and creates it. objToCreate.Name is changed to the hashed name. Original name is preserved in
// nexus/display_name label and can be obtained using DisplayName() method.
func (c *gnsGnsTsmV1Chainer) AddFoo(ctx context.Context,
	objToCreate *basegnstsmtanzuvmwarecomv1.Foo) (result *GnsFoo, err error) {
	if objToCreate.Labels == nil {
		objToCreate.Labels = map[string]string{}
	}
	for k, v := range c.parentLabels {
		objToCreate.Labels[k] = v
	}
	if objToCreate.Labels[common.IS_NAME_HASHED_LABEL] != "true" {
		objToCreate.Labels[common.DISPLAY_NAME_LABEL] = objToCreate.GetName()
		objToCreate.Labels[common.IS_NAME_HASHED_LABEL] = "true"
		hashedName := helper.GetHashedName("foos.gns.tsm.tanzu.vmware.com", c.parentLabels, objToCreate.GetName())
		objToCreate.Name = hashedName
	}
	return c.client.Gns().CreateFooByName(ctx, objToCreate)
}

// DeleteFoo calculates hashed name of the child to delete based on displayName
// and parents names and deletes it.
func (c *gnsGnsTsmV1Chainer) DeleteFoo(ctx context.Context, name string) (err error) {
	if c.parentLabels == nil {
		c.parentLabels = map[string]string{}
	}
	c.parentLabels[common.IS_NAME_HASHED_LABEL] = "true"
	hashedName := helper.GetHashedName("foos.gns.tsm.tanzu.vmware.com", c.parentLabels, name)
	return c.client.Gns().DeleteFooByName(ctx, hashedName)
}

// GetBarChildByName returns object stored in the database under the hashedName which is a hash of display
// name and parents names. Use it when you know hashed name of object.
func (group *GnsTsmV1) GetBarChildByName(ctx context.Context, hashedName string) (*GnsBarChild, error) {
	key := "barchilds.gns.tsm.tanzu.vmware.com"
	if s, ok := subscriptionMap.Load(key); ok {
		log.Debugf("[GetBarChildByName] GetObject: %s from cache", hashedName)
		item, exists, err := s.(subscription).informer.GetStore().GetByKey(hashedName)
		if !exists {
			return nil, err
		}

		log.Debugf("[GetBarChildByName] Object: %s exists in cache", hashedName)
		result, _ := item.(*basegnstsmtanzuvmwarecomv1.BarChild)
		return &GnsBarChild{
			client:   group.client,
			BarChild: result,
		}, nil
	} else {
		retryCount := 0
		for {
			result, err := group.client.baseClient.
				GnsTsmV1().
				BarChilds().Get(ctx, hashedName, metav1.GetOptions{})
			if err != nil {
				log.Errorf("[GetBarChildByName] Failed to Get BarChilds: %+v", err)
				if errors.IsTimeout(err) || customerrors.Is(err, context.DeadlineExceeded) {
					log.Errorf("[Retry Count: %d ] %+v", retryCount, err)
					if retryCount == maxRetryCount {
						log.Error("Max Retry exceed on Get BarChilds")
						return nil, err
					}
					retryCount += 1
					time.Sleep(sleepTime * time.Second)
				} else if customerrors.Is(err, context.Canceled) {
					log.Errorf("[GetBarChildByName]: %+v", err)
					return nil, context.Canceled
				} else {
					log.Errorf("[GetBarChildByName]: %+v", err)
					return nil, err
				}
			} else {
				return &GnsBarChild{
					client:   group.client,
					BarChild: result,
				}, nil
			}
		}
	}
}

// ForceReadBarChildByName read object directly from the database under the hashedName which is a hash of display
// name and parents names. Use it when you know hashed name of object.
func (group *GnsTsmV1) ForceReadBarChildByName(ctx context.Context, hashedName string) (*GnsBarChild, error) {
	log.Debugf("[ForceReadBarChildByName] Received object :%s to read from DB", hashedName)
	retryCount := 0
	for {
		result, err := group.client.baseClient.
			GnsTsmV1().
			BarChilds().Get(ctx, hashedName, metav1.GetOptions{})
		if err != nil {
			log.Errorf("[ForceReadBarChildByName] Failed to Get BarChilds: %+v", err)
			if errors.IsTimeout(err) || customerrors.Is(err, context.DeadlineExceeded) {
				log.Errorf("[Retry Count: %d ] %+v", retryCount, err)
				if retryCount == maxRetryCount {
					log.Error("Max Retry exceed on Get BarChilds")
					return nil, err
				}
				retryCount += 1
				time.Sleep(sleepTime * time.Second)
			} else if customerrors.Is(err, context.Canceled) {
				log.Errorf("[ForceReadBarChildByName]: %+v", err)
				return nil, context.Canceled
			} else {
				log.Errorf("[ForceReadBarChildByName]: %+v", err)
				return nil, err
			}
		} else {
			log.Debugf("[ForceReadBarChildByName] Executed Successfully :%s", hashedName)
			return &GnsBarChild{
				client:   group.client,
				BarChild: result,
			}, nil
		}
	}
}

// DeleteBarChildByName deletes object stored in the database under the hashedName which is a hash of
// display name and parents names. Use it when you know hashed name of object.
func (group *GnsTsmV1) DeleteBarChildByName(ctx context.Context, hashedName string) (err error) {
	log.Debugf("[DeleteBarChildByName] Received objectToDelete: %s", hashedName)

	var (
		retryCount int
		result     *basegnstsmtanzuvmwarecomv1.BarChild
	)
	retryCount = 0
	for {
		result, err = group.client.baseClient.
			GnsTsmV1().
			BarChilds().Get(ctx, hashedName, metav1.GetOptions{})
		if err != nil {
			log.Errorf("[DeleteBarChildByName] Failed to Get BarChilds: %+v", err)
			if errors.IsTimeout(err) || customerrors.Is(err, context.DeadlineExceeded) {
				log.Errorf("[Retry Count: %d ] %+v", retryCount, err)
				if retryCount == maxRetryCount {
					log.Error("Max Retry exceed on Get BarChilds")
					return err
				}
				retryCount += 1
				time.Sleep(sleepTime * time.Second)
			} else if customerrors.Is(err, context.Canceled) {
				log.Errorf("[DeleteBarChildByName]: %+v", err)
				return context.Canceled
			} else if errors.IsNotFound(err) {
				log.Errorf("[DeleteBarChildByName] Object Notfound: %+v", err)
				break
			} else {
				log.Errorf("[DeleteBarChildByName]: %+v", err)
				return err
			}
		} else {
			break
		}
	}

	retryCount = 0
	for {
		err = group.client.baseClient.
			GnsTsmV1().
			BarChilds().Delete(ctx, hashedName, metav1.DeleteOptions{})
		if err != nil {
			log.Errorf("[DeleteBarChildByName] failed to delete BarChilds: %+v", err)
			if errors.IsTimeout(err) || customerrors.Is(err, context.DeadlineExceeded) {
				log.Errorf("[Retry Count: %d ] %+v", retryCount, err)
				if retryCount == maxRetryCount {
					log.Error("Max retry exceed on delete BarChilds")
					return err
				}
				retryCount += 1
				time.Sleep(sleepTime * time.Second)
			} else if customerrors.Is(err, context.Canceled) {
				log.Errorf("[DeleteBarChildByName]: %+v", err)
				return context.Canceled
			} else if errors.IsNotFound(err) {
				log.Errorf("[DeleteBarChildByName] Object not found: %+v", err)
				break
			} else {
				log.Errorf("[DeleteBarChildByName]: %+v", err)
				return err
			}
		}
	}
	// Get Parent Node and check if gvk present before patch

	var gvkPresent bool
	log.Debugf("[DeleteBarChildByName] Get Parent details")
	var patch Patch
	parents := result.GetLabels()
	if parents == nil {
		parents = make(map[string]string)
	}
	parentName, ok := parents["gnses.gns.tsm.tanzu.vmware.com"]
	if !ok {
		parentName = helper.DEFAULT_KEY
	}
	if result.GetLabels() != nil {
		if parents[common.IS_NAME_HASHED_LABEL] == "true" {
			parentName = helper.GetHashedName("gnses.gns.tsm.tanzu.vmware.com", parents, parentName)
		}
	} else {
		parentName = helper.GetHashedName("gnses.gns.tsm.tanzu.vmware.com", parents, parentName)
	}
	parentData, err := group.client.baseClient.
		GnsTsmV1().
		Gnses().Get(ctx, parentName, metav1.GetOptions{})
	if err != nil {
		log.Errorf("[DeleteBarChildByName] Failed to get Parent node: %+v", err)
		if errors.IsNotFound(err) {
			return nil
		} else {
			return err
		}
	}

	if parentData.Spec.FooChildGvk != nil {
		log.Debugf("[DeleteBarChildByName] GVK present in parent for node: %s", hashedName)
		gvkPresent = true
	}

	if gvkPresent {

		patchOp := PatchOp{
			Op:   "remove",
			Path: "/spec/fooChildGvk",
		}

		patch = append(patch, patchOp)
		marshaled, err := patch.Marshal()
		if err != nil {
			return err
		}

		retryCount = 0
		newCtx := context.TODO()
		for {
			_, err = group.client.baseClient.
				GnsTsmV1().
				Gnses().Patch(newCtx, parentName, types.JSONPatchType, marshaled, metav1.PatchOptions{})
			if err != nil {
				log.Errorf("Failed to patch BarChild gvk in parent node[Gnses]: %+v", err)
				if errors.IsTimeout(err) || customerrors.Is(err, context.DeadlineExceeded) {
					log.Errorf("[Retry Count: %d ] %+v", retryCount, err)
					if retryCount == maxRetryCount {
						log.Error("Max Retry exceed on patching gvk")
						return err
					}
					retryCount += 1
					time.Sleep(sleepTime * time.Second)
				} else if customerrors.Is(err, context.Canceled) {
					log.Errorf("[DeleteBarChildByName]: %+v", err)
					return context.Canceled
				} else {
					log.Errorf("Unexpected Error occur BarChild]: %+v", err)
					return err
				}
			} else {
				log.Debugf("[DeleteBarChildByName] Patch BarChild Success: %s", hashedName)
				break
			}
		}
		log.Debugf("[DeleteBarChildByName] Executed Successfully: %s", hashedName)
	}

	return
}

// CreateBarChildByName creates object in the database without hashing the name.
// Use it directly ONLY when objToCreate.Name is hashed name of the object.
func (group *GnsTsmV1) CreateBarChildByName(ctx context.Context,
	objToCreate *basegnstsmtanzuvmwarecomv1.BarChild) (*GnsBarChild, error) {
	log.Debugf("[CreateBarChildByName] Received objToCreate: %s", objToCreate.GetName())
	if objToCreate.GetLabels() == nil {
		objToCreate.Labels = make(map[string]string)
	}
	if _, ok := objToCreate.Labels[common.DISPLAY_NAME_LABEL]; !ok {
		objToCreate.Labels[common.DISPLAY_NAME_LABEL] = objToCreate.GetName()
	}
	if objToCreate.Labels[common.DISPLAY_NAME_LABEL] == "" {
		objToCreate.Labels[common.DISPLAY_NAME_LABEL] = helper.DEFAULT_KEY
	}
	if objToCreate.Labels[common.DISPLAY_NAME_LABEL] != helper.DEFAULT_KEY {
		return nil, NewSingletonNameError(objToCreate.Labels[common.DISPLAY_NAME_LABEL])
	}

	var (
		retryCount int
		result     *basegnstsmtanzuvmwarecomv1.BarChild
		err        error
	)
	retryCount = 0
	for {
		result, err = group.client.baseClient.
			GnsTsmV1().
			BarChilds().Create(ctx, objToCreate, metav1.CreateOptions{})
		if err != nil {
			log.Errorf("[CreateBarChildByName] Failed to Create BarChilds: %+v", err)
			if errors.IsTimeout(err) || customerrors.Is(err, context.DeadlineExceeded) {
				log.Errorf("[Retry Count: %d ] %+v", retryCount, err)
				if retryCount == maxRetryCount {
					log.Error("Max Retry exceed on Get BarChilds")
					return nil, err
				}
				retryCount += 1
				time.Sleep(sleepTime * time.Second)
			} else if customerrors.Is(err, context.Canceled) {
				log.Errorf("[CreateBarChildByName]: %+v", err)
				return nil, context.Canceled
			} else {
				log.Errorf("[CreateBarChildByName]: %+v", err)
				return nil, err
			}
		} else {
			break
		}
	}
	log.Debugf("[CreateBarChildByName] BarChilds created successfully: %s", objToCreate.GetName())

	parentName, ok := objToCreate.GetLabels()["gnses.gns.tsm.tanzu.vmware.com"]
	if !ok {
		parentName = helper.DEFAULT_KEY
	}
	if objToCreate.Labels[common.IS_NAME_HASHED_LABEL] == "true" {
		parentName = helper.GetHashedName("gnses.gns.tsm.tanzu.vmware.com", objToCreate.GetLabels(), parentName)
	}

	var patch Patch
	patchOp := PatchOp{
		Op:   "replace",
		Path: "/spec/fooChildGvk",
		Value: basegnstsmtanzuvmwarecomv1.Child{
			Group: "gns.tsm.tanzu.vmware.com",
			Kind:  "BarChild",
			Name:  objToCreate.Name,
		},
	}
	patch = append(patch, patchOp)
	marshaled, err := patch.Marshal()
	if err != nil {
		return nil, err
	}
	retryCount = 0
	newCtx := context.TODO()
	for {
		_, err = group.client.baseClient.
			GnsTsmV1().
			Gnses().Patch(newCtx, parentName, types.JSONPatchType, marshaled, metav1.PatchOptions{})
		if err != nil {
			log.Errorf("[CreateBarChildByName] Failed to patch BarChild gvk in parent node[Gnses]: %+v", err)
			if errors.IsTimeout(err) || customerrors.Is(err, context.DeadlineExceeded) {
				log.Errorf("[Retry Count: %d ] %+v", retryCount, err)
				if retryCount == maxRetryCount {
					log.Error("Max Retry exceed on patching gvk")
					log.Errorf("Trigger BarChild Delete: %s", objToCreate.GetName())
					delErr := group.DeleteBarChildByName(newCtx, objToCreate.GetName())
					if delErr != nil {
						log.Errorf("Error occur while deleting BarChild: %s", objToCreate.GetName())
						return nil, delErr
					}
					log.Errorf("BarChild Deleted: %s", objToCreate.GetName())
					return nil, err
				}
				retryCount += 1
				time.Sleep(sleepTime * time.Second)
			} else if customerrors.Is(err, context.Canceled) {
				log.Errorf("[CreateBarChildByName]: %+v", err)
				return nil, context.Canceled
			} else {
				log.Errorf("[CreateBarChildByName] Unexpected Error BarChild] :%+v", err)
				log.Errorf("Trigger BarChild Delete: %s", objToCreate.GetName())
				delErr := group.DeleteBarChildByName(newCtx, objToCreate.GetName())
				if delErr != nil {
					log.Errorf("Error occur while deleting BarChild: %+v", objToCreate.GetName())
					return nil, delErr
				}
				log.Errorf("BarChild Deleted: %s", objToCreate.GetName())
				return nil, err
			}
		} else {
			log.Debugf("[CreateBarChildByName] Patch BarChild Success :%s", objToCreate.GetName())
			break
		}
	}

	log.Debugf("[CreateBarChildByName] Executed Successfully: %s", objToCreate.GetName())
	return &GnsBarChild{
		client:   group.client,
		BarChild: result,
	}, nil
}

// UpdateBarChildByName updates object stored in the database under the hashedName which is a hash of
// display name and parents names.
func (group *GnsTsmV1) UpdateBarChildByName(ctx context.Context,
	objToUpdate *basegnstsmtanzuvmwarecomv1.BarChild) (*GnsBarChild, error) {
	log.Debugf("[UpdateBarChildByName] Received objToUpdate: %s", objToUpdate.GetName())
	if objToUpdate.Labels[common.DISPLAY_NAME_LABEL] != helper.DEFAULT_KEY {
		return nil, NewSingletonNameError(objToUpdate.Labels[common.DISPLAY_NAME_LABEL])
	}

	var patch Patch

	if objToUpdate.Annotations != nil || objToUpdate.Labels != nil {
		current, err := group.client.Gns().GetBarChildByName(ctx, objToUpdate.Name)
		if err != nil {
			return nil, err
		}

		if objToUpdate.Annotations != nil {
			if current.Annotations[ownershipAnnotation] != "" {
				objToUpdate.Annotations[ownershipAnnotation] = current.Annotations[ownershipAnnotation]
			}
			patch = append(patch, PatchOp{
				Op:    "replace",
				Path:  "/metadata/annotations",
				Value: objToUpdate.Annotations,
			})
		}

		if objToUpdate.Labels != nil {
			parentsList := helper.GetCRDParentsMap()["barchilds.gns.tsm.tanzu.vmware.com"]
			for _, k := range parentsList {
				objToUpdate.Labels[k] = current.Labels[k]
			}
			objToUpdate.Labels[common.IS_NAME_HASHED_LABEL] = current.Labels[common.IS_NAME_HASHED_LABEL]
			objToUpdate.Labels[common.DISPLAY_NAME_LABEL] = current.Labels[common.DISPLAY_NAME_LABEL]
			patch = append(patch, PatchOp{
				Op:    "replace",
				Path:  "/metadata/labels",
				Value: objToUpdate.Labels,
			})
		}
	}

	var rt reflect.Type

	rt = reflect.TypeOf(objToUpdate.Spec.Name)
	if rt.Kind() == reflect.Slice || rt.Kind() == reflect.Array || rt.Kind() == reflect.Map {
		if !reflect.ValueOf(objToUpdate.Spec.Name).IsNil() {
			patchValueName := objToUpdate.Spec.Name
			patchOpName := PatchOp{
				Op:    "replace",
				Path:  "/spec/name",
				Value: patchValueName,
			}
			patch = append(patch, patchOpName)
		}
	} else {
		patchValueName := objToUpdate.Spec.Name
		patchOpName := PatchOp{
			Op:    "replace",
			Path:  "/spec/name",
			Value: patchValueName,
		}
		patch = append(patch, patchOpName)
	}

	marshaled, err := patch.Marshal()
	if err != nil {
		return nil, err
	}

	var (
		result *basegnstsmtanzuvmwarecomv1.BarChild
	)
	newCtx := context.TODO()
	retryCount := 0
	for {
		result, err = group.client.baseClient.
			GnsTsmV1().
			BarChilds().Patch(newCtx, objToUpdate.GetName(), types.JSONPatchType, marshaled, metav1.PatchOptions{}, "")
		if err != nil {
			log.Errorf("[UpdateBarChildByName] Failed to patch BarChild gvk in parent node[Gnses]: %+v", err)
			if errors.IsTimeout(err) || customerrors.Is(err, context.DeadlineExceeded) {
				log.Errorf("[Retry Count: %d ] %+v", retryCount, err)
				if retryCount == maxRetryCount {
					log.Error("Max Retry exceed on patching gvk")
					log.Errorf("Trigger BarChild Delete: %s", objToUpdate.GetName())
					delErr := group.DeleteBarChildByName(newCtx, objToUpdate.GetName())
					if delErr != nil {
						log.Errorf("Error occur while deleting BarChild: %s", objToUpdate.GetName())
						return nil, delErr
					}
					log.Errorf("BarChild Deleted: %s", objToUpdate.GetName())
					return nil, err
				}
				retryCount += 1
				time.Sleep(sleepTime * time.Second)
			} else if customerrors.Is(err, context.Canceled) {
				log.Errorf("[CreateBarChildByName]: %+v", err)
				return nil, context.Canceled
			} else {
				log.Errorf("[CreateBarChildByName] Unexpected Error BarChild] :%+v", err)
				log.Errorf("Trigger BarChild Delete: %s", objToUpdate.GetName())
				delErr := group.DeleteBarChildByName(newCtx, objToUpdate.GetName())
				if delErr != nil {
					log.Errorf("Error occur while deleting BarChild: %+v", objToUpdate.GetName())
					return nil, delErr
				}
				log.Errorf("BarChild Deleted: %s", objToUpdate.GetName())
				return nil, err
			}
		} else {
			log.Debugf("[CreateBarChildByName] Patch BarChild Success :%s", objToUpdate.GetName())
			break
		}
	}
	log.Debugf("[UpdateBarChildByName] Executed Successfully %s", objToUpdate.GetName())
	return &GnsBarChild{
		client:   group.client,
		BarChild: result,
	}, nil
}

// ListBarChilds returns slice of all existing objects of this type. Selectors can be provided in opts parameter.
func (group *GnsTsmV1) ListBarChilds(ctx context.Context,
	opts metav1.ListOptions) (result []*GnsBarChild, err error) {
	key := "barchilds.gns.tsm.tanzu.vmware.com"
	if s, ok := subscriptionMap.Load(key); ok {
		items := s.(subscription).informer.GetStore().List()
		result = make([]*GnsBarChild, len(items))
		for k, v := range items {
			item, _ := v.(*basegnstsmtanzuvmwarecomv1.BarChild)
			result[k] = &GnsBarChild{
				client:   group.client,
				BarChild: item,
			}
		}
	} else {
		list, err := group.client.baseClient.GnsTsmV1().
			BarChilds().List(ctx, opts)
		if err != nil {
			return nil, err
		}
		result = make([]*GnsBarChild, len(list.Items))
		for k, v := range list.Items {
			item := v
			result[k] = &GnsBarChild{
				client:   group.client,
				BarChild: &item,
			}
		}
	}
	return
}

type GnsBarChild struct {
	client *Clientset
	*basegnstsmtanzuvmwarecomv1.BarChild
}

// Delete removes obj and all it's children from the database.
func (obj *GnsBarChild) Delete(ctx context.Context) error {
	err := obj.client.Gns().DeleteBarChildByName(ctx, obj.GetName())
	if err != nil {
		return err
	}
	obj.BarChild = nil
	return nil
}

// Update updates spec of object in database. Children and Link can not be updated using this function.
func (obj *GnsBarChild) Update(ctx context.Context) error {
	result, err := obj.client.Gns().UpdateBarChildByName(ctx, obj.BarChild)
	if err != nil {
		return err
	}
	obj.BarChild = result.BarChild
	return nil
}

func (obj *GnsBarChild) GetParent(ctx context.Context) (result *GnsGns, err error) {
	hashedName := helper.GetHashedName("gnses.gns.tsm.tanzu.vmware.com", obj.Labels, obj.Labels["gnses.gns.tsm.tanzu.vmware.com"])
	return obj.client.Gns().GetGnsByName(ctx, hashedName)
}

type barchildGnsTsmV1Chainer struct {
	client       *Clientset
	name         string
	parentLabels map[string]string
}

func (c *barchildGnsTsmV1Chainer) Subscribe() {
	key := "barchilds.gns.tsm.tanzu.vmware.com"
	if _, ok := subscriptionMap.Load(key); !ok {
		informer := informergnstsmtanzuvmwarecomv1.NewBarChildInformer(c.client.baseClient, 0, cache.Indexers{})
		subscribe(key, informer)
	}
}

func (c *barchildGnsTsmV1Chainer) Unsubscribe() {
	key := "barchilds.gns.tsm.tanzu.vmware.com"
	if s, ok := subscriptionMap.Load(key); ok {
		close(s.(subscription).stop)
		subscriptionMap.Delete(key)
	}
}

func (c *barchildGnsTsmV1Chainer) IsSubscribed() bool {
	key := "barchilds.gns.tsm.tanzu.vmware.com"
	_, ok := subscriptionMap.Load(key)
	return ok
}

func (c *barchildGnsTsmV1Chainer) RegisterEventHandler(addCB func(obj *GnsBarChild), updateCB func(oldObj, newObj *GnsBarChild), deleteCB func(obj *GnsBarChild)) (cache.ResourceEventHandlerRegistration, error) {
	fmt.Println("RegisterEventHandler for GnsBarChild")
	var (
		registrationId cache.ResourceEventHandlerRegistration
		err            error
		informer       cache.SharedIndexInformer
	)
	key := "barchilds.gns.tsm.tanzu.vmware.com"
	stopper := make(chan struct{})
	if s, ok := subscriptionMap.Load(key); ok {
		fmt.Println("Informer exists for GnsBarChild")
		sub := s.(subscription)
		informer = sub.informer
	} else {
		fmt.Println("Informer doesn't exists for GnsBarChild, so creating a new one")
		informer = informergnstsmtanzuvmwarecomv1.NewBarChildInformer(c.client.baseClient, 0, cache.Indexers{})
		go informer.Run(stopper)
		subscribe(key, informer)
	}
	registrationId, err = informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
		AddFunc: func(obj interface{}) {
			nc := &GnsBarChild{
				client:   c.client,
				BarChild: obj.(*basegnstsmtanzuvmwarecomv1.BarChild),
			}

			var parent *GnsGns
			gvkExist := false
			for i := 0; i < 600; i++ {
				// Check if parent exists
				p, err := nc.GetParent(context.TODO())
				if err != nil || p == nil {
					time.Sleep(500 * time.Millisecond)
					continue
				}
				parent = p
				// Check GVK

				if parent.Spec.FooChildGvk == nil {
					time.Sleep(500 * time.Millisecond)
					continue
				}

				gvkExist = true
				break
			}
			if parent == nil {
				hashedName := helper.GetHashedName("gnses.gns.tsm.tanzu.vmware.com", nc.Labels, nc.Labels["gnses.gns.tsm.tanzu.vmware.com"])
				parent, err = c.client.Gns().ForceReadGnsByName(context.TODO(), hashedName)
				if err != nil {
					if errors.IsNotFound(err) {
						return
					}
					panic("error occurred while fetching parent " + err.Error())
				}
				panic(fmt.Sprintf("parent found (event loop is stalled) " + nc.DisplayName()))
			}
			if !gvkExist {
				// Check GVK

				if parent.Spec.FooChildGvk == nil {
					return
				}

				panic(fmt.Sprintf("gvk found (event loop is stalled) " + nc.DisplayName()))
			}

			addCB(nc)
		},

		UpdateFunc: func(oldObj, newObj interface{}) {
			oldData := &GnsBarChild{
				client:   c.client,
				BarChild: oldObj.(*basegnstsmtanzuvmwarecomv1.BarChild),
			}
			newData := &GnsBarChild{
				client:   c.client,
				BarChild: newObj.(*basegnstsmtanzuvmwarecomv1.BarChild),
			}
			updateCB(oldData, newData)
		},

		DeleteFunc: func(obj interface{}) {
			nc := &GnsBarChild{
				client:   c.client,
				BarChild: obj.(*basegnstsmtanzuvmwarecomv1.BarChild),
			}

			var parent *GnsGns
			gvkExist := true
			for i := 0; i < 600; i++ {
				// Check if parent exists
				p, err := nc.GetParent(context.TODO())
				if err != nil || p == nil {
					time.Sleep(500 * time.Millisecond)
					continue
				}
				parent = p
				// Check GVK

				if parent.Spec.FooChildGvk != nil {
					time.Sleep(500 * time.Millisecond)
					continue
				}

				gvkExist = false
				break
			}
			if parent == nil {
				hashedName := helper.GetHashedName("gnses.gns.tsm.tanzu.vmware.com", nc.Labels, nc.Labels["gnses.gns.tsm.tanzu.vmware.com"])
				parent, err = c.client.Gns().ForceReadGnsByName(context.TODO(), hashedName)
				if err != nil {
					if errors.IsNotFound(err) {
						return
					}
					panic("error occurred while fetching parent " + err.Error())
				}
				panic(fmt.Sprintf("parent found (event loop is stalled) " + nc.DisplayName()))
			}
			if gvkExist {
				// Check GVK

				if parent.Spec.FooChildGvk != nil {
					return
				}

				panic(fmt.Sprintf("gvk not found (event loop is stalled) " + nc.DisplayName()))
			}

			deleteCB(nc)
		},
	})
	return registrationId, err
}

func (c *barchildGnsTsmV1Chainer) RegisterAddCallback(cbfn func(obj *GnsBarChild)) (cache.ResourceEventHandlerRegistration, error) {
	log.Debugf("[RegisterAddCallback] Received for GnsBarChild")
	var (
		registrationId cache.ResourceEventHandlerRegistration
		err            error
	)
	key := "barchilds.gns.tsm.tanzu.vmware.com"
	stopper := make(chan struct{})
	if s, ok := subscriptionMap.Load(key); ok {
		log.Debugf("[RegisterAddCallback] GnsBarChild Use Subscription Informer")
		sub := s.(subscription)
		registrationId, err = sub.informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
			AddFunc: func(obj interface{}) {
				nc := &GnsBarChild{
					client:   c.client,
					BarChild: obj.(*basegnstsmtanzuvmwarecomv1.BarChild),
				}

				var parent *GnsGns
				gvkExist := false
				for i := 0; i < 600; i++ {
					// Check if parent exists
					p, err := nc.GetParent(context.TODO())
					if err != nil || p == nil {
						time.Sleep(500 * time.Millisecond)
						continue
					}
					parent = p

					// Check GVK

					if parent.Spec.FooChildGvk == nil {
						time.Sleep(500 * time.Millisecond)
						continue
					}

					gvkExist = true

					break
				}

				if parent == nil {
					hashedName := helper.GetHashedName("gnses.gns.tsm.tanzu.vmware.com", nc.Labels, nc.Labels["gnses.gns.tsm.tanzu.vmware.com"])
					parent, err = c.client.Gns().ForceReadGnsByName(context.TODO(), hashedName)
					if err != nil {
						if errors.IsNotFound(err) {
							return
						}

						panic("error occurred while fetching parent " + err.Error())
					}
					panic(fmt.Sprintf("parent found (event loop is stalled) " + nc.DisplayName()))
				}

				if !gvkExist {
					// Check GVK

					if parent.Spec.FooChildGvk == nil {
						return
					}

					panic(fmt.Sprintf("gvk found (event loop is stalled) " + nc.DisplayName()))
				}

				cbfn(nc)
			},
		})
	} else {
		log.Debugf("[RegisterAddCallback] GnsBarChild Create New Informer")
		informer := informergnstsmtanzuvmwarecomv1.NewBarChildInformer(c.client.baseClient, 0, cache.Indexers{})
		registrationId, err = informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
			AddFunc: func(obj interface{}) {
				nc := &GnsBarChild{
					client:   c.client,
					BarChild: obj.(*basegnstsmtanzuvmwarecomv1.BarChild),
				}

				var parent *GnsGns
				gvkExist := false
				for i := 0; i < 600; i++ {
					// Check if parent exists
					p, err := nc.GetParent(context.TODO())
					if err != nil || p == nil {
						time.Sleep(500 * time.Millisecond)
						continue
					}
					parent = p

					// Check GVK

					if parent.Spec.FooChildGvk == nil {
						time.Sleep(500 * time.Millisecond)
						continue
					}

					gvkExist = true

					break
				}

				if parent == nil {
					hashedName := helper.GetHashedName("gnses.gns.tsm.tanzu.vmware.com", nc.Labels, nc.Labels["gnses.gns.tsm.tanzu.vmware.com"])
					parent, err = c.client.Gns().ForceReadGnsByName(context.TODO(), hashedName)
					if err != nil {
						if errors.IsNotFound(err) {
							return
						}

						panic("error occurred while fetching parent " + err.Error())
					}
					panic(fmt.Sprintf("parent found (event loop is stalled) " + nc.DisplayName()))
				}

				if !gvkExist {
					// Check GVK

					if parent.Spec.FooChildGvk == nil {
						return
					}

					panic(fmt.Sprintf("gvk found (event loop is stalled) " + nc.DisplayName()))
				}

				cbfn(nc)
			},
		})
		go informer.Run(stopper)
	}
	return registrationId, err
}

func (c *barchildGnsTsmV1Chainer) RegisterUpdateCallback(cbfn func(oldObj, newObj *GnsBarChild)) (cache.ResourceEventHandlerRegistration, error) {
	log.Debugf("[RegisterUpdateCallback] Received for GnsBarChild")
	var (
		registrationId cache.ResourceEventHandlerRegistration
		err            error
	)
	key := "barchilds.gns.tsm.tanzu.vmware.com"
	stopper := make(chan struct{})
	if s, ok := subscriptionMap.Load(key); ok {
		log.Debugf("[RegisterUpdateCallback] GnsBarChild Use Subscription Informer")
		sub := s.(subscription)
		registrationId, err = sub.informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
			UpdateFunc: func(oldObj, newObj interface{}) {
				oldData := &GnsBarChild{
					client:   c.client,
					BarChild: oldObj.(*basegnstsmtanzuvmwarecomv1.BarChild),
				}
				newData := &GnsBarChild{
					client:   c.client,
					BarChild: newObj.(*basegnstsmtanzuvmwarecomv1.BarChild),
				}
				cbfn(oldData, newData)
			},
		})
	} else {
		log.Debugf("[RegisterUpdateCallback] GnsBarChild Create New Informer")
		informer := informergnstsmtanzuvmwarecomv1.NewBarChildInformer(c.client.baseClient, 0, cache.Indexers{})
		registrationId, err = informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
			UpdateFunc: func(oldObj, newObj interface{}) {
				oldData := &GnsBarChild{
					client:   c.client,
					BarChild: oldObj.(*basegnstsmtanzuvmwarecomv1.BarChild),
				}
				newData := &GnsBarChild{
					client:   c.client,
					BarChild: newObj.(*basegnstsmtanzuvmwarecomv1.BarChild),
				}
				cbfn(oldData, newData)
			},
		})
		go informer.Run(stopper)
	}
	return registrationId, err
}

func (c *barchildGnsTsmV1Chainer) RegisterDeleteCallback(cbfn func(obj *GnsBarChild)) (cache.ResourceEventHandlerRegistration, error) {
	log.Debugf("[RegisterDeleteCallback] Received for GnsBarChild")
	var (
		registrationId cache.ResourceEventHandlerRegistration
		err            error
	)
	key := "barchilds.gns.tsm.tanzu.vmware.com"
	stopper := make(chan struct{})
	if s, ok := subscriptionMap.Load(key); ok {
		log.Debugf("[RegisterDeleteCallback] GnsBarChild Use Subscription Informer")
		sub := s.(subscription)
		registrationId, err = sub.informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
			DeleteFunc: func(obj interface{}) {
				nc := &GnsBarChild{
					client:   c.client,
					BarChild: obj.(*basegnstsmtanzuvmwarecomv1.BarChild),
				}

				var parent *GnsGns
				gvkExist := true
				for i := 0; i < 600; i++ {
					// Check if parent exists
					p, err := nc.GetParent(context.TODO())
					if err != nil || p == nil {
						time.Sleep(500 * time.Millisecond)
						continue
					}
					parent = p

					// Check GVK

					if parent.Spec.FooChildGvk != nil {
						time.Sleep(500 * time.Millisecond)
						continue
					}

					gvkExist = false
					break
				}

				if parent == nil {
					hashedName := helper.GetHashedName("gnses.gns.tsm.tanzu.vmware.com", nc.Labels, nc.Labels["gnses.gns.tsm.tanzu.vmware.com"])
					parent, err = c.client.Gns().ForceReadGnsByName(context.TODO(), hashedName)
					if err != nil {
						if errors.IsNotFound(err) {
							return
						}

						panic("error occurred while fetching parent " + err.Error())
					}
					panic(fmt.Sprintf("parent found (event loop is stalled) " + nc.DisplayName()))
				}

				if gvkExist {
					// Check GVK

					if parent.Spec.FooChildGvk != nil {
						return
					}

					panic(fmt.Sprintf("gvk not found (event loop is stalled) " + nc.DisplayName()))
				}

				cbfn(nc)
			},
		})
	} else {
		log.Debugf("[RegisterDeleteCallback] GnsBarChild Create New Informer")
		informer := informergnstsmtanzuvmwarecomv1.NewBarChildInformer(c.client.baseClient, 0, cache.Indexers{})
		registrationId, err = informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
			DeleteFunc: func(obj interface{}) {
				nc := &GnsBarChild{
					client:   c.client,
					BarChild: obj.(*basegnstsmtanzuvmwarecomv1.BarChild),
				}

				var parent *GnsGns
				gvkExist := true
				for i := 0; i < 600; i++ {
					// Check if parent exists
					p, err := nc.GetParent(context.TODO())
					if err != nil || p == nil {
						time.Sleep(500 * time.Millisecond)
						continue
					}
					parent = p

					// Check GVK

					if parent.Spec.FooChildGvk != nil {
						time.Sleep(500 * time.Millisecond)
						continue
					}

					gvkExist = false

					break
				}

				if parent == nil {
					hashedName := helper.GetHashedName("gnses.gns.tsm.tanzu.vmware.com", nc.Labels, nc.Labels["gnses.gns.tsm.tanzu.vmware.com"])
					parent, err = c.client.Gns().ForceReadGnsByName(context.TODO(), hashedName)
					if err != nil {
						if errors.IsNotFound(err) {
							return
						}

						panic("error occurred while fetching parent " + err.Error())
					}
					panic(fmt.Sprintf("parent found (event loop is stalled) " + nc.DisplayName()))
				}

				if gvkExist {
					// Check GVK

					if parent.Spec.FooChildGvk != nil {
						return
					}

					panic(fmt.Sprintf("gvk not found (event loop is stalled) " + nc.DisplayName()))
				}

				cbfn(nc)
			},
		})
		go informer.Run(stopper)
	}
	return registrationId, err
}

// GetIgnoreChildByName returns object stored in the database under the hashedName which is a hash of display
// name and parents names. Use it when you know hashed name of object.
func (group *GnsTsmV1) GetIgnoreChildByName(ctx context.Context, hashedName string) (*GnsIgnoreChild, error) {
	key := "ignorechilds.gns.tsm.tanzu.vmware.com"
	if s, ok := subscriptionMap.Load(key); ok {
		log.Debugf("[GetIgnoreChildByName] GetObject: %s from cache", hashedName)
		item, exists, err := s.(subscription).informer.GetStore().GetByKey(hashedName)
		if !exists {
			return nil, err
		}

		log.Debugf("[GetIgnoreChildByName] Object: %s exists in cache", hashedName)
		result, _ := item.(*basegnstsmtanzuvmwarecomv1.IgnoreChild)
		return &GnsIgnoreChild{
			client:      group.client,
			IgnoreChild: result,
		}, nil
	} else {
		retryCount := 0
		for {
			result, err := group.client.baseClient.
				GnsTsmV1().
				IgnoreChilds().Get(ctx, hashedName, metav1.GetOptions{})
			if err != nil {
				log.Errorf("[GetIgnoreChildByName] Failed to Get IgnoreChilds: %+v", err)
				if errors.IsTimeout(err) || customerrors.Is(err, context.DeadlineExceeded) {
					log.Errorf("[Retry Count: %d ] %+v", retryCount, err)
					if retryCount == maxRetryCount {
						log.Error("Max Retry exceed on Get IgnoreChilds")
						return nil, err
					}
					retryCount += 1
					time.Sleep(sleepTime * time.Second)
				} else if customerrors.Is(err, context.Canceled) {
					log.Errorf("[GetIgnoreChildByName]: %+v", err)
					return nil, context.Canceled
				} else {
					log.Errorf("[GetIgnoreChildByName]: %+v", err)
					return nil, err
				}
			} else {
				return &GnsIgnoreChild{
					client:      group.client,
					IgnoreChild: result,
				}, nil
			}
		}
	}
}

// ForceReadIgnoreChildByName read object directly from the database under the hashedName which is a hash of display
// name and parents names. Use it when you know hashed name of object.
func (group *GnsTsmV1) ForceReadIgnoreChildByName(ctx context.Context, hashedName string) (*GnsIgnoreChild, error) {
	log.Debugf("[ForceReadIgnoreChildByName] Received object :%s to read from DB", hashedName)
	retryCount := 0
	for {
		result, err := group.client.baseClient.
			GnsTsmV1().
			IgnoreChilds().Get(ctx, hashedName, metav1.GetOptions{})
		if err != nil {
			log.Errorf("[ForceReadIgnoreChildByName] Failed to Get IgnoreChilds: %+v", err)
			if errors.IsTimeout(err) || customerrors.Is(err, context.DeadlineExceeded) {
				log.Errorf("[Retry Count: %d ] %+v", retryCount, err)
				if retryCount == maxRetryCount {
					log.Error("Max Retry exceed on Get IgnoreChilds")
					return nil, err
				}
				retryCount += 1
				time.Sleep(sleepTime * time.Second)
			} else if customerrors.Is(err, context.Canceled) {
				log.Errorf("[ForceReadIgnoreChildByName]: %+v", err)
				return nil, context.Canceled
			} else {
				log.Errorf("[ForceReadIgnoreChildByName]: %+v", err)
				return nil, err
			}
		} else {
			log.Debugf("[ForceReadIgnoreChildByName] Executed Successfully :%s", hashedName)
			return &GnsIgnoreChild{
				client:      group.client,
				IgnoreChild: result,
			}, nil
		}
	}
}

// DeleteIgnoreChildByName deletes object stored in the database under the hashedName which is a hash of
// display name and parents names. Use it when you know hashed name of object.
func (group *GnsTsmV1) DeleteIgnoreChildByName(ctx context.Context, hashedName string) (err error) {
	log.Debugf("[DeleteIgnoreChildByName] Received objectToDelete: %s", hashedName)

	var (
		retryCount int
		result     *basegnstsmtanzuvmwarecomv1.IgnoreChild
	)
	retryCount = 0
	for {
		result, err = group.client.baseClient.
			GnsTsmV1().
			IgnoreChilds().Get(ctx, hashedName, metav1.GetOptions{})
		if err != nil {
			log.Errorf("[DeleteIgnoreChildByName] Failed to Get IgnoreChilds: %+v", err)
			if errors.IsTimeout(err) || customerrors.Is(err, context.DeadlineExceeded) {
				log.Errorf("[Retry Count: %d ] %+v", retryCount, err)
				if retryCount == maxRetryCount {
					log.Error("Max Retry exceed on Get IgnoreChilds")
					return err
				}
				retryCount += 1
				time.Sleep(sleepTime * time.Second)
			} else if customerrors.Is(err, context.Canceled) {
				log.Errorf("[DeleteIgnoreChildByName]: %+v", err)
				return context.Canceled
			} else if errors.IsNotFound(err) {
				log.Errorf("[DeleteIgnoreChildByName] Object Notfound: %+v", err)
				break
			} else {
				log.Errorf("[DeleteIgnoreChildByName]: %+v", err)
				return err
			}
		} else {
			break
		}
	}

	retryCount = 0
	for {
		err = group.client.baseClient.
			GnsTsmV1().
			IgnoreChilds().Delete(ctx, hashedName, metav1.DeleteOptions{})
		if err != nil {
			log.Errorf("[DeleteIgnoreChildByName] failed to delete IgnoreChilds: %+v", err)
			if errors.IsTimeout(err) || customerrors.Is(err, context.DeadlineExceeded) {
				log.Errorf("[Retry Count: %d ] %+v", retryCount, err)
				if retryCount == maxRetryCount {
					log.Error("Max retry exceed on delete IgnoreChilds")
					return err
				}
				retryCount += 1
				time.Sleep(sleepTime * time.Second)
			} else if customerrors.Is(err, context.Canceled) {
				log.Errorf("[DeleteIgnoreChildByName]: %+v", err)
				return context.Canceled
			} else if errors.IsNotFound(err) {
				log.Errorf("[DeleteIgnoreChildByName] Object not found: %+v", err)
				break
			} else {
				log.Errorf("[DeleteIgnoreChildByName]: %+v", err)
				return err
			}
		}
	}
	// Get Parent Node and check if gvk present before patch

	var gvkPresent bool
	log.Debugf("[DeleteIgnoreChildByName] Get Parent details")
	var patch Patch
	parents := result.GetLabels()
	if parents == nil {
		parents = make(map[string]string)
	}
	parentName, ok := parents["gnses.gns.tsm.tanzu.vmware.com"]
	if !ok {
		parentName = helper.DEFAULT_KEY
	}
	if result.GetLabels() != nil {
		if parents[common.IS_NAME_HASHED_LABEL] == "true" {
			parentName = helper.GetHashedName("gnses.gns.tsm.tanzu.vmware.com", parents, parentName)
		}
	} else {
		parentName = helper.GetHashedName("gnses.gns.tsm.tanzu.vmware.com", parents, parentName)
	}
	parentData, err := group.client.baseClient.
		GnsTsmV1().
		Gnses().Get(ctx, parentName, metav1.GetOptions{})
	if err != nil {
		log.Errorf("[DeleteIgnoreChildByName] Failed to get Parent node: %+v", err)
		if errors.IsNotFound(err) {
			return nil
		} else {
			return err
		}
	}

	if parentData.Spec.IgnoreChildGvk != nil {
		log.Debugf("[DeleteIgnoreChildByName] GVK present in parent for node: %s", hashedName)
		gvkPresent = true
	}

	if gvkPresent {

		patchOp := PatchOp{
			Op:   "remove",
			Path: "/spec/ignoreChildGvk",
		}

		patch = append(patch, patchOp)
		marshaled, err := patch.Marshal()
		if err != nil {
			return err
		}

		retryCount = 0
		newCtx := context.TODO()
		for {
			_, err = group.client.baseClient.
				GnsTsmV1().
				Gnses().Patch(newCtx, parentName, types.JSONPatchType, marshaled, metav1.PatchOptions{})
			if err != nil {
				log.Errorf("Failed to patch IgnoreChild gvk in parent node[Gnses]: %+v", err)
				if errors.IsTimeout(err) || customerrors.Is(err, context.DeadlineExceeded) {
					log.Errorf("[Retry Count: %d ] %+v", retryCount, err)
					if retryCount == maxRetryCount {
						log.Error("Max Retry exceed on patching gvk")
						return err
					}
					retryCount += 1
					time.Sleep(sleepTime * time.Second)
				} else if customerrors.Is(err, context.Canceled) {
					log.Errorf("[DeleteIgnoreChildByName]: %+v", err)
					return context.Canceled
				} else {
					log.Errorf("Unexpected Error occur IgnoreChild]: %+v", err)
					return err
				}
			} else {
				log.Debugf("[DeleteIgnoreChildByName] Patch IgnoreChild Success: %s", hashedName)
				break
			}
		}
		log.Debugf("[DeleteIgnoreChildByName] Executed Successfully: %s", hashedName)
	}

	return
}

// CreateIgnoreChildByName creates object in the database without hashing the name.
// Use it directly ONLY when objToCreate.Name is hashed name of the object.
func (group *GnsTsmV1) CreateIgnoreChildByName(ctx context.Context,
	objToCreate *basegnstsmtanzuvmwarecomv1.IgnoreChild) (*GnsIgnoreChild, error) {
	log.Debugf("[CreateIgnoreChildByName] Received objToCreate: %s", objToCreate.GetName())
	if objToCreate.GetLabels() == nil {
		objToCreate.Labels = make(map[string]string)
	}
	if _, ok := objToCreate.Labels[common.DISPLAY_NAME_LABEL]; !ok {
		objToCreate.Labels[common.DISPLAY_NAME_LABEL] = objToCreate.GetName()
	}

	var (
		retryCount int
		result     *basegnstsmtanzuvmwarecomv1.IgnoreChild
		err        error
	)
	retryCount = 0
	for {
		result, err = group.client.baseClient.
			GnsTsmV1().
			IgnoreChilds().Create(ctx, objToCreate, metav1.CreateOptions{})
		if err != nil {
			log.Errorf("[CreateIgnoreChildByName] Failed to Create IgnoreChilds: %+v", err)
			if errors.IsTimeout(err) || customerrors.Is(err, context.DeadlineExceeded) {
				log.Errorf("[Retry Count: %d ] %+v", retryCount, err)
				if retryCount == maxRetryCount {
					log.Error("Max Retry exceed on Get IgnoreChilds")
					return nil, err
				}
				retryCount += 1
				time.Sleep(sleepTime * time.Second)
			} else if customerrors.Is(err, context.Canceled) {
				log.Errorf("[CreateIgnoreChildByName]: %+v", err)
				return nil, context.Canceled
			} else {
				log.Errorf("[CreateIgnoreChildByName]: %+v", err)
				return nil, err
			}
		} else {
			break
		}
	}
	log.Debugf("[CreateIgnoreChildByName] IgnoreChilds created successfully: %s", objToCreate.GetName())

	parentName, ok := objToCreate.GetLabels()["gnses.gns.tsm.tanzu.vmware.com"]
	if !ok {
		parentName = helper.DEFAULT_KEY
	}
	if objToCreate.Labels[common.IS_NAME_HASHED_LABEL] == "true" {
		parentName = helper.GetHashedName("gnses.gns.tsm.tanzu.vmware.com", objToCreate.GetLabels(), parentName)
	}

	var patch Patch
	patchOp := PatchOp{
		Op:   "replace",
		Path: "/spec/ignoreChildGvk",
		Value: basegnstsmtanzuvmwarecomv1.Child{
			Group: "gns.tsm.tanzu.vmware.com",
			Kind:  "IgnoreChild",
			Name:  objToCreate.Name,
		},
	}
	patch = append(patch, patchOp)
	marshaled, err := patch.Marshal()
	if err != nil {
		return nil, err
	}
	retryCount = 0
	newCtx := context.TODO()
	for {
		_, err = group.client.baseClient.
			GnsTsmV1().
			Gnses().Patch(newCtx, parentName, types.JSONPatchType, marshaled, metav1.PatchOptions{})
		if err != nil {
			log.Errorf("[CreateIgnoreChildByName] Failed to patch IgnoreChild gvk in parent node[Gnses]: %+v", err)
			if errors.IsTimeout(err) || customerrors.Is(err, context.DeadlineExceeded) {
				log.Errorf("[Retry Count: %d ] %+v", retryCount, err)
				if retryCount == maxRetryCount {
					log.Error("Max Retry exceed on patching gvk")
					log.Errorf("Trigger IgnoreChild Delete: %s", objToCreate.GetName())
					delErr := group.DeleteIgnoreChildByName(newCtx, objToCreate.GetName())
					if delErr != nil {
						log.Errorf("Error occur while deleting IgnoreChild: %s", objToCreate.GetName())
						return nil, delErr
					}
					log.Errorf("IgnoreChild Deleted: %s", objToCreate.GetName())
					return nil, err
				}
				retryCount += 1
				time.Sleep(sleepTime * time.Second)
			} else if customerrors.Is(err, context.Canceled) {
				log.Errorf("[CreateIgnoreChildByName]: %+v", err)
				return nil, context.Canceled
			} else {
				log.Errorf("[CreateIgnoreChildByName] Unexpected Error IgnoreChild] :%+v", err)
				log.Errorf("Trigger IgnoreChild Delete: %s", objToCreate.GetName())
				delErr := group.DeleteIgnoreChildByName(newCtx, objToCreate.GetName())
				if delErr != nil {
					log.Errorf("Error occur while deleting IgnoreChild: %+v", objToCreate.GetName())
					return nil, delErr
				}
				log.Errorf("IgnoreChild Deleted: %s", objToCreate.GetName())
				return nil, err
			}
		} else {
			log.Debugf("[CreateIgnoreChildByName] Patch IgnoreChild Success :%s", objToCreate.GetName())
			break
		}
	}

	log.Debugf("[CreateIgnoreChildByName] Executed Successfully: %s", objToCreate.GetName())
	return &GnsIgnoreChild{
		client:      group.client,
		IgnoreChild: result,
	}, nil
}

// UpdateIgnoreChildByName updates object stored in the database under the hashedName which is a hash of
// display name and parents names.
func (group *GnsTsmV1) UpdateIgnoreChildByName(ctx context.Context,
	objToUpdate *basegnstsmtanzuvmwarecomv1.IgnoreChild) (*GnsIgnoreChild, error) {
	log.Debugf("[UpdateIgnoreChildByName] Received objToUpdate: %s", objToUpdate.GetName())

	var patch Patch

	if objToUpdate.Annotations != nil || objToUpdate.Labels != nil {
		current, err := group.client.Gns().GetIgnoreChildByName(ctx, objToUpdate.Name)
		if err != nil {
			return nil, err
		}

		if objToUpdate.Annotations != nil {
			if current.Annotations[ownershipAnnotation] != "" {
				objToUpdate.Annotations[ownershipAnnotation] = current.Annotations[ownershipAnnotation]
			}
			patch = append(patch, PatchOp{
				Op:    "replace",
				Path:  "/metadata/annotations",
				Value: objToUpdate.Annotations,
			})
		}

		if objToUpdate.Labels != nil {
			parentsList := helper.GetCRDParentsMap()["ignorechilds.gns.tsm.tanzu.vmware.com"]
			for _, k := range parentsList {
				objToUpdate.Labels[k] = current.Labels[k]
			}
			objToUpdate.Labels[common.IS_NAME_HASHED_LABEL] = current.Labels[common.IS_NAME_HASHED_LABEL]
			objToUpdate.Labels[common.DISPLAY_NAME_LABEL] = current.Labels[common.DISPLAY_NAME_LABEL]
			patch = append(patch, PatchOp{
				Op:    "replace",
				Path:  "/metadata/labels",
				Value: objToUpdate.Labels,
			})
		}
	}

	var rt reflect.Type

	rt = reflect.TypeOf(objToUpdate.Spec.Name)
	if rt.Kind() == reflect.Slice || rt.Kind() == reflect.Array || rt.Kind() == reflect.Map {
		if !reflect.ValueOf(objToUpdate.Spec.Name).IsNil() {
			patchValueName := objToUpdate.Spec.Name
			patchOpName := PatchOp{
				Op:    "replace",
				Path:  "/spec/name",
				Value: patchValueName,
			}
			patch = append(patch, patchOpName)
		}
	} else {
		patchValueName := objToUpdate.Spec.Name
		patchOpName := PatchOp{
			Op:    "replace",
			Path:  "/spec/name",
			Value: patchValueName,
		}
		patch = append(patch, patchOpName)
	}

	marshaled, err := patch.Marshal()
	if err != nil {
		return nil, err
	}

	var (
		result *basegnstsmtanzuvmwarecomv1.IgnoreChild
	)
	newCtx := context.TODO()
	retryCount := 0
	for {
		result, err = group.client.baseClient.
			GnsTsmV1().
			IgnoreChilds().Patch(newCtx, objToUpdate.GetName(), types.JSONPatchType, marshaled, metav1.PatchOptions{}, "")
		if err != nil {
			log.Errorf("[UpdateIgnoreChildByName] Failed to patch IgnoreChild gvk in parent node[Gnses]: %+v", err)
			if errors.IsTimeout(err) || customerrors.Is(err, context.DeadlineExceeded) {
				log.Errorf("[Retry Count: %d ] %+v", retryCount, err)
				if retryCount == maxRetryCount {
					log.Error("Max Retry exceed on patching gvk")
					log.Errorf("Trigger IgnoreChild Delete: %s", objToUpdate.GetName())
					delErr := group.DeleteIgnoreChildByName(newCtx, objToUpdate.GetName())
					if delErr != nil {
						log.Errorf("Error occur while deleting IgnoreChild: %s", objToUpdate.GetName())
						return nil, delErr
					}
					log.Errorf("IgnoreChild Deleted: %s", objToUpdate.GetName())
					return nil, err
				}
				retryCount += 1
				time.Sleep(sleepTime * time.Second)
			} else if customerrors.Is(err, context.Canceled) {
				log.Errorf("[CreateIgnoreChildByName]: %+v", err)
				return nil, context.Canceled
			} else {
				log.Errorf("[CreateIgnoreChildByName] Unexpected Error IgnoreChild] :%+v", err)
				log.Errorf("Trigger IgnoreChild Delete: %s", objToUpdate.GetName())
				delErr := group.DeleteIgnoreChildByName(newCtx, objToUpdate.GetName())
				if delErr != nil {
					log.Errorf("Error occur while deleting IgnoreChild: %+v", objToUpdate.GetName())
					return nil, delErr
				}
				log.Errorf("IgnoreChild Deleted: %s", objToUpdate.GetName())
				return nil, err
			}
		} else {
			log.Debugf("[CreateIgnoreChildByName] Patch IgnoreChild Success :%s", objToUpdate.GetName())
			break
		}
	}
	log.Debugf("[UpdateIgnoreChildByName] Executed Successfully %s", objToUpdate.GetName())
	return &GnsIgnoreChild{
		client:      group.client,
		IgnoreChild: result,
	}, nil
}

// ListIgnoreChilds returns slice of all existing objects of this type. Selectors can be provided in opts parameter.
func (group *GnsTsmV1) ListIgnoreChilds(ctx context.Context,
	opts metav1.ListOptions) (result []*GnsIgnoreChild, err error) {
	key := "ignorechilds.gns.tsm.tanzu.vmware.com"
	if s, ok := subscriptionMap.Load(key); ok {
		items := s.(subscription).informer.GetStore().List()
		result = make([]*GnsIgnoreChild, len(items))
		for k, v := range items {
			item, _ := v.(*basegnstsmtanzuvmwarecomv1.IgnoreChild)
			result[k] = &GnsIgnoreChild{
				client:      group.client,
				IgnoreChild: item,
			}
		}
	} else {
		list, err := group.client.baseClient.GnsTsmV1().
			IgnoreChilds().List(ctx, opts)
		if err != nil {
			return nil, err
		}
		result = make([]*GnsIgnoreChild, len(list.Items))
		for k, v := range list.Items {
			item := v
			result[k] = &GnsIgnoreChild{
				client:      group.client,
				IgnoreChild: &item,
			}
		}
	}
	return
}

type GnsIgnoreChild struct {
	client *Clientset
	*basegnstsmtanzuvmwarecomv1.IgnoreChild
}

// Delete removes obj and all it's children from the database.
func (obj *GnsIgnoreChild) Delete(ctx context.Context) error {
	err := obj.client.Gns().DeleteIgnoreChildByName(ctx, obj.GetName())
	if err != nil {
		return err
	}
	obj.IgnoreChild = nil
	return nil
}

// Update updates spec of object in database. Children and Link can not be updated using this function.
func (obj *GnsIgnoreChild) Update(ctx context.Context) error {
	result, err := obj.client.Gns().UpdateIgnoreChildByName(ctx, obj.IgnoreChild)
	if err != nil {
		return err
	}
	obj.IgnoreChild = result.IgnoreChild
	return nil
}

func (obj *GnsIgnoreChild) GetParent(ctx context.Context) (result *GnsGns, err error) {
	hashedName := helper.GetHashedName("gnses.gns.tsm.tanzu.vmware.com", obj.Labels, obj.Labels["gnses.gns.tsm.tanzu.vmware.com"])
	return obj.client.Gns().GetGnsByName(ctx, hashedName)
}

type ignorechildGnsTsmV1Chainer struct {
	client       *Clientset
	name         string
	parentLabels map[string]string
}

func (c *ignorechildGnsTsmV1Chainer) Subscribe() {
	key := "ignorechilds.gns.tsm.tanzu.vmware.com"
	if _, ok := subscriptionMap.Load(key); !ok {
		informer := informergnstsmtanzuvmwarecomv1.NewIgnoreChildInformer(c.client.baseClient, 0, cache.Indexers{})
		subscribe(key, informer)
	}
}

func (c *ignorechildGnsTsmV1Chainer) Unsubscribe() {
	key := "ignorechilds.gns.tsm.tanzu.vmware.com"
	if s, ok := subscriptionMap.Load(key); ok {
		close(s.(subscription).stop)
		subscriptionMap.Delete(key)
	}
}

func (c *ignorechildGnsTsmV1Chainer) IsSubscribed() bool {
	key := "ignorechilds.gns.tsm.tanzu.vmware.com"
	_, ok := subscriptionMap.Load(key)
	return ok
}

func (c *ignorechildGnsTsmV1Chainer) RegisterEventHandler(addCB func(obj *GnsIgnoreChild), updateCB func(oldObj, newObj *GnsIgnoreChild), deleteCB func(obj *GnsIgnoreChild)) (cache.ResourceEventHandlerRegistration, error) {
	fmt.Println("RegisterEventHandler for GnsIgnoreChild")
	var (
		registrationId cache.ResourceEventHandlerRegistration
		err            error
		informer       cache.SharedIndexInformer
	)
	key := "ignorechilds.gns.tsm.tanzu.vmware.com"
	stopper := make(chan struct{})
	if s, ok := subscriptionMap.Load(key); ok {
		fmt.Println("Informer exists for GnsIgnoreChild")
		sub := s.(subscription)
		informer = sub.informer
	} else {
		fmt.Println("Informer doesn't exists for GnsIgnoreChild, so creating a new one")
		informer = informergnstsmtanzuvmwarecomv1.NewIgnoreChildInformer(c.client.baseClient, 0, cache.Indexers{})
		go informer.Run(stopper)
		subscribe(key, informer)
	}
	registrationId, err = informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
		AddFunc: func(obj interface{}) {
			nc := &GnsIgnoreChild{
				client:      c.client,
				IgnoreChild: obj.(*basegnstsmtanzuvmwarecomv1.IgnoreChild),
			}

			var parent *GnsGns
			gvkExist := false
			for i := 0; i < 600; i++ {
				// Check if parent exists
				p, err := nc.GetParent(context.TODO())
				if err != nil || p == nil {
					time.Sleep(500 * time.Millisecond)
					continue
				}
				parent = p
				// Check GVK

				if parent.Spec.IgnoreChildGvk == nil {
					time.Sleep(500 * time.Millisecond)
					continue
				}

				gvkExist = true
				break
			}
			if parent == nil {
				hashedName := helper.GetHashedName("gnses.gns.tsm.tanzu.vmware.com", nc.Labels, nc.Labels["gnses.gns.tsm.tanzu.vmware.com"])
				parent, err = c.client.Gns().ForceReadGnsByName(context.TODO(), hashedName)
				if err != nil {
					if errors.IsNotFound(err) {
						return
					}
					panic("error occurred while fetching parent " + err.Error())
				}
				panic(fmt.Sprintf("parent found (event loop is stalled) " + nc.DisplayName()))
			}
			if !gvkExist {
				// Check GVK

				if parent.Spec.IgnoreChildGvk == nil {
					return
				}

				panic(fmt.Sprintf("gvk found (event loop is stalled) " + nc.DisplayName()))
			}

			addCB(nc)
		},

		UpdateFunc: func(oldObj, newObj interface{}) {
			oldData := &GnsIgnoreChild{
				client:      c.client,
				IgnoreChild: oldObj.(*basegnstsmtanzuvmwarecomv1.IgnoreChild),
			}
			newData := &GnsIgnoreChild{
				client:      c.client,
				IgnoreChild: newObj.(*basegnstsmtanzuvmwarecomv1.IgnoreChild),
			}
			updateCB(oldData, newData)
		},

		DeleteFunc: func(obj interface{}) {
			nc := &GnsIgnoreChild{
				client:      c.client,
				IgnoreChild: obj.(*basegnstsmtanzuvmwarecomv1.IgnoreChild),
			}

			var parent *GnsGns
			gvkExist := true
			for i := 0; i < 600; i++ {
				// Check if parent exists
				p, err := nc.GetParent(context.TODO())
				if err != nil || p == nil {
					time.Sleep(500 * time.Millisecond)
					continue
				}
				parent = p
				// Check GVK

				if parent.Spec.IgnoreChildGvk != nil {
					time.Sleep(500 * time.Millisecond)
					continue
				}

				gvkExist = false
				break
			}
			if parent == nil {
				hashedName := helper.GetHashedName("gnses.gns.tsm.tanzu.vmware.com", nc.Labels, nc.Labels["gnses.gns.tsm.tanzu.vmware.com"])
				parent, err = c.client.Gns().ForceReadGnsByName(context.TODO(), hashedName)
				if err != nil {
					if errors.IsNotFound(err) {
						return
					}
					panic("error occurred while fetching parent " + err.Error())
				}
				panic(fmt.Sprintf("parent found (event loop is stalled) " + nc.DisplayName()))
			}
			if gvkExist {
				// Check GVK

				if parent.Spec.IgnoreChildGvk != nil {
					return
				}

				panic(fmt.Sprintf("gvk not found (event loop is stalled) " + nc.DisplayName()))
			}

			deleteCB(nc)
		},
	})
	return registrationId, err
}

func (c *ignorechildGnsTsmV1Chainer) RegisterAddCallback(cbfn func(obj *GnsIgnoreChild)) (cache.ResourceEventHandlerRegistration, error) {
	log.Debugf("[RegisterAddCallback] Received for GnsIgnoreChild")
	var (
		registrationId cache.ResourceEventHandlerRegistration
		err            error
	)
	key := "ignorechilds.gns.tsm.tanzu.vmware.com"
	stopper := make(chan struct{})
	if s, ok := subscriptionMap.Load(key); ok {
		log.Debugf("[RegisterAddCallback] GnsIgnoreChild Use Subscription Informer")
		sub := s.(subscription)
		registrationId, err = sub.informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
			AddFunc: func(obj interface{}) {
				nc := &GnsIgnoreChild{
					client:      c.client,
					IgnoreChild: obj.(*basegnstsmtanzuvmwarecomv1.IgnoreChild),
				}

				var parent *GnsGns
				gvkExist := false
				for i := 0; i < 600; i++ {
					// Check if parent exists
					p, err := nc.GetParent(context.TODO())
					if err != nil || p == nil {
						time.Sleep(500 * time.Millisecond)
						continue
					}
					parent = p

					// Check GVK

					if parent.Spec.IgnoreChildGvk == nil {
						time.Sleep(500 * time.Millisecond)
						continue
					}

					gvkExist = true

					break
				}

				if parent == nil {
					hashedName := helper.GetHashedName("gnses.gns.tsm.tanzu.vmware.com", nc.Labels, nc.Labels["gnses.gns.tsm.tanzu.vmware.com"])
					parent, err = c.client.Gns().ForceReadGnsByName(context.TODO(), hashedName)
					if err != nil {
						if errors.IsNotFound(err) {
							return
						}

						panic("error occurred while fetching parent " + err.Error())
					}
					panic(fmt.Sprintf("parent found (event loop is stalled) " + nc.DisplayName()))
				}

				if !gvkExist {
					// Check GVK

					if parent.Spec.IgnoreChildGvk == nil {
						return
					}

					panic(fmt.Sprintf("gvk found (event loop is stalled) " + nc.DisplayName()))
				}

				cbfn(nc)
			},
		})
	} else {
		log.Debugf("[RegisterAddCallback] GnsIgnoreChild Create New Informer")
		informer := informergnstsmtanzuvmwarecomv1.NewIgnoreChildInformer(c.client.baseClient, 0, cache.Indexers{})
		registrationId, err = informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
			AddFunc: func(obj interface{}) {
				nc := &GnsIgnoreChild{
					client:      c.client,
					IgnoreChild: obj.(*basegnstsmtanzuvmwarecomv1.IgnoreChild),
				}

				var parent *GnsGns
				gvkExist := false
				for i := 0; i < 600; i++ {
					// Check if parent exists
					p, err := nc.GetParent(context.TODO())
					if err != nil || p == nil {
						time.Sleep(500 * time.Millisecond)
						continue
					}
					parent = p

					// Check GVK

					if parent.Spec.IgnoreChildGvk == nil {
						time.Sleep(500 * time.Millisecond)
						continue
					}

					gvkExist = true

					break
				}

				if parent == nil {
					hashedName := helper.GetHashedName("gnses.gns.tsm.tanzu.vmware.com", nc.Labels, nc.Labels["gnses.gns.tsm.tanzu.vmware.com"])
					parent, err = c.client.Gns().ForceReadGnsByName(context.TODO(), hashedName)
					if err != nil {
						if errors.IsNotFound(err) {
							return
						}

						panic("error occurred while fetching parent " + err.Error())
					}
					panic(fmt.Sprintf("parent found (event loop is stalled) " + nc.DisplayName()))
				}

				if !gvkExist {
					// Check GVK

					if parent.Spec.IgnoreChildGvk == nil {
						return
					}

					panic(fmt.Sprintf("gvk found (event loop is stalled) " + nc.DisplayName()))
				}

				cbfn(nc)
			},
		})
		go informer.Run(stopper)
	}
	return registrationId, err
}

func (c *ignorechildGnsTsmV1Chainer) RegisterUpdateCallback(cbfn func(oldObj, newObj *GnsIgnoreChild)) (cache.ResourceEventHandlerRegistration, error) {
	log.Debugf("[RegisterUpdateCallback] Received for GnsIgnoreChild")
	var (
		registrationId cache.ResourceEventHandlerRegistration
		err            error
	)
	key := "ignorechilds.gns.tsm.tanzu.vmware.com"
	stopper := make(chan struct{})
	if s, ok := subscriptionMap.Load(key); ok {
		log.Debugf("[RegisterUpdateCallback] GnsIgnoreChild Use Subscription Informer")
		sub := s.(subscription)
		registrationId, err = sub.informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
			UpdateFunc: func(oldObj, newObj interface{}) {
				oldData := &GnsIgnoreChild{
					client:      c.client,
					IgnoreChild: oldObj.(*basegnstsmtanzuvmwarecomv1.IgnoreChild),
				}
				newData := &GnsIgnoreChild{
					client:      c.client,
					IgnoreChild: newObj.(*basegnstsmtanzuvmwarecomv1.IgnoreChild),
				}
				cbfn(oldData, newData)
			},
		})
	} else {
		log.Debugf("[RegisterUpdateCallback] GnsIgnoreChild Create New Informer")
		informer := informergnstsmtanzuvmwarecomv1.NewIgnoreChildInformer(c.client.baseClient, 0, cache.Indexers{})
		registrationId, err = informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
			UpdateFunc: func(oldObj, newObj interface{}) {
				oldData := &GnsIgnoreChild{
					client:      c.client,
					IgnoreChild: oldObj.(*basegnstsmtanzuvmwarecomv1.IgnoreChild),
				}
				newData := &GnsIgnoreChild{
					client:      c.client,
					IgnoreChild: newObj.(*basegnstsmtanzuvmwarecomv1.IgnoreChild),
				}
				cbfn(oldData, newData)
			},
		})
		go informer.Run(stopper)
	}
	return registrationId, err
}

func (c *ignorechildGnsTsmV1Chainer) RegisterDeleteCallback(cbfn func(obj *GnsIgnoreChild)) (cache.ResourceEventHandlerRegistration, error) {
	log.Debugf("[RegisterDeleteCallback] Received for GnsIgnoreChild")
	var (
		registrationId cache.ResourceEventHandlerRegistration
		err            error
	)
	key := "ignorechilds.gns.tsm.tanzu.vmware.com"
	stopper := make(chan struct{})
	if s, ok := subscriptionMap.Load(key); ok {
		log.Debugf("[RegisterDeleteCallback] GnsIgnoreChild Use Subscription Informer")
		sub := s.(subscription)
		registrationId, err = sub.informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
			DeleteFunc: func(obj interface{}) {
				nc := &GnsIgnoreChild{
					client:      c.client,
					IgnoreChild: obj.(*basegnstsmtanzuvmwarecomv1.IgnoreChild),
				}

				var parent *GnsGns
				gvkExist := true
				for i := 0; i < 600; i++ {
					// Check if parent exists
					p, err := nc.GetParent(context.TODO())
					if err != nil || p == nil {
						time.Sleep(500 * time.Millisecond)
						continue
					}
					parent = p

					// Check GVK

					if parent.Spec.IgnoreChildGvk != nil {
						time.Sleep(500 * time.Millisecond)
						continue
					}

					gvkExist = false
					break
				}

				if parent == nil {
					hashedName := helper.GetHashedName("gnses.gns.tsm.tanzu.vmware.com", nc.Labels, nc.Labels["gnses.gns.tsm.tanzu.vmware.com"])
					parent, err = c.client.Gns().ForceReadGnsByName(context.TODO(), hashedName)
					if err != nil {
						if errors.IsNotFound(err) {
							return
						}

						panic("error occurred while fetching parent " + err.Error())
					}
					panic(fmt.Sprintf("parent found (event loop is stalled) " + nc.DisplayName()))
				}

				if gvkExist {
					// Check GVK

					if parent.Spec.IgnoreChildGvk != nil {
						return
					}

					panic(fmt.Sprintf("gvk not found (event loop is stalled) " + nc.DisplayName()))
				}

				cbfn(nc)
			},
		})
	} else {
		log.Debugf("[RegisterDeleteCallback] GnsIgnoreChild Create New Informer")
		informer := informergnstsmtanzuvmwarecomv1.NewIgnoreChildInformer(c.client.baseClient, 0, cache.Indexers{})
		registrationId, err = informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
			DeleteFunc: func(obj interface{}) {
				nc := &GnsIgnoreChild{
					client:      c.client,
					IgnoreChild: obj.(*basegnstsmtanzuvmwarecomv1.IgnoreChild),
				}

				var parent *GnsGns
				gvkExist := true
				for i := 0; i < 600; i++ {
					// Check if parent exists
					p, err := nc.GetParent(context.TODO())
					if err != nil || p == nil {
						time.Sleep(500 * time.Millisecond)
						continue
					}
					parent = p

					// Check GVK

					if parent.Spec.IgnoreChildGvk != nil {
						time.Sleep(500 * time.Millisecond)
						continue
					}

					gvkExist = false

					break
				}

				if parent == nil {
					hashedName := helper.GetHashedName("gnses.gns.tsm.tanzu.vmware.com", nc.Labels, nc.Labels["gnses.gns.tsm.tanzu.vmware.com"])
					parent, err = c.client.Gns().ForceReadGnsByName(context.TODO(), hashedName)
					if err != nil {
						if errors.IsNotFound(err) {
							return
						}

						panic("error occurred while fetching parent " + err.Error())
					}
					panic(fmt.Sprintf("parent found (event loop is stalled) " + nc.DisplayName()))
				}

				if gvkExist {
					// Check GVK

					if parent.Spec.IgnoreChildGvk != nil {
						return
					}

					panic(fmt.Sprintf("gvk not found (event loop is stalled) " + nc.DisplayName()))
				}

				cbfn(nc)
			},
		})
		go informer.Run(stopper)
	}
	return registrationId, err
}

// GetDnsByName returns object stored in the database under the hashedName which is a hash of display
// name and parents names. Use it when you know hashed name of object.
func (group *GnsTsmV1) GetDnsByName(ctx context.Context, hashedName string) (*GnsDns, error) {
	key := "dnses.gns.tsm.tanzu.vmware.com"
	if s, ok := subscriptionMap.Load(key); ok {
		log.Debugf("[GetDnsByName] GetObject: %s from cache", hashedName)
		item, exists, err := s.(subscription).informer.GetStore().GetByKey(hashedName)
		if !exists {
			return nil, err
		}

		log.Debugf("[GetDnsByName] Object: %s exists in cache", hashedName)
		result, _ := item.(*basegnstsmtanzuvmwarecomv1.Dns)
		return &GnsDns{
			client: group.client,
			Dns:    result,
		}, nil
	} else {
		retryCount := 0
		for {
			result, err := group.client.baseClient.
				GnsTsmV1().
				Dnses().Get(ctx, hashedName, metav1.GetOptions{})
			if err != nil {
				log.Errorf("[GetDnsByName] Failed to Get Dnses: %+v", err)
				if errors.IsTimeout(err) || customerrors.Is(err, context.DeadlineExceeded) {
					log.Errorf("[Retry Count: %d ] %+v", retryCount, err)
					if retryCount == maxRetryCount {
						log.Error("Max Retry exceed on Get Dnses")
						return nil, err
					}
					retryCount += 1
					time.Sleep(sleepTime * time.Second)
				} else if customerrors.Is(err, context.Canceled) {
					log.Errorf("[GetDnsByName]: %+v", err)
					return nil, context.Canceled
				} else {
					log.Errorf("[GetDnsByName]: %+v", err)
					return nil, err
				}
			} else {
				return &GnsDns{
					client: group.client,
					Dns:    result,
				}, nil
			}
		}
	}
}

// ForceReadDnsByName read object directly from the database under the hashedName which is a hash of display
// name and parents names. Use it when you know hashed name of object.
func (group *GnsTsmV1) ForceReadDnsByName(ctx context.Context, hashedName string) (*GnsDns, error) {
	log.Debugf("[ForceReadDnsByName] Received object :%s to read from DB", hashedName)
	retryCount := 0
	for {
		result, err := group.client.baseClient.
			GnsTsmV1().
			Dnses().Get(ctx, hashedName, metav1.GetOptions{})
		if err != nil {
			log.Errorf("[ForceReadDnsByName] Failed to Get Dnses: %+v", err)
			if errors.IsTimeout(err) || customerrors.Is(err, context.DeadlineExceeded) {
				log.Errorf("[Retry Count: %d ] %+v", retryCount, err)
				if retryCount == maxRetryCount {
					log.Error("Max Retry exceed on Get Dnses")
					return nil, err
				}
				retryCount += 1
				time.Sleep(sleepTime * time.Second)
			} else if customerrors.Is(err, context.Canceled) {
				log.Errorf("[ForceReadDnsByName]: %+v", err)
				return nil, context.Canceled
			} else {
				log.Errorf("[ForceReadDnsByName]: %+v", err)
				return nil, err
			}
		} else {
			log.Debugf("[ForceReadDnsByName] Executed Successfully :%s", hashedName)
			return &GnsDns{
				client: group.client,
				Dns:    result,
			}, nil
		}
	}
}

// DeleteDnsByName deletes object stored in the database under the hashedName which is a hash of
// display name and parents names. Use it when you know hashed name of object.
func (group *GnsTsmV1) DeleteDnsByName(ctx context.Context, hashedName string) (err error) {
	log.Debugf("[DeleteDnsByName] Received objectToDelete: %s", hashedName)

	var (
		retryCount int
		result     *basegnstsmtanzuvmwarecomv1.Dns
	)
	retryCount = 0
	for {
		result, err = group.client.baseClient.
			GnsTsmV1().
			Dnses().Get(ctx, hashedName, metav1.GetOptions{})
		if err != nil {
			log.Errorf("[DeleteDnsByName] Failed to Get Dnses: %+v", err)
			if errors.IsTimeout(err) || customerrors.Is(err, context.DeadlineExceeded) {
				log.Errorf("[Retry Count: %d ] %+v", retryCount, err)
				if retryCount == maxRetryCount {
					log.Error("Max Retry exceed on Get Dnses")
					return err
				}
				retryCount += 1
				time.Sleep(sleepTime * time.Second)
			} else if customerrors.Is(err, context.Canceled) {
				log.Errorf("[DeleteDnsByName]: %+v", err)
				return context.Canceled
			} else if errors.IsNotFound(err) {
				log.Errorf("[DeleteDnsByName] Object Notfound: %+v", err)
				break
			} else {
				log.Errorf("[DeleteDnsByName]: %+v", err)
				return err
			}
		} else {
			break
		}
	}

	retryCount = 0
	for {
		err = group.client.baseClient.
			GnsTsmV1().
			Dnses().Delete(ctx, hashedName, metav1.DeleteOptions{})
		if err != nil {
			log.Errorf("[DeleteDnsByName] failed to delete Dnses: %+v", err)
			if errors.IsTimeout(err) || customerrors.Is(err, context.DeadlineExceeded) {
				log.Errorf("[Retry Count: %d ] %+v", retryCount, err)
				if retryCount == maxRetryCount {
					log.Error("Max retry exceed on delete Dnses")
					return err
				}
				retryCount += 1
				time.Sleep(sleepTime * time.Second)
			} else if customerrors.Is(err, context.Canceled) {
				log.Errorf("[DeleteDnsByName]: %+v", err)
				return context.Canceled
			} else if errors.IsNotFound(err) {
				log.Errorf("[DeleteDnsByName] Object not found: %+v", err)
				break
			} else {
				log.Errorf("[DeleteDnsByName]: %+v", err)
				return err
			}
		}
	}
	// Get Parent Node and check if gvk present before patch

	var gvkPresent bool
	log.Debugf("[DeleteDnsByName] Get Parent details")
	var patch Patch
	parents := result.GetLabels()
	if parents == nil {
		parents = make(map[string]string)
	}
	parentName, ok := parents["configs.config.tsm.tanzu.vmware.com"]
	if !ok {
		parentName = helper.DEFAULT_KEY
	}
	if result.GetLabels() != nil {
		if parents[common.IS_NAME_HASHED_LABEL] == "true" {
			parentName = helper.GetHashedName("configs.config.tsm.tanzu.vmware.com", parents, parentName)
		}
	} else {
		parentName = helper.GetHashedName("configs.config.tsm.tanzu.vmware.com", parents, parentName)
	}
	parentData, err := group.client.baseClient.
		ConfigTsmV1().
		Configs().Get(ctx, parentName, metav1.GetOptions{})
	if err != nil {
		log.Errorf("[DeleteDnsByName] Failed to get Parent node: %+v", err)
		if errors.IsNotFound(err) {
			return nil
		} else {
			return err
		}
	}

	if parentData.Spec.DNSGvk != nil {
		log.Debugf("[DeleteDnsByName] GVK present in parent for node: %s", hashedName)
		gvkPresent = true
	}

	if gvkPresent {

		patchOp := PatchOp{
			Op:   "remove",
			Path: "/spec/dNSGvk",
		}

		patch = append(patch, patchOp)
		marshaled, err := patch.Marshal()
		if err != nil {
			return err
		}

		retryCount = 0
		newCtx := context.TODO()
		for {
			_, err = group.client.baseClient.
				ConfigTsmV1().
				Configs().Patch(newCtx, parentName, types.JSONPatchType, marshaled, metav1.PatchOptions{})
			if err != nil {
				log.Errorf("Failed to patch Dns gvk in parent node[Configs]: %+v", err)
				if errors.IsTimeout(err) || customerrors.Is(err, context.DeadlineExceeded) {
					log.Errorf("[Retry Count: %d ] %+v", retryCount, err)
					if retryCount == maxRetryCount {
						log.Error("Max Retry exceed on patching gvk")
						return err
					}
					retryCount += 1
					time.Sleep(sleepTime * time.Second)
				} else if customerrors.Is(err, context.Canceled) {
					log.Errorf("[DeleteDnsByName]: %+v", err)
					return context.Canceled
				} else {
					log.Errorf("Unexpected Error occur Dns]: %+v", err)
					return err
				}
			} else {
				log.Debugf("[DeleteDnsByName] Patch Dns Success: %s", hashedName)
				break
			}
		}
		log.Debugf("[DeleteDnsByName] Executed Successfully: %s", hashedName)
	}

	return
}

// CreateDnsByName creates object in the database without hashing the name.
// Use it directly ONLY when objToCreate.Name is hashed name of the object.
func (group *GnsTsmV1) CreateDnsByName(ctx context.Context,
	objToCreate *basegnstsmtanzuvmwarecomv1.Dns) (*GnsDns, error) {
	log.Debugf("[CreateDnsByName] Received objToCreate: %s", objToCreate.GetName())
	if objToCreate.GetLabels() == nil {
		objToCreate.Labels = make(map[string]string)
	}
	if _, ok := objToCreate.Labels[common.DISPLAY_NAME_LABEL]; !ok {
		objToCreate.Labels[common.DISPLAY_NAME_LABEL] = objToCreate.GetName()
	}
	if objToCreate.Labels[common.DISPLAY_NAME_LABEL] == "" {
		objToCreate.Labels[common.DISPLAY_NAME_LABEL] = helper.DEFAULT_KEY
	}
	if objToCreate.Labels[common.DISPLAY_NAME_LABEL] != helper.DEFAULT_KEY {
		return nil, NewSingletonNameError(objToCreate.Labels[common.DISPLAY_NAME_LABEL])
	}

	var (
		retryCount int
		result     *basegnstsmtanzuvmwarecomv1.Dns
		err        error
	)
	retryCount = 0
	for {
		result, err = group.client.baseClient.
			GnsTsmV1().
			Dnses().Create(ctx, objToCreate, metav1.CreateOptions{})
		if err != nil {
			log.Errorf("[CreateDnsByName] Failed to Create Dnses: %+v", err)
			if errors.IsTimeout(err) || customerrors.Is(err, context.DeadlineExceeded) {
				log.Errorf("[Retry Count: %d ] %+v", retryCount, err)
				if retryCount == maxRetryCount {
					log.Error("Max Retry exceed on Get Dnses")
					return nil, err
				}
				retryCount += 1
				time.Sleep(sleepTime * time.Second)
			} else if customerrors.Is(err, context.Canceled) {
				log.Errorf("[CreateDnsByName]: %+v", err)
				return nil, context.Canceled
			} else {
				log.Errorf("[CreateDnsByName]: %+v", err)
				return nil, err
			}
		} else {
			break
		}
	}
	log.Debugf("[CreateDnsByName] Dnses created successfully: %s", objToCreate.GetName())

	parentName, ok := objToCreate.GetLabels()["configs.config.tsm.tanzu.vmware.com"]
	if !ok {
		parentName = helper.DEFAULT_KEY
	}
	if objToCreate.Labels[common.IS_NAME_HASHED_LABEL] == "true" {
		parentName = helper.GetHashedName("configs.config.tsm.tanzu.vmware.com", objToCreate.GetLabels(), parentName)
	}

	var patch Patch
	patchOp := PatchOp{
		Op:   "replace",
		Path: "/spec/dNSGvk",
		Value: basegnstsmtanzuvmwarecomv1.Child{
			Group: "gns.tsm.tanzu.vmware.com",
			Kind:  "Dns",
			Name:  objToCreate.Name,
		},
	}
	patch = append(patch, patchOp)
	marshaled, err := patch.Marshal()
	if err != nil {
		return nil, err
	}
	retryCount = 0
	newCtx := context.TODO()
	for {
		_, err = group.client.baseClient.
			ConfigTsmV1().
			Configs().Patch(newCtx, parentName, types.JSONPatchType, marshaled, metav1.PatchOptions{})
		if err != nil {
			log.Errorf("[CreateDnsByName] Failed to patch Dns gvk in parent node[Configs]: %+v", err)
			if errors.IsTimeout(err) || customerrors.Is(err, context.DeadlineExceeded) {
				log.Errorf("[Retry Count: %d ] %+v", retryCount, err)
				if retryCount == maxRetryCount {
					log.Error("Max Retry exceed on patching gvk")
					log.Errorf("Trigger Dns Delete: %s", objToCreate.GetName())
					delErr := group.DeleteDnsByName(newCtx, objToCreate.GetName())
					if delErr != nil {
						log.Errorf("Error occur while deleting Dns: %s", objToCreate.GetName())
						return nil, delErr
					}
					log.Errorf("Dns Deleted: %s", objToCreate.GetName())
					return nil, err
				}
				retryCount += 1
				time.Sleep(sleepTime * time.Second)
			} else if customerrors.Is(err, context.Canceled) {
				log.Errorf("[CreateDnsByName]: %+v", err)
				return nil, context.Canceled
			} else {
				log.Errorf("[CreateDnsByName] Unexpected Error Dns] :%+v", err)
				log.Errorf("Trigger Dns Delete: %s", objToCreate.GetName())
				delErr := group.DeleteDnsByName(newCtx, objToCreate.GetName())
				if delErr != nil {
					log.Errorf("Error occur while deleting Dns: %+v", objToCreate.GetName())
					return nil, delErr
				}
				log.Errorf("Dns Deleted: %s", objToCreate.GetName())
				return nil, err
			}
		} else {
			log.Debugf("[CreateDnsByName] Patch Dns Success :%s", objToCreate.GetName())
			break
		}
	}

	log.Debugf("[CreateDnsByName] Executed Successfully: %s", objToCreate.GetName())
	return &GnsDns{
		client: group.client,
		Dns:    result,
	}, nil
}

// UpdateDnsByName updates object stored in the database under the hashedName which is a hash of
// display name and parents names.
func (group *GnsTsmV1) UpdateDnsByName(ctx context.Context,
	objToUpdate *basegnstsmtanzuvmwarecomv1.Dns) (*GnsDns, error) {
	log.Debugf("[UpdateDnsByName] Received objToUpdate: %s", objToUpdate.GetName())
	if objToUpdate.Labels[common.DISPLAY_NAME_LABEL] != helper.DEFAULT_KEY {
		return nil, NewSingletonNameError(objToUpdate.Labels[common.DISPLAY_NAME_LABEL])
	}

	var patch Patch

	if objToUpdate.Annotations != nil || objToUpdate.Labels != nil {
		current, err := group.client.Gns().GetDnsByName(ctx, objToUpdate.Name)
		if err != nil {
			return nil, err
		}

		if objToUpdate.Annotations != nil {
			if current.Annotations[ownershipAnnotation] != "" {
				objToUpdate.Annotations[ownershipAnnotation] = current.Annotations[ownershipAnnotation]
			}
			patch = append(patch, PatchOp{
				Op:    "replace",
				Path:  "/metadata/annotations",
				Value: objToUpdate.Annotations,
			})
		}

		if objToUpdate.Labels != nil {
			parentsList := helper.GetCRDParentsMap()["dnses.gns.tsm.tanzu.vmware.com"]
			for _, k := range parentsList {
				objToUpdate.Labels[k] = current.Labels[k]
			}
			objToUpdate.Labels[common.IS_NAME_HASHED_LABEL] = current.Labels[common.IS_NAME_HASHED_LABEL]
			objToUpdate.Labels[common.DISPLAY_NAME_LABEL] = current.Labels[common.DISPLAY_NAME_LABEL]
			patch = append(patch, PatchOp{
				Op:    "replace",
				Path:  "/metadata/labels",
				Value: objToUpdate.Labels,
			})
		}
	}

	marshaled, err := patch.Marshal()
	if err != nil {
		return nil, err
	}

	var (
		result *basegnstsmtanzuvmwarecomv1.Dns
	)
	newCtx := context.TODO()
	retryCount := 0
	for {
		result, err = group.client.baseClient.
			GnsTsmV1().
			Dnses().Patch(newCtx, objToUpdate.GetName(), types.JSONPatchType, marshaled, metav1.PatchOptions{}, "")
		if err != nil {
			log.Errorf("[UpdateDnsByName] Failed to patch Dns gvk in parent node[Configs]: %+v", err)
			if errors.IsTimeout(err) || customerrors.Is(err, context.DeadlineExceeded) {
				log.Errorf("[Retry Count: %d ] %+v", retryCount, err)
				if retryCount == maxRetryCount {
					log.Error("Max Retry exceed on patching gvk")
					log.Errorf("Trigger Dns Delete: %s", objToUpdate.GetName())
					delErr := group.DeleteDnsByName(newCtx, objToUpdate.GetName())
					if delErr != nil {
						log.Errorf("Error occur while deleting Dns: %s", objToUpdate.GetName())
						return nil, delErr
					}
					log.Errorf("Dns Deleted: %s", objToUpdate.GetName())
					return nil, err
				}
				retryCount += 1
				time.Sleep(sleepTime * time.Second)
			} else if customerrors.Is(err, context.Canceled) {
				log.Errorf("[CreateDnsByName]: %+v", err)
				return nil, context.Canceled
			} else {
				log.Errorf("[CreateDnsByName] Unexpected Error Dns] :%+v", err)
				log.Errorf("Trigger Dns Delete: %s", objToUpdate.GetName())
				delErr := group.DeleteDnsByName(newCtx, objToUpdate.GetName())
				if delErr != nil {
					log.Errorf("Error occur while deleting Dns: %+v", objToUpdate.GetName())
					return nil, delErr
				}
				log.Errorf("Dns Deleted: %s", objToUpdate.GetName())
				return nil, err
			}
		} else {
			log.Debugf("[CreateDnsByName] Patch Dns Success :%s", objToUpdate.GetName())
			break
		}
	}
	log.Debugf("[UpdateDnsByName] Executed Successfully %s", objToUpdate.GetName())
	return &GnsDns{
		client: group.client,
		Dns:    result,
	}, nil
}

// ListDnses returns slice of all existing objects of this type. Selectors can be provided in opts parameter.
func (group *GnsTsmV1) ListDnses(ctx context.Context,
	opts metav1.ListOptions) (result []*GnsDns, err error) {
	key := "dnses.gns.tsm.tanzu.vmware.com"
	if s, ok := subscriptionMap.Load(key); ok {
		items := s.(subscription).informer.GetStore().List()
		result = make([]*GnsDns, len(items))
		for k, v := range items {
			item, _ := v.(*basegnstsmtanzuvmwarecomv1.Dns)
			result[k] = &GnsDns{
				client: group.client,
				Dns:    item,
			}
		}
	} else {
		list, err := group.client.baseClient.GnsTsmV1().
			Dnses().List(ctx, opts)
		if err != nil {
			return nil, err
		}
		result = make([]*GnsDns, len(list.Items))
		for k, v := range list.Items {
			item := v
			result[k] = &GnsDns{
				client: group.client,
				Dns:    &item,
			}
		}
	}
	return
}

type GnsDns struct {
	client *Clientset
	*basegnstsmtanzuvmwarecomv1.Dns
}

// Delete removes obj and all it's children from the database.
func (obj *GnsDns) Delete(ctx context.Context) error {
	err := obj.client.Gns().DeleteDnsByName(ctx, obj.GetName())
	if err != nil {
		return err
	}
	obj.Dns = nil
	return nil
}

// Update updates spec of object in database. Children and Link can not be updated using this function.
func (obj *GnsDns) Update(ctx context.Context) error {
	result, err := obj.client.Gns().UpdateDnsByName(ctx, obj.Dns)
	if err != nil {
		return err
	}
	obj.Dns = result.Dns
	return nil
}

func (obj *GnsDns) GetParent(ctx context.Context) (result *ConfigConfig, err error) {
	hashedName := helper.GetHashedName("configs.config.tsm.tanzu.vmware.com", obj.Labels, obj.Labels["configs.config.tsm.tanzu.vmware.com"])
	return obj.client.Config().GetConfigByName(ctx, hashedName)
}

type dnsGnsTsmV1Chainer struct {
	client       *Clientset
	name         string
	parentLabels map[string]string
}

func (c *dnsGnsTsmV1Chainer) Subscribe() {
	key := "dnses.gns.tsm.tanzu.vmware.com"
	if _, ok := subscriptionMap.Load(key); !ok {
		informer := informergnstsmtanzuvmwarecomv1.NewDnsInformer(c.client.baseClient, 0, cache.Indexers{})
		subscribe(key, informer)
	}
}

func (c *dnsGnsTsmV1Chainer) Unsubscribe() {
	key := "dnses.gns.tsm.tanzu.vmware.com"
	if s, ok := subscriptionMap.Load(key); ok {
		close(s.(subscription).stop)
		subscriptionMap.Delete(key)
	}
}

func (c *dnsGnsTsmV1Chainer) IsSubscribed() bool {
	key := "dnses.gns.tsm.tanzu.vmware.com"
	_, ok := subscriptionMap.Load(key)
	return ok
}

func (c *dnsGnsTsmV1Chainer) RegisterEventHandler(addCB func(obj *GnsDns), updateCB func(oldObj, newObj *GnsDns), deleteCB func(obj *GnsDns)) (cache.ResourceEventHandlerRegistration, error) {
	fmt.Println("RegisterEventHandler for GnsDns")
	var (
		registrationId cache.ResourceEventHandlerRegistration
		err            error
		informer       cache.SharedIndexInformer
	)
	key := "dnses.gns.tsm.tanzu.vmware.com"
	stopper := make(chan struct{})
	if s, ok := subscriptionMap.Load(key); ok {
		fmt.Println("Informer exists for GnsDns")
		sub := s.(subscription)
		informer = sub.informer
	} else {
		fmt.Println("Informer doesn't exists for GnsDns, so creating a new one")
		informer = informergnstsmtanzuvmwarecomv1.NewDnsInformer(c.client.baseClient, 0, cache.Indexers{})
		go informer.Run(stopper)
		subscribe(key, informer)
	}
	registrationId, err = informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
		AddFunc: func(obj interface{}) {
			nc := &GnsDns{
				client: c.client,
				Dns:    obj.(*basegnstsmtanzuvmwarecomv1.Dns),
			}

			var parent *ConfigConfig
			gvkExist := false
			for i := 0; i < 600; i++ {
				// Check if parent exists
				p, err := nc.GetParent(context.TODO())
				if err != nil || p == nil {
					time.Sleep(500 * time.Millisecond)
					continue
				}
				parent = p
				// Check GVK

				if parent.Spec.DNSGvk == nil {
					time.Sleep(500 * time.Millisecond)
					continue
				}

				gvkExist = true
				break
			}
			if parent == nil {
				hashedName := helper.GetHashedName("configs.config.tsm.tanzu.vmware.com", nc.Labels, nc.Labels["configs.config.tsm.tanzu.vmware.com"])
				parent, err = c.client.Config().ForceReadConfigByName(context.TODO(), hashedName)
				if err != nil {
					if errors.IsNotFound(err) {
						return
					}
					panic("error occurred while fetching parent " + err.Error())
				}
				panic(fmt.Sprintf("parent found (event loop is stalled) " + nc.DisplayName()))
			}
			if !gvkExist {
				// Check GVK

				if parent.Spec.DNSGvk == nil {
					return
				}

				panic(fmt.Sprintf("gvk found (event loop is stalled) " + nc.DisplayName()))
			}

			addCB(nc)
		},

		UpdateFunc: func(oldObj, newObj interface{}) {
			oldData := &GnsDns{
				client: c.client,
				Dns:    oldObj.(*basegnstsmtanzuvmwarecomv1.Dns),
			}
			newData := &GnsDns{
				client: c.client,
				Dns:    newObj.(*basegnstsmtanzuvmwarecomv1.Dns),
			}
			updateCB(oldData, newData)
		},

		DeleteFunc: func(obj interface{}) {
			nc := &GnsDns{
				client: c.client,
				Dns:    obj.(*basegnstsmtanzuvmwarecomv1.Dns),
			}

			var parent *ConfigConfig
			gvkExist := true
			for i := 0; i < 600; i++ {
				// Check if parent exists
				p, err := nc.GetParent(context.TODO())
				if err != nil || p == nil {
					time.Sleep(500 * time.Millisecond)
					continue
				}
				parent = p
				// Check GVK

				if parent.Spec.DNSGvk != nil {
					time.Sleep(500 * time.Millisecond)
					continue
				}

				gvkExist = false
				break
			}
			if parent == nil {
				hashedName := helper.GetHashedName("configs.config.tsm.tanzu.vmware.com", nc.Labels, nc.Labels["configs.config.tsm.tanzu.vmware.com"])
				parent, err = c.client.Config().ForceReadConfigByName(context.TODO(), hashedName)
				if err != nil {
					if errors.IsNotFound(err) {
						return
					}
					panic("error occurred while fetching parent " + err.Error())
				}
				panic(fmt.Sprintf("parent found (event loop is stalled) " + nc.DisplayName()))
			}
			if gvkExist {
				// Check GVK

				if parent.Spec.DNSGvk != nil {
					return
				}

				panic(fmt.Sprintf("gvk not found (event loop is stalled) " + nc.DisplayName()))
			}

			deleteCB(nc)
		},
	})
	return registrationId, err
}

func (c *dnsGnsTsmV1Chainer) RegisterAddCallback(cbfn func(obj *GnsDns)) (cache.ResourceEventHandlerRegistration, error) {
	log.Debugf("[RegisterAddCallback] Received for GnsDns")
	var (
		registrationId cache.ResourceEventHandlerRegistration
		err            error
	)
	key := "dnses.gns.tsm.tanzu.vmware.com"
	stopper := make(chan struct{})
	if s, ok := subscriptionMap.Load(key); ok {
		log.Debugf("[RegisterAddCallback] GnsDns Use Subscription Informer")
		sub := s.(subscription)
		registrationId, err = sub.informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
			AddFunc: func(obj interface{}) {
				nc := &GnsDns{
					client: c.client,
					Dns:    obj.(*basegnstsmtanzuvmwarecomv1.Dns),
				}

				var parent *ConfigConfig
				gvkExist := false
				for i := 0; i < 600; i++ {
					// Check if parent exists
					p, err := nc.GetParent(context.TODO())
					if err != nil || p == nil {
						time.Sleep(500 * time.Millisecond)
						continue
					}
					parent = p

					// Check GVK

					if parent.Spec.DNSGvk == nil {
						time.Sleep(500 * time.Millisecond)
						continue
					}

					gvkExist = true

					break
				}

				if parent == nil {
					hashedName := helper.GetHashedName("configs.config.tsm.tanzu.vmware.com", nc.Labels, nc.Labels["configs.config.tsm.tanzu.vmware.com"])
					parent, err = c.client.Config().ForceReadConfigByName(context.TODO(), hashedName)
					if err != nil {
						if errors.IsNotFound(err) {
							return
						}

						panic("error occurred while fetching parent " + err.Error())
					}
					panic(fmt.Sprintf("parent found (event loop is stalled) " + nc.DisplayName()))
				}

				if !gvkExist {
					// Check GVK

					if parent.Spec.DNSGvk == nil {
						return
					}

					panic(fmt.Sprintf("gvk found (event loop is stalled) " + nc.DisplayName()))
				}

				cbfn(nc)
			},
		})
	} else {
		log.Debugf("[RegisterAddCallback] GnsDns Create New Informer")
		informer := informergnstsmtanzuvmwarecomv1.NewDnsInformer(c.client.baseClient, 0, cache.Indexers{})
		registrationId, err = informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
			AddFunc: func(obj interface{}) {
				nc := &GnsDns{
					client: c.client,
					Dns:    obj.(*basegnstsmtanzuvmwarecomv1.Dns),
				}

				var parent *ConfigConfig
				gvkExist := false
				for i := 0; i < 600; i++ {
					// Check if parent exists
					p, err := nc.GetParent(context.TODO())
					if err != nil || p == nil {
						time.Sleep(500 * time.Millisecond)
						continue
					}
					parent = p

					// Check GVK

					if parent.Spec.DNSGvk == nil {
						time.Sleep(500 * time.Millisecond)
						continue
					}

					gvkExist = true

					break
				}

				if parent == nil {
					hashedName := helper.GetHashedName("configs.config.tsm.tanzu.vmware.com", nc.Labels, nc.Labels["configs.config.tsm.tanzu.vmware.com"])
					parent, err = c.client.Config().ForceReadConfigByName(context.TODO(), hashedName)
					if err != nil {
						if errors.IsNotFound(err) {
							return
						}

						panic("error occurred while fetching parent " + err.Error())
					}
					panic(fmt.Sprintf("parent found (event loop is stalled) " + nc.DisplayName()))
				}

				if !gvkExist {
					// Check GVK

					if parent.Spec.DNSGvk == nil {
						return
					}

					panic(fmt.Sprintf("gvk found (event loop is stalled) " + nc.DisplayName()))
				}

				cbfn(nc)
			},
		})
		go informer.Run(stopper)
	}
	return registrationId, err
}

func (c *dnsGnsTsmV1Chainer) RegisterUpdateCallback(cbfn func(oldObj, newObj *GnsDns)) (cache.ResourceEventHandlerRegistration, error) {
	log.Debugf("[RegisterUpdateCallback] Received for GnsDns")
	var (
		registrationId cache.ResourceEventHandlerRegistration
		err            error
	)
	key := "dnses.gns.tsm.tanzu.vmware.com"
	stopper := make(chan struct{})
	if s, ok := subscriptionMap.Load(key); ok {
		log.Debugf("[RegisterUpdateCallback] GnsDns Use Subscription Informer")
		sub := s.(subscription)
		registrationId, err = sub.informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
			UpdateFunc: func(oldObj, newObj interface{}) {
				oldData := &GnsDns{
					client: c.client,
					Dns:    oldObj.(*basegnstsmtanzuvmwarecomv1.Dns),
				}
				newData := &GnsDns{
					client: c.client,
					Dns:    newObj.(*basegnstsmtanzuvmwarecomv1.Dns),
				}
				cbfn(oldData, newData)
			},
		})
	} else {
		log.Debugf("[RegisterUpdateCallback] GnsDns Create New Informer")
		informer := informergnstsmtanzuvmwarecomv1.NewDnsInformer(c.client.baseClient, 0, cache.Indexers{})
		registrationId, err = informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
			UpdateFunc: func(oldObj, newObj interface{}) {
				oldData := &GnsDns{
					client: c.client,
					Dns:    oldObj.(*basegnstsmtanzuvmwarecomv1.Dns),
				}
				newData := &GnsDns{
					client: c.client,
					Dns:    newObj.(*basegnstsmtanzuvmwarecomv1.Dns),
				}
				cbfn(oldData, newData)
			},
		})
		go informer.Run(stopper)
	}
	return registrationId, err
}

func (c *dnsGnsTsmV1Chainer) RegisterDeleteCallback(cbfn func(obj *GnsDns)) (cache.ResourceEventHandlerRegistration, error) {
	log.Debugf("[RegisterDeleteCallback] Received for GnsDns")
	var (
		registrationId cache.ResourceEventHandlerRegistration
		err            error
	)
	key := "dnses.gns.tsm.tanzu.vmware.com"
	stopper := make(chan struct{})
	if s, ok := subscriptionMap.Load(key); ok {
		log.Debugf("[RegisterDeleteCallback] GnsDns Use Subscription Informer")
		sub := s.(subscription)
		registrationId, err = sub.informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
			DeleteFunc: func(obj interface{}) {
				nc := &GnsDns{
					client: c.client,
					Dns:    obj.(*basegnstsmtanzuvmwarecomv1.Dns),
				}

				var parent *ConfigConfig
				gvkExist := true
				for i := 0; i < 600; i++ {
					// Check if parent exists
					p, err := nc.GetParent(context.TODO())
					if err != nil || p == nil {
						time.Sleep(500 * time.Millisecond)
						continue
					}
					parent = p

					// Check GVK

					if parent.Spec.DNSGvk != nil {
						time.Sleep(500 * time.Millisecond)
						continue
					}

					gvkExist = false
					break
				}

				if parent == nil {
					hashedName := helper.GetHashedName("configs.config.tsm.tanzu.vmware.com", nc.Labels, nc.Labels["configs.config.tsm.tanzu.vmware.com"])
					parent, err = c.client.Config().ForceReadConfigByName(context.TODO(), hashedName)
					if err != nil {
						if errors.IsNotFound(err) {
							return
						}

						panic("error occurred while fetching parent " + err.Error())
					}
					panic(fmt.Sprintf("parent found (event loop is stalled) " + nc.DisplayName()))
				}

				if gvkExist {
					// Check GVK

					if parent.Spec.DNSGvk != nil {
						return
					}

					panic(fmt.Sprintf("gvk not found (event loop is stalled) " + nc.DisplayName()))
				}

				cbfn(nc)
			},
		})
	} else {
		log.Debugf("[RegisterDeleteCallback] GnsDns Create New Informer")
		informer := informergnstsmtanzuvmwarecomv1.NewDnsInformer(c.client.baseClient, 0, cache.Indexers{})
		registrationId, err = informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
			DeleteFunc: func(obj interface{}) {
				nc := &GnsDns{
					client: c.client,
					Dns:    obj.(*basegnstsmtanzuvmwarecomv1.Dns),
				}

				var parent *ConfigConfig
				gvkExist := true
				for i := 0; i < 600; i++ {
					// Check if parent exists
					p, err := nc.GetParent(context.TODO())
					if err != nil || p == nil {
						time.Sleep(500 * time.Millisecond)
						continue
					}
					parent = p

					// Check GVK

					if parent.Spec.DNSGvk != nil {
						time.Sleep(500 * time.Millisecond)
						continue
					}

					gvkExist = false

					break
				}

				if parent == nil {
					hashedName := helper.GetHashedName("configs.config.tsm.tanzu.vmware.com", nc.Labels, nc.Labels["configs.config.tsm.tanzu.vmware.com"])
					parent, err = c.client.Config().ForceReadConfigByName(context.TODO(), hashedName)
					if err != nil {
						if errors.IsNotFound(err) {
							return
						}

						panic("error occurred while fetching parent " + err.Error())
					}
					panic(fmt.Sprintf("parent found (event loop is stalled) " + nc.DisplayName()))
				}

				if gvkExist {
					// Check GVK

					if parent.Spec.DNSGvk != nil {
						return
					}

					panic(fmt.Sprintf("gvk not found (event loop is stalled) " + nc.DisplayName()))
				}

				cbfn(nc)
			},
		})
		go informer.Run(stopper)
	}
	return registrationId, err
}

// GetSvcGroupByName returns object stored in the database under the hashedName which is a hash of display
// name and parents names. Use it when you know hashed name of object.
func (group *ServicegroupTsmV1) GetSvcGroupByName(ctx context.Context, hashedName string) (*ServicegroupSvcGroup, error) {
	key := "svcgroups.servicegroup.tsm.tanzu.vmware.com"
	if s, ok := subscriptionMap.Load(key); ok {
		log.Debugf("[GetSvcGroupByName] GetObject: %s from cache", hashedName)
		item, exists, err := s.(subscription).informer.GetStore().GetByKey(hashedName)
		if !exists {
			return nil, err
		}

		log.Debugf("[GetSvcGroupByName] Object: %s exists in cache", hashedName)
		result, _ := item.(*baseservicegrouptsmtanzuvmwarecomv1.SvcGroup)
		return &ServicegroupSvcGroup{
			client:   group.client,
			SvcGroup: result,
		}, nil
	} else {
		retryCount := 0
		for {
			result, err := group.client.baseClient.
				ServicegroupTsmV1().
				SvcGroups().Get(ctx, hashedName, metav1.GetOptions{})
			if err != nil {
				log.Errorf("[GetSvcGroupByName] Failed to Get SvcGroups: %+v", err)
				if errors.IsTimeout(err) || customerrors.Is(err, context.DeadlineExceeded) {
					log.Errorf("[Retry Count: %d ] %+v", retryCount, err)
					if retryCount == maxRetryCount {
						log.Error("Max Retry exceed on Get SvcGroups")
						return nil, err
					}
					retryCount += 1
					time.Sleep(sleepTime * time.Second)
				} else if customerrors.Is(err, context.Canceled) {
					log.Errorf("[GetSvcGroupByName]: %+v", err)
					return nil, context.Canceled
				} else {
					log.Errorf("[GetSvcGroupByName]: %+v", err)
					return nil, err
				}
			} else {
				return &ServicegroupSvcGroup{
					client:   group.client,
					SvcGroup: result,
				}, nil
			}
		}
	}
}

// ForceReadSvcGroupByName read object directly from the database under the hashedName which is a hash of display
// name and parents names. Use it when you know hashed name of object.
func (group *ServicegroupTsmV1) ForceReadSvcGroupByName(ctx context.Context, hashedName string) (*ServicegroupSvcGroup, error) {
	log.Debugf("[ForceReadSvcGroupByName] Received object :%s to read from DB", hashedName)
	retryCount := 0
	for {
		result, err := group.client.baseClient.
			ServicegroupTsmV1().
			SvcGroups().Get(ctx, hashedName, metav1.GetOptions{})
		if err != nil {
			log.Errorf("[ForceReadSvcGroupByName] Failed to Get SvcGroups: %+v", err)
			if errors.IsTimeout(err) || customerrors.Is(err, context.DeadlineExceeded) {
				log.Errorf("[Retry Count: %d ] %+v", retryCount, err)
				if retryCount == maxRetryCount {
					log.Error("Max Retry exceed on Get SvcGroups")
					return nil, err
				}
				retryCount += 1
				time.Sleep(sleepTime * time.Second)
			} else if customerrors.Is(err, context.Canceled) {
				log.Errorf("[ForceReadSvcGroupByName]: %+v", err)
				return nil, context.Canceled
			} else {
				log.Errorf("[ForceReadSvcGroupByName]: %+v", err)
				return nil, err
			}
		} else {
			log.Debugf("[ForceReadSvcGroupByName] Executed Successfully :%s", hashedName)
			return &ServicegroupSvcGroup{
				client:   group.client,
				SvcGroup: result,
			}, nil
		}
	}
}

// DeleteSvcGroupByName deletes object stored in the database under the hashedName which is a hash of
// display name and parents names. Use it when you know hashed name of object.
func (group *ServicegroupTsmV1) DeleteSvcGroupByName(ctx context.Context, hashedName string) (err error) {
	log.Debugf("[DeleteSvcGroupByName] Received objectToDelete: %s", hashedName)

	var (
		retryCount int
		result     *baseservicegrouptsmtanzuvmwarecomv1.SvcGroup
	)
	retryCount = 0
	for {
		result, err = group.client.baseClient.
			ServicegroupTsmV1().
			SvcGroups().Get(ctx, hashedName, metav1.GetOptions{})
		if err != nil {
			log.Errorf("[DeleteSvcGroupByName] Failed to Get SvcGroups: %+v", err)
			if errors.IsTimeout(err) || customerrors.Is(err, context.DeadlineExceeded) {
				log.Errorf("[Retry Count: %d ] %+v", retryCount, err)
				if retryCount == maxRetryCount {
					log.Error("Max Retry exceed on Get SvcGroups")
					return err
				}
				retryCount += 1
				time.Sleep(sleepTime * time.Second)
			} else if customerrors.Is(err, context.Canceled) {
				log.Errorf("[DeleteSvcGroupByName]: %+v", err)
				return context.Canceled
			} else if errors.IsNotFound(err) {
				log.Errorf("[DeleteSvcGroupByName] Object Notfound: %+v", err)
				break
			} else {
				log.Errorf("[DeleteSvcGroupByName]: %+v", err)
				return err
			}
		} else {
			break
		}
	}

	retryCount = 0
	for {
		err = group.client.baseClient.
			ServicegroupTsmV1().
			SvcGroups().Delete(ctx, hashedName, metav1.DeleteOptions{})
		if err != nil {
			log.Errorf("[DeleteSvcGroupByName] failed to delete SvcGroups: %+v", err)
			if errors.IsTimeout(err) || customerrors.Is(err, context.DeadlineExceeded) {
				log.Errorf("[Retry Count: %d ] %+v", retryCount, err)
				if retryCount == maxRetryCount {
					log.Error("Max retry exceed on delete SvcGroups")
					return err
				}
				retryCount += 1
				time.Sleep(sleepTime * time.Second)
			} else if customerrors.Is(err, context.Canceled) {
				log.Errorf("[DeleteSvcGroupByName]: %+v", err)
				return context.Canceled
			} else if errors.IsNotFound(err) {
				log.Errorf("[DeleteSvcGroupByName] Object not found: %+v", err)
				break
			} else {
				log.Errorf("[DeleteSvcGroupByName]: %+v", err)
				return err
			}
		}
	}
	// Get Parent Node and check if gvk present before patch

	var gvkPresent bool
	log.Debugf("[DeleteSvcGroupByName] Get Parent details")
	var patch Patch
	parents := result.GetLabels()
	if parents == nil {
		parents = make(map[string]string)
	}
	parentName, ok := parents["gnses.gns.tsm.tanzu.vmware.com"]
	if !ok {
		parentName = helper.DEFAULT_KEY
	}
	if result.GetLabels() != nil {
		if parents[common.IS_NAME_HASHED_LABEL] == "true" {
			parentName = helper.GetHashedName("gnses.gns.tsm.tanzu.vmware.com", parents, parentName)
		}
	} else {
		parentName = helper.GetHashedName("gnses.gns.tsm.tanzu.vmware.com", parents, parentName)
	}
	parentData, err := group.client.baseClient.
		GnsTsmV1().
		Gnses().Get(ctx, parentName, metav1.GetOptions{})
	if err != nil {
		log.Errorf("[DeleteSvcGroupByName] Failed to get Parent node: %+v", err)
		if errors.IsNotFound(err) {
			return nil
		} else {
			return err
		}
	}

	var displayName string
	// Iterate Parent Gvk
	for k, v := range parentData.Spec.GnsServiceGroupsGvk {
		if hashedName == v.Name {
			displayName = k
			log.Debugf("[DeleteSvcGroupByName] GVK %s is present in parent for node: %s", k, hashedName)
			gvkPresent = true
		}
	}

	if gvkPresent {

		patchOp := PatchOp{
			Op:   "remove",
			Path: "/spec/gnsServiceGroupsGvk/" + displayName,
		}

		patch = append(patch, patchOp)
		marshaled, err := patch.Marshal()
		if err != nil {
			return err
		}

		retryCount = 0
		newCtx := context.TODO()
		for {
			_, err = group.client.baseClient.
				GnsTsmV1().
				Gnses().Patch(newCtx, parentName, types.JSONPatchType, marshaled, metav1.PatchOptions{})
			if err != nil {
				log.Errorf("Failed to patch SvcGroup gvk in parent node[Gnses]: %+v", err)
				if errors.IsTimeout(err) || customerrors.Is(err, context.DeadlineExceeded) {
					log.Errorf("[Retry Count: %d ] %+v", retryCount, err)
					if retryCount == maxRetryCount {
						log.Error("Max Retry exceed on patching gvk")
						return err
					}
					retryCount += 1
					time.Sleep(sleepTime * time.Second)
				} else if customerrors.Is(err, context.Canceled) {
					log.Errorf("[DeleteSvcGroupByName]: %+v", err)
					return context.Canceled
				} else {
					log.Errorf("Unexpected Error occur SvcGroup]: %+v", err)
					return err
				}
			} else {
				log.Debugf("[DeleteSvcGroupByName] Patch SvcGroup Success: %s", hashedName)
				break
			}
		}
		log.Debugf("[DeleteSvcGroupByName] Executed Successfully: %s", hashedName)
	}

	return
}

// CreateSvcGroupByName creates object in the database without hashing the name.
// Use it directly ONLY when objToCreate.Name is hashed name of the object.
func (group *ServicegroupTsmV1) CreateSvcGroupByName(ctx context.Context,
	objToCreate *baseservicegrouptsmtanzuvmwarecomv1.SvcGroup) (*ServicegroupSvcGroup, error) {
	log.Debugf("[CreateSvcGroupByName] Received objToCreate: %s", objToCreate.GetName())
	if objToCreate.GetLabels() == nil {
		objToCreate.Labels = make(map[string]string)
	}
	if _, ok := objToCreate.Labels[common.DISPLAY_NAME_LABEL]; !ok {
		objToCreate.Labels[common.DISPLAY_NAME_LABEL] = objToCreate.GetName()
	}

	var (
		retryCount int
		result     *baseservicegrouptsmtanzuvmwarecomv1.SvcGroup
		err        error
	)
	retryCount = 0
	for {
		result, err = group.client.baseClient.
			ServicegroupTsmV1().
			SvcGroups().Create(ctx, objToCreate, metav1.CreateOptions{})
		if err != nil {
			log.Errorf("[CreateSvcGroupByName] Failed to Create SvcGroups: %+v", err)
			if errors.IsTimeout(err) || customerrors.Is(err, context.DeadlineExceeded) {
				log.Errorf("[Retry Count: %d ] %+v", retryCount, err)
				if retryCount == maxRetryCount {
					log.Error("Max Retry exceed on Get SvcGroups")
					return nil, err
				}
				retryCount += 1
				time.Sleep(sleepTime * time.Second)
			} else if customerrors.Is(err, context.Canceled) {
				log.Errorf("[CreateSvcGroupByName]: %+v", err)
				return nil, context.Canceled
			} else {
				log.Errorf("[CreateSvcGroupByName]: %+v", err)
				return nil, err
			}
		} else {
			break
		}
	}
	log.Debugf("[CreateSvcGroupByName] SvcGroups created successfully: %s", objToCreate.GetName())

	parentName, ok := objToCreate.GetLabels()["gnses.gns.tsm.tanzu.vmware.com"]
	if !ok {
		parentName = helper.DEFAULT_KEY
	}
	if objToCreate.Labels[common.IS_NAME_HASHED_LABEL] == "true" {
		parentName = helper.GetHashedName("gnses.gns.tsm.tanzu.vmware.com", objToCreate.GetLabels(), parentName)
	}

	payload := "{\"spec\": {\"gnsServiceGroupsGvk\": {\"" + objToCreate.DisplayName() + "\": {\"name\": \"" + objToCreate.Name + "\",\"kind\": \"SvcGroup\", \"group\": \"servicegroup.tsm.tanzu.vmware.com\"}}}}"

	retryCount = 0
	newCtx := context.TODO()
	for {
		_, err = group.client.baseClient.
			GnsTsmV1().
			Gnses().Patch(newCtx, parentName, types.MergePatchType, []byte(payload), metav1.PatchOptions{})
		if err != nil {
			log.Errorf("[CreateSvcGroupByName] Failed to patch SvcGroup gvk in parent node[Gnses] %+v", err)
			if errors.IsTimeout(err) || customerrors.Is(err, context.DeadlineExceeded) {
				log.Errorf("[Retry Count: %d ] %+v", retryCount, err)
				if retryCount == maxRetryCount {
					log.Error("Max Retry exceed on patching gvk")
					log.Errorf("Trigger SvcGroup Delete: %s", objToCreate.GetName())
					err = group.DeleteSvcGroupByName(newCtx, objToCreate.GetName())
					if err != nil {
						log.Errorf("Error occur while deleting SvcGroup: %s", objToCreate.GetName())
						return nil, err
					}
					log.Errorf("SvcGroup Deleted: %s", objToCreate.GetName())
					return nil, err
				}
				retryCount += 1
				time.Sleep(sleepTime * time.Second)
			} else if customerrors.Is(err, context.Canceled) {
				log.Errorf("[CreateSvcGroupByName]: %+v", err)
				return nil, context.Canceled
			} else {
				log.Errorf("[CreateSvcGroupByName] Unexpected Error SvcGroup] %+v", err)
				log.Errorf("Trigger SvcGroup Delete: %s", objToCreate.GetName())
				err = group.DeleteSvcGroupByName(newCtx, objToCreate.GetName())
				if err != nil {
					log.Errorf("Error occur while deleting SvcGroup: %+v", objToCreate.GetName())
					return nil, err
				}
				log.Errorf("SvcGroup Deleted: %s", objToCreate.GetName())
				return nil, err
			}
		} else {
			log.Debugf("[CreateSvcGroupByName] Patch SvcGroup Success :%s", objToCreate.GetName())
			break
		}
	}

	log.Debugf("[CreateSvcGroupByName] Executed Successfully: %s", objToCreate.GetName())
	return &ServicegroupSvcGroup{
		client:   group.client,
		SvcGroup: result,
	}, nil
}

// UpdateSvcGroupByName updates object stored in the database under the hashedName which is a hash of
// display name and parents names.
func (group *ServicegroupTsmV1) UpdateSvcGroupByName(ctx context.Context,
	objToUpdate *baseservicegrouptsmtanzuvmwarecomv1.SvcGroup) (*ServicegroupSvcGroup, error) {
	log.Debugf("[UpdateSvcGroupByName] Received objToUpdate: %s", objToUpdate.GetName())

	var patch Patch

	if objToUpdate.Annotations != nil || objToUpdate.Labels != nil {
		current, err := group.client.Servicegroup().GetSvcGroupByName(ctx, objToUpdate.Name)
		if err != nil {
			return nil, err
		}

		if objToUpdate.Annotations != nil {
			if current.Annotations[ownershipAnnotation] != "" {
				objToUpdate.Annotations[ownershipAnnotation] = current.Annotations[ownershipAnnotation]
			}
			patch = append(patch, PatchOp{
				Op:    "replace",
				Path:  "/metadata/annotations",
				Value: objToUpdate.Annotations,
			})
		}

		if objToUpdate.Labels != nil {
			parentsList := helper.GetCRDParentsMap()["svcgroups.servicegroup.tsm.tanzu.vmware.com"]
			for _, k := range parentsList {
				objToUpdate.Labels[k] = current.Labels[k]
			}
			objToUpdate.Labels[common.IS_NAME_HASHED_LABEL] = current.Labels[common.IS_NAME_HASHED_LABEL]
			objToUpdate.Labels[common.DISPLAY_NAME_LABEL] = current.Labels[common.DISPLAY_NAME_LABEL]
			patch = append(patch, PatchOp{
				Op:    "replace",
				Path:  "/metadata/labels",
				Value: objToUpdate.Labels,
			})
		}
	}

	var rt reflect.Type

	rt = reflect.TypeOf(objToUpdate.Spec.DisplayName)
	if rt.Kind() == reflect.Slice || rt.Kind() == reflect.Array || rt.Kind() == reflect.Map {
		if !reflect.ValueOf(objToUpdate.Spec.DisplayName).IsNil() {
			patchValueDisplayName := objToUpdate.Spec.DisplayName
			patchOpDisplayName := PatchOp{
				Op:    "replace",
				Path:  "/spec/displayName",
				Value: patchValueDisplayName,
			}
			patch = append(patch, patchOpDisplayName)
		}
	} else {
		patchValueDisplayName := objToUpdate.Spec.DisplayName
		patchOpDisplayName := PatchOp{
			Op:    "replace",
			Path:  "/spec/displayName",
			Value: patchValueDisplayName,
		}
		patch = append(patch, patchOpDisplayName)
	}

	rt = reflect.TypeOf(objToUpdate.Spec.Description)
	if rt.Kind() == reflect.Slice || rt.Kind() == reflect.Array || rt.Kind() == reflect.Map {
		if !reflect.ValueOf(objToUpdate.Spec.Description).IsNil() {
			patchValueDescription := objToUpdate.Spec.Description
			patchOpDescription := PatchOp{
				Op:    "replace",
				Path:  "/spec/description",
				Value: patchValueDescription,
			}
			patch = append(patch, patchOpDescription)
		}
	} else {
		patchValueDescription := objToUpdate.Spec.Description
		patchOpDescription := PatchOp{
			Op:    "replace",
			Path:  "/spec/description",
			Value: patchValueDescription,
		}
		patch = append(patch, patchOpDescription)
	}

	rt = reflect.TypeOf(objToUpdate.Spec.Color)
	if rt.Kind() == reflect.Slice || rt.Kind() == reflect.Array || rt.Kind() == reflect.Map {
		if !reflect.ValueOf(objToUpdate.Spec.Color).IsNil() {
			patchValueColor := objToUpdate.Spec.Color
			patchOpColor := PatchOp{
				Op:    "replace",
				Path:  "/spec/color",
				Value: patchValueColor,
			}
			patch = append(patch, patchOpColor)
		}
	} else {
		patchValueColor := objToUpdate.Spec.Color
		patchOpColor := PatchOp{
			Op:    "replace",
			Path:  "/spec/color",
			Value: patchValueColor,
		}
		patch = append(patch, patchOpColor)
	}

	marshaled, err := patch.Marshal()
	if err != nil {
		return nil, err
	}

	var (
		result *baseservicegrouptsmtanzuvmwarecomv1.SvcGroup
	)
	newCtx := context.TODO()
	retryCount := 0
	for {
		result, err = group.client.baseClient.
			ServicegroupTsmV1().
			SvcGroups().Patch(newCtx, objToUpdate.GetName(), types.JSONPatchType, marshaled, metav1.PatchOptions{}, "")
		if err != nil {
			log.Errorf("[UpdateSvcGroupByName] Failed to patch SvcGroup gvk in parent node[Gnses]: %+v", err)
			if errors.IsTimeout(err) || customerrors.Is(err, context.DeadlineExceeded) {
				log.Errorf("[Retry Count: %d ] %+v", retryCount, err)
				if retryCount == maxRetryCount {
					log.Error("Max Retry exceed on patching gvk")
					log.Errorf("Trigger SvcGroup Delete: %s", objToUpdate.GetName())
					delErr := group.DeleteSvcGroupByName(newCtx, objToUpdate.GetName())
					if delErr != nil {
						log.Errorf("Error occur while deleting SvcGroup: %s", objToUpdate.GetName())
						return nil, delErr
					}
					log.Errorf("SvcGroup Deleted: %s", objToUpdate.GetName())
					return nil, err
				}
				retryCount += 1
				time.Sleep(sleepTime * time.Second)
			} else if customerrors.Is(err, context.Canceled) {
				log.Errorf("[CreateSvcGroupByName]: %+v", err)
				return nil, context.Canceled
			} else {
				log.Errorf("[CreateSvcGroupByName] Unexpected Error SvcGroup] :%+v", err)
				log.Errorf("Trigger SvcGroup Delete: %s", objToUpdate.GetName())
				delErr := group.DeleteSvcGroupByName(newCtx, objToUpdate.GetName())
				if delErr != nil {
					log.Errorf("Error occur while deleting SvcGroup: %+v", objToUpdate.GetName())
					return nil, delErr
				}
				log.Errorf("SvcGroup Deleted: %s", objToUpdate.GetName())
				return nil, err
			}
		} else {
			log.Debugf("[CreateSvcGroupByName] Patch SvcGroup Success :%s", objToUpdate.GetName())
			break
		}
	}
	log.Debugf("[UpdateSvcGroupByName] Executed Successfully %s", objToUpdate.GetName())
	return &ServicegroupSvcGroup{
		client:   group.client,
		SvcGroup: result,
	}, nil
}

// ListSvcGroups returns slice of all existing objects of this type. Selectors can be provided in opts parameter.
func (group *ServicegroupTsmV1) ListSvcGroups(ctx context.Context,
	opts metav1.ListOptions) (result []*ServicegroupSvcGroup, err error) {
	key := "svcgroups.servicegroup.tsm.tanzu.vmware.com"
	if s, ok := subscriptionMap.Load(key); ok {
		items := s.(subscription).informer.GetStore().List()
		result = make([]*ServicegroupSvcGroup, len(items))
		for k, v := range items {
			item, _ := v.(*baseservicegrouptsmtanzuvmwarecomv1.SvcGroup)
			result[k] = &ServicegroupSvcGroup{
				client:   group.client,
				SvcGroup: item,
			}
		}
	} else {
		list, err := group.client.baseClient.ServicegroupTsmV1().
			SvcGroups().List(ctx, opts)
		if err != nil {
			return nil, err
		}
		result = make([]*ServicegroupSvcGroup, len(list.Items))
		for k, v := range list.Items {
			item := v
			result[k] = &ServicegroupSvcGroup{
				client:   group.client,
				SvcGroup: &item,
			}
		}
	}
	return
}

type ServicegroupSvcGroup struct {
	client *Clientset
	*baseservicegrouptsmtanzuvmwarecomv1.SvcGroup
}

// Delete removes obj and all it's children from the database.
func (obj *ServicegroupSvcGroup) Delete(ctx context.Context) error {
	err := obj.client.Servicegroup().DeleteSvcGroupByName(ctx, obj.GetName())
	if err != nil {
		return err
	}
	obj.SvcGroup = nil
	return nil
}

// Update updates spec of object in database. Children and Link can not be updated using this function.
func (obj *ServicegroupSvcGroup) Update(ctx context.Context) error {
	result, err := obj.client.Servicegroup().UpdateSvcGroupByName(ctx, obj.SvcGroup)
	if err != nil {
		return err
	}
	obj.SvcGroup = result.SvcGroup
	return nil
}

func (obj *ServicegroupSvcGroup) GetParent(ctx context.Context) (result *GnsGns, err error) {
	hashedName := helper.GetHashedName("gnses.gns.tsm.tanzu.vmware.com", obj.Labels, obj.Labels["gnses.gns.tsm.tanzu.vmware.com"])
	return obj.client.Gns().GetGnsByName(ctx, hashedName)
}

type svcgroupServicegroupTsmV1Chainer struct {
	client       *Clientset
	name         string
	parentLabels map[string]string
}

func (c *svcgroupServicegroupTsmV1Chainer) Subscribe() {
	key := "svcgroups.servicegroup.tsm.tanzu.vmware.com"
	if _, ok := subscriptionMap.Load(key); !ok {
		informer := informerservicegrouptsmtanzuvmwarecomv1.NewSvcGroupInformer(c.client.baseClient, 0, cache.Indexers{})
		subscribe(key, informer)
	}
}

func (c *svcgroupServicegroupTsmV1Chainer) Unsubscribe() {
	key := "svcgroups.servicegroup.tsm.tanzu.vmware.com"
	if s, ok := subscriptionMap.Load(key); ok {
		close(s.(subscription).stop)
		subscriptionMap.Delete(key)
	}
}

func (c *svcgroupServicegroupTsmV1Chainer) IsSubscribed() bool {
	key := "svcgroups.servicegroup.tsm.tanzu.vmware.com"
	_, ok := subscriptionMap.Load(key)
	return ok
}

func (c *svcgroupServicegroupTsmV1Chainer) RegisterEventHandler(addCB func(obj *ServicegroupSvcGroup), updateCB func(oldObj, newObj *ServicegroupSvcGroup), deleteCB func(obj *ServicegroupSvcGroup)) (cache.ResourceEventHandlerRegistration, error) {
	fmt.Println("RegisterEventHandler for ServicegroupSvcGroup")
	var (
		registrationId cache.ResourceEventHandlerRegistration
		err            error
		informer       cache.SharedIndexInformer
	)
	key := "svcgroups.servicegroup.tsm.tanzu.vmware.com"
	stopper := make(chan struct{})
	if s, ok := subscriptionMap.Load(key); ok {
		fmt.Println("Informer exists for ServicegroupSvcGroup")
		sub := s.(subscription)
		informer = sub.informer
	} else {
		fmt.Println("Informer doesn't exists for ServicegroupSvcGroup, so creating a new one")
		informer = informerservicegrouptsmtanzuvmwarecomv1.NewSvcGroupInformer(c.client.baseClient, 0, cache.Indexers{})
		go informer.Run(stopper)
		subscribe(key, informer)
	}
	registrationId, err = informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
		AddFunc: func(obj interface{}) {
			nc := &ServicegroupSvcGroup{
				client:   c.client,
				SvcGroup: obj.(*baseservicegrouptsmtanzuvmwarecomv1.SvcGroup),
			}

			var parent *GnsGns
			gvkExist := false
			for i := 0; i < 600; i++ {
				// Check if parent exists
				p, err := nc.GetParent(context.TODO())
				if err != nil || p == nil {
					time.Sleep(500 * time.Millisecond)
					continue
				}
				parent = p
				// Check GVK

				if _, ok := parent.Spec.GnsServiceGroupsGvk[nc.DisplayName()]; !ok {
					time.Sleep(500 * time.Millisecond)
					continue
				}

				gvkExist = true
				break
			}
			if parent == nil {
				hashedName := helper.GetHashedName("gnses.gns.tsm.tanzu.vmware.com", nc.Labels, nc.Labels["gnses.gns.tsm.tanzu.vmware.com"])
				parent, err = c.client.Gns().ForceReadGnsByName(context.TODO(), hashedName)
				if err != nil {
					if errors.IsNotFound(err) {
						return
					}
					panic("error occurred while fetching parent " + err.Error())
				}
				panic(fmt.Sprintf("parent found (event loop is stalled) " + nc.DisplayName()))
			}
			if !gvkExist {
				// Check GVK

				if _, ok := parent.Spec.GnsServiceGroupsGvk[nc.DisplayName()]; !ok {
					return
				}

				panic(fmt.Sprintf("gvk found (event loop is stalled) " + nc.DisplayName()))
			}

			addCB(nc)
		},

		UpdateFunc: func(oldObj, newObj interface{}) {
			oldData := &ServicegroupSvcGroup{
				client:   c.client,
				SvcGroup: oldObj.(*baseservicegrouptsmtanzuvmwarecomv1.SvcGroup),
			}
			newData := &ServicegroupSvcGroup{
				client:   c.client,
				SvcGroup: newObj.(*baseservicegrouptsmtanzuvmwarecomv1.SvcGroup),
			}
			updateCB(oldData, newData)
		},

		DeleteFunc: func(obj interface{}) {
			nc := &ServicegroupSvcGroup{
				client:   c.client,
				SvcGroup: obj.(*baseservicegrouptsmtanzuvmwarecomv1.SvcGroup),
			}

			var parent *GnsGns
			gvkExist := true
			for i := 0; i < 600; i++ {
				// Check if parent exists
				p, err := nc.GetParent(context.TODO())
				if err != nil || p == nil {
					time.Sleep(500 * time.Millisecond)
					continue
				}
				parent = p
				// Check GVK

				if _, ok := parent.Spec.GnsServiceGroupsGvk[nc.DisplayName()]; ok {
					time.Sleep(500 * time.Millisecond)
					continue
				}

				gvkExist = false
				break
			}
			if parent == nil {
				hashedName := helper.GetHashedName("gnses.gns.tsm.tanzu.vmware.com", nc.Labels, nc.Labels["gnses.gns.tsm.tanzu.vmware.com"])
				parent, err = c.client.Gns().ForceReadGnsByName(context.TODO(), hashedName)
				if err != nil {
					if errors.IsNotFound(err) {
						return
					}
					panic("error occurred while fetching parent " + err.Error())
				}
				panic(fmt.Sprintf("parent found (event loop is stalled) " + nc.DisplayName()))
			}
			if gvkExist {
				// Check GVK

				if _, ok := parent.Spec.GnsServiceGroupsGvk[nc.DisplayName()]; ok {
					return
				}

				panic(fmt.Sprintf("gvk not found (event loop is stalled) " + nc.DisplayName()))
			}

			deleteCB(nc)
		},
	})
	return registrationId, err
}

func (c *svcgroupServicegroupTsmV1Chainer) RegisterAddCallback(cbfn func(obj *ServicegroupSvcGroup)) (cache.ResourceEventHandlerRegistration, error) {
	log.Debugf("[RegisterAddCallback] Received for ServicegroupSvcGroup")
	var (
		registrationId cache.ResourceEventHandlerRegistration
		err            error
	)
	key := "svcgroups.servicegroup.tsm.tanzu.vmware.com"
	stopper := make(chan struct{})
	if s, ok := subscriptionMap.Load(key); ok {
		log.Debugf("[RegisterAddCallback] ServicegroupSvcGroup Use Subscription Informer")
		sub := s.(subscription)
		registrationId, err = sub.informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
			AddFunc: func(obj interface{}) {
				nc := &ServicegroupSvcGroup{
					client:   c.client,
					SvcGroup: obj.(*baseservicegrouptsmtanzuvmwarecomv1.SvcGroup),
				}

				var parent *GnsGns
				gvkExist := false
				for i := 0; i < 600; i++ {
					// Check if parent exists
					p, err := nc.GetParent(context.TODO())
					if err != nil || p == nil {
						time.Sleep(500 * time.Millisecond)
						continue
					}
					parent = p

					// Check GVK

					if _, ok := parent.Spec.GnsServiceGroupsGvk[nc.DisplayName()]; !ok {
						time.Sleep(500 * time.Millisecond)
						continue
					}

					gvkExist = true

					break
				}

				if parent == nil {
					hashedName := helper.GetHashedName("gnses.gns.tsm.tanzu.vmware.com", nc.Labels, nc.Labels["gnses.gns.tsm.tanzu.vmware.com"])
					parent, err = c.client.Gns().ForceReadGnsByName(context.TODO(), hashedName)
					if err != nil {
						if errors.IsNotFound(err) {
							return
						}

						panic("error occurred while fetching parent " + err.Error())
					}
					panic(fmt.Sprintf("parent found (event loop is stalled) " + nc.DisplayName()))
				}

				if !gvkExist {
					// Check GVK

					if _, ok := parent.Spec.GnsServiceGroupsGvk[nc.DisplayName()]; !ok {
						return
					}

					panic(fmt.Sprintf("gvk found (event loop is stalled) " + nc.DisplayName()))
				}

				cbfn(nc)
			},
		})
	} else {
		log.Debugf("[RegisterAddCallback] ServicegroupSvcGroup Create New Informer")
		informer := informerservicegrouptsmtanzuvmwarecomv1.NewSvcGroupInformer(c.client.baseClient, 0, cache.Indexers{})
		registrationId, err = informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
			AddFunc: func(obj interface{}) {
				nc := &ServicegroupSvcGroup{
					client:   c.client,
					SvcGroup: obj.(*baseservicegrouptsmtanzuvmwarecomv1.SvcGroup),
				}

				var parent *GnsGns
				gvkExist := false
				for i := 0; i < 600; i++ {
					// Check if parent exists
					p, err := nc.GetParent(context.TODO())
					if err != nil || p == nil {
						time.Sleep(500 * time.Millisecond)
						continue
					}
					parent = p

					// Check GVK

					if _, ok := parent.Spec.GnsServiceGroupsGvk[nc.DisplayName()]; !ok {
						time.Sleep(500 * time.Millisecond)
						continue
					}

					gvkExist = true

					break
				}

				if parent == nil {
					hashedName := helper.GetHashedName("gnses.gns.tsm.tanzu.vmware.com", nc.Labels, nc.Labels["gnses.gns.tsm.tanzu.vmware.com"])
					parent, err = c.client.Gns().ForceReadGnsByName(context.TODO(), hashedName)
					if err != nil {
						if errors.IsNotFound(err) {
							return
						}

						panic("error occurred while fetching parent " + err.Error())
					}
					panic(fmt.Sprintf("parent found (event loop is stalled) " + nc.DisplayName()))
				}

				if !gvkExist {
					// Check GVK

					if _, ok := parent.Spec.GnsServiceGroupsGvk[nc.DisplayName()]; !ok {
						return
					}

					panic(fmt.Sprintf("gvk found (event loop is stalled) " + nc.DisplayName()))
				}

				cbfn(nc)
			},
		})
		go informer.Run(stopper)
	}
	return registrationId, err
}

func (c *svcgroupServicegroupTsmV1Chainer) RegisterUpdateCallback(cbfn func(oldObj, newObj *ServicegroupSvcGroup)) (cache.ResourceEventHandlerRegistration, error) {
	log.Debugf("[RegisterUpdateCallback] Received for ServicegroupSvcGroup")
	var (
		registrationId cache.ResourceEventHandlerRegistration
		err            error
	)
	key := "svcgroups.servicegroup.tsm.tanzu.vmware.com"
	stopper := make(chan struct{})
	if s, ok := subscriptionMap.Load(key); ok {
		log.Debugf("[RegisterUpdateCallback] ServicegroupSvcGroup Use Subscription Informer")
		sub := s.(subscription)
		registrationId, err = sub.informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
			UpdateFunc: func(oldObj, newObj interface{}) {
				oldData := &ServicegroupSvcGroup{
					client:   c.client,
					SvcGroup: oldObj.(*baseservicegrouptsmtanzuvmwarecomv1.SvcGroup),
				}
				newData := &ServicegroupSvcGroup{
					client:   c.client,
					SvcGroup: newObj.(*baseservicegrouptsmtanzuvmwarecomv1.SvcGroup),
				}
				cbfn(oldData, newData)
			},
		})
	} else {
		log.Debugf("[RegisterUpdateCallback] ServicegroupSvcGroup Create New Informer")
		informer := informerservicegrouptsmtanzuvmwarecomv1.NewSvcGroupInformer(c.client.baseClient, 0, cache.Indexers{})
		registrationId, err = informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
			UpdateFunc: func(oldObj, newObj interface{}) {
				oldData := &ServicegroupSvcGroup{
					client:   c.client,
					SvcGroup: oldObj.(*baseservicegrouptsmtanzuvmwarecomv1.SvcGroup),
				}
				newData := &ServicegroupSvcGroup{
					client:   c.client,
					SvcGroup: newObj.(*baseservicegrouptsmtanzuvmwarecomv1.SvcGroup),
				}
				cbfn(oldData, newData)
			},
		})
		go informer.Run(stopper)
	}
	return registrationId, err
}

func (c *svcgroupServicegroupTsmV1Chainer) RegisterDeleteCallback(cbfn func(obj *ServicegroupSvcGroup)) (cache.ResourceEventHandlerRegistration, error) {
	log.Debugf("[RegisterDeleteCallback] Received for ServicegroupSvcGroup")
	var (
		registrationId cache.ResourceEventHandlerRegistration
		err            error
	)
	key := "svcgroups.servicegroup.tsm.tanzu.vmware.com"
	stopper := make(chan struct{})
	if s, ok := subscriptionMap.Load(key); ok {
		log.Debugf("[RegisterDeleteCallback] ServicegroupSvcGroup Use Subscription Informer")
		sub := s.(subscription)
		registrationId, err = sub.informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
			DeleteFunc: func(obj interface{}) {
				nc := &ServicegroupSvcGroup{
					client:   c.client,
					SvcGroup: obj.(*baseservicegrouptsmtanzuvmwarecomv1.SvcGroup),
				}

				var parent *GnsGns
				gvkExist := true
				for i := 0; i < 600; i++ {
					// Check if parent exists
					p, err := nc.GetParent(context.TODO())
					if err != nil || p == nil {
						time.Sleep(500 * time.Millisecond)
						continue
					}
					parent = p

					// Check GVK

					if _, ok := parent.Spec.GnsServiceGroupsGvk[nc.DisplayName()]; ok {
						time.Sleep(500 * time.Millisecond)
						continue
					}

					gvkExist = false
					break
				}

				if parent == nil {
					hashedName := helper.GetHashedName("gnses.gns.tsm.tanzu.vmware.com", nc.Labels, nc.Labels["gnses.gns.tsm.tanzu.vmware.com"])
					parent, err = c.client.Gns().ForceReadGnsByName(context.TODO(), hashedName)
					if err != nil {
						if errors.IsNotFound(err) {
							return
						}

						panic("error occurred while fetching parent " + err.Error())
					}
					panic(fmt.Sprintf("parent found (event loop is stalled) " + nc.DisplayName()))
				}

				if gvkExist {
					// Check GVK

					if _, ok := parent.Spec.GnsServiceGroupsGvk[nc.DisplayName()]; ok {
						return
					}

					panic(fmt.Sprintf("gvk not found (event loop is stalled) " + nc.DisplayName()))
				}

				cbfn(nc)
			},
		})
	} else {
		log.Debugf("[RegisterDeleteCallback] ServicegroupSvcGroup Create New Informer")
		informer := informerservicegrouptsmtanzuvmwarecomv1.NewSvcGroupInformer(c.client.baseClient, 0, cache.Indexers{})
		registrationId, err = informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
			DeleteFunc: func(obj interface{}) {
				nc := &ServicegroupSvcGroup{
					client:   c.client,
					SvcGroup: obj.(*baseservicegrouptsmtanzuvmwarecomv1.SvcGroup),
				}

				var parent *GnsGns
				gvkExist := true
				for i := 0; i < 600; i++ {
					// Check if parent exists
					p, err := nc.GetParent(context.TODO())
					if err != nil || p == nil {
						time.Sleep(500 * time.Millisecond)
						continue
					}
					parent = p

					// Check GVK

					if _, ok := parent.Spec.GnsServiceGroupsGvk[nc.DisplayName()]; ok {
						time.Sleep(500 * time.Millisecond)
						continue
					}

					gvkExist = false

					break
				}

				if parent == nil {
					hashedName := helper.GetHashedName("gnses.gns.tsm.tanzu.vmware.com", nc.Labels, nc.Labels["gnses.gns.tsm.tanzu.vmware.com"])
					parent, err = c.client.Gns().ForceReadGnsByName(context.TODO(), hashedName)
					if err != nil {
						if errors.IsNotFound(err) {
							return
						}

						panic("error occurred while fetching parent " + err.Error())
					}
					panic(fmt.Sprintf("parent found (event loop is stalled) " + nc.DisplayName()))
				}

				if gvkExist {
					// Check GVK

					if _, ok := parent.Spec.GnsServiceGroupsGvk[nc.DisplayName()]; ok {
						return
					}

					panic(fmt.Sprintf("gvk not found (event loop is stalled) " + nc.DisplayName()))
				}

				cbfn(nc)
			},
		})
		go informer.Run(stopper)
	}
	return registrationId, err
}

// GetSvcGroupLinkInfoByName returns object stored in the database under the hashedName which is a hash of display
// name and parents names. Use it when you know hashed name of object.
func (group *ServicegroupTsmV1) GetSvcGroupLinkInfoByName(ctx context.Context, hashedName string) (*ServicegroupSvcGroupLinkInfo, error) {
	key := "svcgrouplinkinfos.servicegroup.tsm.tanzu.vmware.com"
	if s, ok := subscriptionMap.Load(key); ok {
		log.Debugf("[GetSvcGroupLinkInfoByName] GetObject: %s from cache", hashedName)
		item, exists, err := s.(subscription).informer.GetStore().GetByKey(hashedName)
		if !exists {
			return nil, err
		}

		log.Debugf("[GetSvcGroupLinkInfoByName] Object: %s exists in cache", hashedName)
		result, _ := item.(*baseservicegrouptsmtanzuvmwarecomv1.SvcGroupLinkInfo)
		return &ServicegroupSvcGroupLinkInfo{
			client:           group.client,
			SvcGroupLinkInfo: result,
		}, nil
	} else {
		retryCount := 0
		for {
			result, err := group.client.baseClient.
				ServicegroupTsmV1().
				SvcGroupLinkInfos().Get(ctx, hashedName, metav1.GetOptions{})
			if err != nil {
				log.Errorf("[GetSvcGroupLinkInfoByName] Failed to Get SvcGroupLinkInfos: %+v", err)
				if errors.IsTimeout(err) || customerrors.Is(err, context.DeadlineExceeded) {
					log.Errorf("[Retry Count: %d ] %+v", retryCount, err)
					if retryCount == maxRetryCount {
						log.Error("Max Retry exceed on Get SvcGroupLinkInfos")
						return nil, err
					}
					retryCount += 1
					time.Sleep(sleepTime * time.Second)
				} else if customerrors.Is(err, context.Canceled) {
					log.Errorf("[GetSvcGroupLinkInfoByName]: %+v", err)
					return nil, context.Canceled
				} else {
					log.Errorf("[GetSvcGroupLinkInfoByName]: %+v", err)
					return nil, err
				}
			} else {
				return &ServicegroupSvcGroupLinkInfo{
					client:           group.client,
					SvcGroupLinkInfo: result,
				}, nil
			}
		}
	}
}

// ForceReadSvcGroupLinkInfoByName read object directly from the database under the hashedName which is a hash of display
// name and parents names. Use it when you know hashed name of object.
func (group *ServicegroupTsmV1) ForceReadSvcGroupLinkInfoByName(ctx context.Context, hashedName string) (*ServicegroupSvcGroupLinkInfo, error) {
	log.Debugf("[ForceReadSvcGroupLinkInfoByName] Received object :%s to read from DB", hashedName)
	retryCount := 0
	for {
		result, err := group.client.baseClient.
			ServicegroupTsmV1().
			SvcGroupLinkInfos().Get(ctx, hashedName, metav1.GetOptions{})
		if err != nil {
			log.Errorf("[ForceReadSvcGroupLinkInfoByName] Failed to Get SvcGroupLinkInfos: %+v", err)
			if errors.IsTimeout(err) || customerrors.Is(err, context.DeadlineExceeded) {
				log.Errorf("[Retry Count: %d ] %+v", retryCount, err)
				if retryCount == maxRetryCount {
					log.Error("Max Retry exceed on Get SvcGroupLinkInfos")
					return nil, err
				}
				retryCount += 1
				time.Sleep(sleepTime * time.Second)
			} else if customerrors.Is(err, context.Canceled) {
				log.Errorf("[ForceReadSvcGroupLinkInfoByName]: %+v", err)
				return nil, context.Canceled
			} else {
				log.Errorf("[ForceReadSvcGroupLinkInfoByName]: %+v", err)
				return nil, err
			}
		} else {
			log.Debugf("[ForceReadSvcGroupLinkInfoByName] Executed Successfully :%s", hashedName)
			return &ServicegroupSvcGroupLinkInfo{
				client:           group.client,
				SvcGroupLinkInfo: result,
			}, nil
		}
	}
}

// DeleteSvcGroupLinkInfoByName deletes object stored in the database under the hashedName which is a hash of
// display name and parents names. Use it when you know hashed name of object.
func (group *ServicegroupTsmV1) DeleteSvcGroupLinkInfoByName(ctx context.Context, hashedName string) (err error) {
	log.Debugf("[DeleteSvcGroupLinkInfoByName] Received objectToDelete: %s", hashedName)

	var (
		retryCount int
		result     *baseservicegrouptsmtanzuvmwarecomv1.SvcGroupLinkInfo
	)
	retryCount = 0
	for {
		result, err = group.client.baseClient.
			ServicegroupTsmV1().
			SvcGroupLinkInfos().Get(ctx, hashedName, metav1.GetOptions{})
		if err != nil {
			log.Errorf("[DeleteSvcGroupLinkInfoByName] Failed to Get SvcGroupLinkInfos: %+v", err)
			if errors.IsTimeout(err) || customerrors.Is(err, context.DeadlineExceeded) {
				log.Errorf("[Retry Count: %d ] %+v", retryCount, err)
				if retryCount == maxRetryCount {
					log.Error("Max Retry exceed on Get SvcGroupLinkInfos")
					return err
				}
				retryCount += 1
				time.Sleep(sleepTime * time.Second)
			} else if customerrors.Is(err, context.Canceled) {
				log.Errorf("[DeleteSvcGroupLinkInfoByName]: %+v", err)
				return context.Canceled
			} else if errors.IsNotFound(err) {
				log.Errorf("[DeleteSvcGroupLinkInfoByName] Object Notfound: %+v", err)
				break
			} else {
				log.Errorf("[DeleteSvcGroupLinkInfoByName]: %+v", err)
				return err
			}
		} else {
			break
		}
	}

	retryCount = 0
	for {
		err = group.client.baseClient.
			ServicegroupTsmV1().
			SvcGroupLinkInfos().Delete(ctx, hashedName, metav1.DeleteOptions{})
		if err != nil {
			log.Errorf("[DeleteSvcGroupLinkInfoByName] failed to delete SvcGroupLinkInfos: %+v", err)
			if errors.IsTimeout(err) || customerrors.Is(err, context.DeadlineExceeded) {
				log.Errorf("[Retry Count: %d ] %+v", retryCount, err)
				if retryCount == maxRetryCount {
					log.Error("Max retry exceed on delete SvcGroupLinkInfos")
					return err
				}
				retryCount += 1
				time.Sleep(sleepTime * time.Second)
			} else if customerrors.Is(err, context.Canceled) {
				log.Errorf("[DeleteSvcGroupLinkInfoByName]: %+v", err)
				return context.Canceled
			} else if errors.IsNotFound(err) {
				log.Errorf("[DeleteSvcGroupLinkInfoByName] Object not found: %+v", err)
				break
			} else {
				log.Errorf("[DeleteSvcGroupLinkInfoByName]: %+v", err)
				return err
			}
		}
	}
	// Get Parent Node and check if gvk present before patch

	var gvkPresent bool
	log.Debugf("[DeleteSvcGroupLinkInfoByName] Get Parent details")
	var patch Patch
	parents := result.GetLabels()
	if parents == nil {
		parents = make(map[string]string)
	}
	parentName, ok := parents["configs.config.tsm.tanzu.vmware.com"]
	if !ok {
		parentName = helper.DEFAULT_KEY
	}
	if result.GetLabels() != nil {
		if parents[common.IS_NAME_HASHED_LABEL] == "true" {
			parentName = helper.GetHashedName("configs.config.tsm.tanzu.vmware.com", parents, parentName)
		}
	} else {
		parentName = helper.GetHashedName("configs.config.tsm.tanzu.vmware.com", parents, parentName)
	}
	parentData, err := group.client.baseClient.
		ConfigTsmV1().
		Configs().Get(ctx, parentName, metav1.GetOptions{})
	if err != nil {
		log.Errorf("[DeleteSvcGroupLinkInfoByName] Failed to get Parent node: %+v", err)
		if errors.IsNotFound(err) {
			return nil
		} else {
			return err
		}
	}

	if parentData.Spec.SvcGrpInfoGvk != nil {
		log.Debugf("[DeleteSvcGroupLinkInfoByName] GVK present in parent for node: %s", hashedName)
		gvkPresent = true
	}

	if gvkPresent {

		patchOp := PatchOp{
			Op:   "remove",
			Path: "/spec/svcGrpInfoGvk",
		}

		patch = append(patch, patchOp)
		marshaled, err := patch.Marshal()
		if err != nil {
			return err
		}

		retryCount = 0
		newCtx := context.TODO()
		for {
			_, err = group.client.baseClient.
				ConfigTsmV1().
				Configs().Patch(newCtx, parentName, types.JSONPatchType, marshaled, metav1.PatchOptions{})
			if err != nil {
				log.Errorf("Failed to patch SvcGroupLinkInfo gvk in parent node[Configs]: %+v", err)
				if errors.IsTimeout(err) || customerrors.Is(err, context.DeadlineExceeded) {
					log.Errorf("[Retry Count: %d ] %+v", retryCount, err)
					if retryCount == maxRetryCount {
						log.Error("Max Retry exceed on patching gvk")
						return err
					}
					retryCount += 1
					time.Sleep(sleepTime * time.Second)
				} else if customerrors.Is(err, context.Canceled) {
					log.Errorf("[DeleteSvcGroupLinkInfoByName]: %+v", err)
					return context.Canceled
				} else {
					log.Errorf("Unexpected Error occur SvcGroupLinkInfo]: %+v", err)
					return err
				}
			} else {
				log.Debugf("[DeleteSvcGroupLinkInfoByName] Patch SvcGroupLinkInfo Success: %s", hashedName)
				break
			}
		}
		log.Debugf("[DeleteSvcGroupLinkInfoByName] Executed Successfully: %s", hashedName)
	}

	return
}

// CreateSvcGroupLinkInfoByName creates object in the database without hashing the name.
// Use it directly ONLY when objToCreate.Name is hashed name of the object.
func (group *ServicegroupTsmV1) CreateSvcGroupLinkInfoByName(ctx context.Context,
	objToCreate *baseservicegrouptsmtanzuvmwarecomv1.SvcGroupLinkInfo) (*ServicegroupSvcGroupLinkInfo, error) {
	log.Debugf("[CreateSvcGroupLinkInfoByName] Received objToCreate: %s", objToCreate.GetName())
	if objToCreate.GetLabels() == nil {
		objToCreate.Labels = make(map[string]string)
	}
	if _, ok := objToCreate.Labels[common.DISPLAY_NAME_LABEL]; !ok {
		objToCreate.Labels[common.DISPLAY_NAME_LABEL] = objToCreate.GetName()
	}

	var (
		retryCount int
		result     *baseservicegrouptsmtanzuvmwarecomv1.SvcGroupLinkInfo
		err        error
	)
	retryCount = 0
	for {
		result, err = group.client.baseClient.
			ServicegroupTsmV1().
			SvcGroupLinkInfos().Create(ctx, objToCreate, metav1.CreateOptions{})
		if err != nil {
			log.Errorf("[CreateSvcGroupLinkInfoByName] Failed to Create SvcGroupLinkInfos: %+v", err)
			if errors.IsTimeout(err) || customerrors.Is(err, context.DeadlineExceeded) {
				log.Errorf("[Retry Count: %d ] %+v", retryCount, err)
				if retryCount == maxRetryCount {
					log.Error("Max Retry exceed on Get SvcGroupLinkInfos")
					return nil, err
				}
				retryCount += 1
				time.Sleep(sleepTime * time.Second)
			} else if customerrors.Is(err, context.Canceled) {
				log.Errorf("[CreateSvcGroupLinkInfoByName]: %+v", err)
				return nil, context.Canceled
			} else {
				log.Errorf("[CreateSvcGroupLinkInfoByName]: %+v", err)
				return nil, err
			}
		} else {
			break
		}
	}
	log.Debugf("[CreateSvcGroupLinkInfoByName] SvcGroupLinkInfos created successfully: %s", objToCreate.GetName())

	parentName, ok := objToCreate.GetLabels()["configs.config.tsm.tanzu.vmware.com"]
	if !ok {
		parentName = helper.DEFAULT_KEY
	}
	if objToCreate.Labels[common.IS_NAME_HASHED_LABEL] == "true" {
		parentName = helper.GetHashedName("configs.config.tsm.tanzu.vmware.com", objToCreate.GetLabels(), parentName)
	}

	var patch Patch
	patchOp := PatchOp{
		Op:   "replace",
		Path: "/spec/svcGrpInfoGvk",
		Value: baseservicegrouptsmtanzuvmwarecomv1.Child{
			Group: "servicegroup.tsm.tanzu.vmware.com",
			Kind:  "SvcGroupLinkInfo",
			Name:  objToCreate.Name,
		},
	}
	patch = append(patch, patchOp)
	marshaled, err := patch.Marshal()
	if err != nil {
		return nil, err
	}
	retryCount = 0
	newCtx := context.TODO()
	for {
		_, err = group.client.baseClient.
			ConfigTsmV1().
			Configs().Patch(newCtx, parentName, types.JSONPatchType, marshaled, metav1.PatchOptions{})
		if err != nil {
			log.Errorf("[CreateSvcGroupLinkInfoByName] Failed to patch SvcGroupLinkInfo gvk in parent node[Configs]: %+v", err)
			if errors.IsTimeout(err) || customerrors.Is(err, context.DeadlineExceeded) {
				log.Errorf("[Retry Count: %d ] %+v", retryCount, err)
				if retryCount == maxRetryCount {
					log.Error("Max Retry exceed on patching gvk")
					log.Errorf("Trigger SvcGroupLinkInfo Delete: %s", objToCreate.GetName())
					delErr := group.DeleteSvcGroupLinkInfoByName(newCtx, objToCreate.GetName())
					if delErr != nil {
						log.Errorf("Error occur while deleting SvcGroupLinkInfo: %s", objToCreate.GetName())
						return nil, delErr
					}
					log.Errorf("SvcGroupLinkInfo Deleted: %s", objToCreate.GetName())
					return nil, err
				}
				retryCount += 1
				time.Sleep(sleepTime * time.Second)
			} else if customerrors.Is(err, context.Canceled) {
				log.Errorf("[CreateSvcGroupLinkInfoByName]: %+v", err)
				return nil, context.Canceled
			} else {
				log.Errorf("[CreateSvcGroupLinkInfoByName] Unexpected Error SvcGroupLinkInfo] :%+v", err)
				log.Errorf("Trigger SvcGroupLinkInfo Delete: %s", objToCreate.GetName())
				delErr := group.DeleteSvcGroupLinkInfoByName(newCtx, objToCreate.GetName())
				if delErr != nil {
					log.Errorf("Error occur while deleting SvcGroupLinkInfo: %+v", objToCreate.GetName())
					return nil, delErr
				}
				log.Errorf("SvcGroupLinkInfo Deleted: %s", objToCreate.GetName())
				return nil, err
			}
		} else {
			log.Debugf("[CreateSvcGroupLinkInfoByName] Patch SvcGroupLinkInfo Success :%s", objToCreate.GetName())
			break
		}
	}

	log.Debugf("[CreateSvcGroupLinkInfoByName] Executed Successfully: %s", objToCreate.GetName())
	return &ServicegroupSvcGroupLinkInfo{
		client:           group.client,
		SvcGroupLinkInfo: result,
	}, nil
}

// UpdateSvcGroupLinkInfoByName updates object stored in the database under the hashedName which is a hash of
// display name and parents names.
func (group *ServicegroupTsmV1) UpdateSvcGroupLinkInfoByName(ctx context.Context,
	objToUpdate *baseservicegrouptsmtanzuvmwarecomv1.SvcGroupLinkInfo) (*ServicegroupSvcGroupLinkInfo, error) {
	log.Debugf("[UpdateSvcGroupLinkInfoByName] Received objToUpdate: %s", objToUpdate.GetName())

	var patch Patch

	if objToUpdate.Annotations != nil || objToUpdate.Labels != nil {
		current, err := group.client.Servicegroup().GetSvcGroupLinkInfoByName(ctx, objToUpdate.Name)
		if err != nil {
			return nil, err
		}

		if objToUpdate.Annotations != nil {
			if current.Annotations[ownershipAnnotation] != "" {
				objToUpdate.Annotations[ownershipAnnotation] = current.Annotations[ownershipAnnotation]
			}
			patch = append(patch, PatchOp{
				Op:    "replace",
				Path:  "/metadata/annotations",
				Value: objToUpdate.Annotations,
			})
		}

		if objToUpdate.Labels != nil {
			parentsList := helper.GetCRDParentsMap()["svcgrouplinkinfos.servicegroup.tsm.tanzu.vmware.com"]
			for _, k := range parentsList {
				objToUpdate.Labels[k] = current.Labels[k]
			}
			objToUpdate.Labels[common.IS_NAME_HASHED_LABEL] = current.Labels[common.IS_NAME_HASHED_LABEL]
			objToUpdate.Labels[common.DISPLAY_NAME_LABEL] = current.Labels[common.DISPLAY_NAME_LABEL]
			patch = append(patch, PatchOp{
				Op:    "replace",
				Path:  "/metadata/labels",
				Value: objToUpdate.Labels,
			})
		}
	}

	var rt reflect.Type

	rt = reflect.TypeOf(objToUpdate.Spec.ClusterName)
	if rt.Kind() == reflect.Slice || rt.Kind() == reflect.Array || rt.Kind() == reflect.Map {
		if !reflect.ValueOf(objToUpdate.Spec.ClusterName).IsNil() {
			patchValueClusterName := objToUpdate.Spec.ClusterName
			patchOpClusterName := PatchOp{
				Op:    "replace",
				Path:  "/spec/clusterName",
				Value: patchValueClusterName,
			}
			patch = append(patch, patchOpClusterName)
		}
	} else {
		patchValueClusterName := objToUpdate.Spec.ClusterName
		patchOpClusterName := PatchOp{
			Op:    "replace",
			Path:  "/spec/clusterName",
			Value: patchValueClusterName,
		}
		patch = append(patch, patchOpClusterName)
	}

	rt = reflect.TypeOf(objToUpdate.Spec.DomainName)
	if rt.Kind() == reflect.Slice || rt.Kind() == reflect.Array || rt.Kind() == reflect.Map {
		if !reflect.ValueOf(objToUpdate.Spec.DomainName).IsNil() {
			patchValueDomainName := objToUpdate.Spec.DomainName
			patchOpDomainName := PatchOp{
				Op:    "replace",
				Path:  "/spec/domainName",
				Value: patchValueDomainName,
			}
			patch = append(patch, patchOpDomainName)
		}
	} else {
		patchValueDomainName := objToUpdate.Spec.DomainName
		patchOpDomainName := PatchOp{
			Op:    "replace",
			Path:  "/spec/domainName",
			Value: patchValueDomainName,
		}
		patch = append(patch, patchOpDomainName)
	}

	rt = reflect.TypeOf(objToUpdate.Spec.ServiceName)
	if rt.Kind() == reflect.Slice || rt.Kind() == reflect.Array || rt.Kind() == reflect.Map {
		if !reflect.ValueOf(objToUpdate.Spec.ServiceName).IsNil() {
			patchValueServiceName := objToUpdate.Spec.ServiceName
			patchOpServiceName := PatchOp{
				Op:    "replace",
				Path:  "/spec/serviceName",
				Value: patchValueServiceName,
			}
			patch = append(patch, patchOpServiceName)
		}
	} else {
		patchValueServiceName := objToUpdate.Spec.ServiceName
		patchOpServiceName := PatchOp{
			Op:    "replace",
			Path:  "/spec/serviceName",
			Value: patchValueServiceName,
		}
		patch = append(patch, patchOpServiceName)
	}

	rt = reflect.TypeOf(objToUpdate.Spec.ServiceType)
	if rt.Kind() == reflect.Slice || rt.Kind() == reflect.Array || rt.Kind() == reflect.Map {
		if !reflect.ValueOf(objToUpdate.Spec.ServiceType).IsNil() {
			patchValueServiceType := objToUpdate.Spec.ServiceType
			patchOpServiceType := PatchOp{
				Op:    "replace",
				Path:  "/spec/serviceType",
				Value: patchValueServiceType,
			}
			patch = append(patch, patchOpServiceType)
		}
	} else {
		patchValueServiceType := objToUpdate.Spec.ServiceType
		patchOpServiceType := PatchOp{
			Op:    "replace",
			Path:  "/spec/serviceType",
			Value: patchValueServiceType,
		}
		patch = append(patch, patchOpServiceType)
	}

	marshaled, err := patch.Marshal()
	if err != nil {
		return nil, err
	}

	var (
		result *baseservicegrouptsmtanzuvmwarecomv1.SvcGroupLinkInfo
	)
	newCtx := context.TODO()
	retryCount := 0
	for {
		result, err = group.client.baseClient.
			ServicegroupTsmV1().
			SvcGroupLinkInfos().Patch(newCtx, objToUpdate.GetName(), types.JSONPatchType, marshaled, metav1.PatchOptions{}, "")
		if err != nil {
			log.Errorf("[UpdateSvcGroupLinkInfoByName] Failed to patch SvcGroupLinkInfo gvk in parent node[Configs]: %+v", err)
			if errors.IsTimeout(err) || customerrors.Is(err, context.DeadlineExceeded) {
				log.Errorf("[Retry Count: %d ] %+v", retryCount, err)
				if retryCount == maxRetryCount {
					log.Error("Max Retry exceed on patching gvk")
					log.Errorf("Trigger SvcGroupLinkInfo Delete: %s", objToUpdate.GetName())
					delErr := group.DeleteSvcGroupLinkInfoByName(newCtx, objToUpdate.GetName())
					if delErr != nil {
						log.Errorf("Error occur while deleting SvcGroupLinkInfo: %s", objToUpdate.GetName())
						return nil, delErr
					}
					log.Errorf("SvcGroupLinkInfo Deleted: %s", objToUpdate.GetName())
					return nil, err
				}
				retryCount += 1
				time.Sleep(sleepTime * time.Second)
			} else if customerrors.Is(err, context.Canceled) {
				log.Errorf("[CreateSvcGroupLinkInfoByName]: %+v", err)
				return nil, context.Canceled
			} else {
				log.Errorf("[CreateSvcGroupLinkInfoByName] Unexpected Error SvcGroupLinkInfo] :%+v", err)
				log.Errorf("Trigger SvcGroupLinkInfo Delete: %s", objToUpdate.GetName())
				delErr := group.DeleteSvcGroupLinkInfoByName(newCtx, objToUpdate.GetName())
				if delErr != nil {
					log.Errorf("Error occur while deleting SvcGroupLinkInfo: %+v", objToUpdate.GetName())
					return nil, delErr
				}
				log.Errorf("SvcGroupLinkInfo Deleted: %s", objToUpdate.GetName())
				return nil, err
			}
		} else {
			log.Debugf("[CreateSvcGroupLinkInfoByName] Patch SvcGroupLinkInfo Success :%s", objToUpdate.GetName())
			break
		}
	}
	log.Debugf("[UpdateSvcGroupLinkInfoByName] Executed Successfully %s", objToUpdate.GetName())
	return &ServicegroupSvcGroupLinkInfo{
		client:           group.client,
		SvcGroupLinkInfo: result,
	}, nil
}

// ListSvcGroupLinkInfos returns slice of all existing objects of this type. Selectors can be provided in opts parameter.
func (group *ServicegroupTsmV1) ListSvcGroupLinkInfos(ctx context.Context,
	opts metav1.ListOptions) (result []*ServicegroupSvcGroupLinkInfo, err error) {
	key := "svcgrouplinkinfos.servicegroup.tsm.tanzu.vmware.com"
	if s, ok := subscriptionMap.Load(key); ok {
		items := s.(subscription).informer.GetStore().List()
		result = make([]*ServicegroupSvcGroupLinkInfo, len(items))
		for k, v := range items {
			item, _ := v.(*baseservicegrouptsmtanzuvmwarecomv1.SvcGroupLinkInfo)
			result[k] = &ServicegroupSvcGroupLinkInfo{
				client:           group.client,
				SvcGroupLinkInfo: item,
			}
		}
	} else {
		list, err := group.client.baseClient.ServicegroupTsmV1().
			SvcGroupLinkInfos().List(ctx, opts)
		if err != nil {
			return nil, err
		}
		result = make([]*ServicegroupSvcGroupLinkInfo, len(list.Items))
		for k, v := range list.Items {
			item := v
			result[k] = &ServicegroupSvcGroupLinkInfo{
				client:           group.client,
				SvcGroupLinkInfo: &item,
			}
		}
	}
	return
}

type ServicegroupSvcGroupLinkInfo struct {
	client *Clientset
	*baseservicegrouptsmtanzuvmwarecomv1.SvcGroupLinkInfo
}

// Delete removes obj and all it's children from the database.
func (obj *ServicegroupSvcGroupLinkInfo) Delete(ctx context.Context) error {
	err := obj.client.Servicegroup().DeleteSvcGroupLinkInfoByName(ctx, obj.GetName())
	if err != nil {
		return err
	}
	obj.SvcGroupLinkInfo = nil
	return nil
}

// Update updates spec of object in database. Children and Link can not be updated using this function.
func (obj *ServicegroupSvcGroupLinkInfo) Update(ctx context.Context) error {
	result, err := obj.client.Servicegroup().UpdateSvcGroupLinkInfoByName(ctx, obj.SvcGroupLinkInfo)
	if err != nil {
		return err
	}
	obj.SvcGroupLinkInfo = result.SvcGroupLinkInfo
	return nil
}

func (obj *ServicegroupSvcGroupLinkInfo) GetParent(ctx context.Context) (result *ConfigConfig, err error) {
	hashedName := helper.GetHashedName("configs.config.tsm.tanzu.vmware.com", obj.Labels, obj.Labels["configs.config.tsm.tanzu.vmware.com"])
	return obj.client.Config().GetConfigByName(ctx, hashedName)
}

type svcgrouplinkinfoServicegroupTsmV1Chainer struct {
	client       *Clientset
	name         string
	parentLabels map[string]string
}

func (c *svcgrouplinkinfoServicegroupTsmV1Chainer) Subscribe() {
	key := "svcgrouplinkinfos.servicegroup.tsm.tanzu.vmware.com"
	if _, ok := subscriptionMap.Load(key); !ok {
		informer := informerservicegrouptsmtanzuvmwarecomv1.NewSvcGroupLinkInfoInformer(c.client.baseClient, 0, cache.Indexers{})
		subscribe(key, informer)
	}
}

func (c *svcgrouplinkinfoServicegroupTsmV1Chainer) Unsubscribe() {
	key := "svcgrouplinkinfos.servicegroup.tsm.tanzu.vmware.com"
	if s, ok := subscriptionMap.Load(key); ok {
		close(s.(subscription).stop)
		subscriptionMap.Delete(key)
	}
}

func (c *svcgrouplinkinfoServicegroupTsmV1Chainer) IsSubscribed() bool {
	key := "svcgrouplinkinfos.servicegroup.tsm.tanzu.vmware.com"
	_, ok := subscriptionMap.Load(key)
	return ok
}

func (c *svcgrouplinkinfoServicegroupTsmV1Chainer) RegisterEventHandler(addCB func(obj *ServicegroupSvcGroupLinkInfo), updateCB func(oldObj, newObj *ServicegroupSvcGroupLinkInfo), deleteCB func(obj *ServicegroupSvcGroupLinkInfo)) (cache.ResourceEventHandlerRegistration, error) {
	fmt.Println("RegisterEventHandler for ServicegroupSvcGroupLinkInfo")
	var (
		registrationId cache.ResourceEventHandlerRegistration
		err            error
		informer       cache.SharedIndexInformer
	)
	key := "svcgrouplinkinfos.servicegroup.tsm.tanzu.vmware.com"
	stopper := make(chan struct{})
	if s, ok := subscriptionMap.Load(key); ok {
		fmt.Println("Informer exists for ServicegroupSvcGroupLinkInfo")
		sub := s.(subscription)
		informer = sub.informer
	} else {
		fmt.Println("Informer doesn't exists for ServicegroupSvcGroupLinkInfo, so creating a new one")
		informer = informerservicegrouptsmtanzuvmwarecomv1.NewSvcGroupLinkInfoInformer(c.client.baseClient, 0, cache.Indexers{})
		go informer.Run(stopper)
		subscribe(key, informer)
	}
	registrationId, err = informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
		AddFunc: func(obj interface{}) {
			nc := &ServicegroupSvcGroupLinkInfo{
				client:           c.client,
				SvcGroupLinkInfo: obj.(*baseservicegrouptsmtanzuvmwarecomv1.SvcGroupLinkInfo),
			}

			var parent *ConfigConfig
			gvkExist := false
			for i := 0; i < 600; i++ {
				// Check if parent exists
				p, err := nc.GetParent(context.TODO())
				if err != nil || p == nil {
					time.Sleep(500 * time.Millisecond)
					continue
				}
				parent = p
				// Check GVK

				if parent.Spec.SvcGrpInfoGvk == nil {
					time.Sleep(500 * time.Millisecond)
					continue
				}

				gvkExist = true
				break
			}
			if parent == nil {
				hashedName := helper.GetHashedName("configs.config.tsm.tanzu.vmware.com", nc.Labels, nc.Labels["configs.config.tsm.tanzu.vmware.com"])
				parent, err = c.client.Config().ForceReadConfigByName(context.TODO(), hashedName)
				if err != nil {
					if errors.IsNotFound(err) {
						return
					}
					panic("error occurred while fetching parent " + err.Error())
				}
				panic(fmt.Sprintf("parent found (event loop is stalled) " + nc.DisplayName()))
			}
			if !gvkExist {
				// Check GVK

				if parent.Spec.SvcGrpInfoGvk == nil {
					return
				}

				panic(fmt.Sprintf("gvk found (event loop is stalled) " + nc.DisplayName()))
			}

			addCB(nc)
		},

		UpdateFunc: func(oldObj, newObj interface{}) {
			oldData := &ServicegroupSvcGroupLinkInfo{
				client:           c.client,
				SvcGroupLinkInfo: oldObj.(*baseservicegrouptsmtanzuvmwarecomv1.SvcGroupLinkInfo),
			}
			newData := &ServicegroupSvcGroupLinkInfo{
				client:           c.client,
				SvcGroupLinkInfo: newObj.(*baseservicegrouptsmtanzuvmwarecomv1.SvcGroupLinkInfo),
			}
			updateCB(oldData, newData)
		},

		DeleteFunc: func(obj interface{}) {
			nc := &ServicegroupSvcGroupLinkInfo{
				client:           c.client,
				SvcGroupLinkInfo: obj.(*baseservicegrouptsmtanzuvmwarecomv1.SvcGroupLinkInfo),
			}

			var parent *ConfigConfig
			gvkExist := true
			for i := 0; i < 600; i++ {
				// Check if parent exists
				p, err := nc.GetParent(context.TODO())
				if err != nil || p == nil {
					time.Sleep(500 * time.Millisecond)
					continue
				}
				parent = p
				// Check GVK

				if parent.Spec.SvcGrpInfoGvk != nil {
					time.Sleep(500 * time.Millisecond)
					continue
				}

				gvkExist = false
				break
			}
			if parent == nil {
				hashedName := helper.GetHashedName("configs.config.tsm.tanzu.vmware.com", nc.Labels, nc.Labels["configs.config.tsm.tanzu.vmware.com"])
				parent, err = c.client.Config().ForceReadConfigByName(context.TODO(), hashedName)
				if err != nil {
					if errors.IsNotFound(err) {
						return
					}
					panic("error occurred while fetching parent " + err.Error())
				}
				panic(fmt.Sprintf("parent found (event loop is stalled) " + nc.DisplayName()))
			}
			if gvkExist {
				// Check GVK

				if parent.Spec.SvcGrpInfoGvk != nil {
					return
				}

				panic(fmt.Sprintf("gvk not found (event loop is stalled) " + nc.DisplayName()))
			}

			deleteCB(nc)
		},
	})
	return registrationId, err
}

func (c *svcgrouplinkinfoServicegroupTsmV1Chainer) RegisterAddCallback(cbfn func(obj *ServicegroupSvcGroupLinkInfo)) (cache.ResourceEventHandlerRegistration, error) {
	log.Debugf("[RegisterAddCallback] Received for ServicegroupSvcGroupLinkInfo")
	var (
		registrationId cache.ResourceEventHandlerRegistration
		err            error
	)
	key := "svcgrouplinkinfos.servicegroup.tsm.tanzu.vmware.com"
	stopper := make(chan struct{})
	if s, ok := subscriptionMap.Load(key); ok {
		log.Debugf("[RegisterAddCallback] ServicegroupSvcGroupLinkInfo Use Subscription Informer")
		sub := s.(subscription)
		registrationId, err = sub.informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
			AddFunc: func(obj interface{}) {
				nc := &ServicegroupSvcGroupLinkInfo{
					client:           c.client,
					SvcGroupLinkInfo: obj.(*baseservicegrouptsmtanzuvmwarecomv1.SvcGroupLinkInfo),
				}

				var parent *ConfigConfig
				gvkExist := false
				for i := 0; i < 600; i++ {
					// Check if parent exists
					p, err := nc.GetParent(context.TODO())
					if err != nil || p == nil {
						time.Sleep(500 * time.Millisecond)
						continue
					}
					parent = p

					// Check GVK

					if parent.Spec.SvcGrpInfoGvk == nil {
						time.Sleep(500 * time.Millisecond)
						continue
					}

					gvkExist = true

					break
				}

				if parent == nil {
					hashedName := helper.GetHashedName("configs.config.tsm.tanzu.vmware.com", nc.Labels, nc.Labels["configs.config.tsm.tanzu.vmware.com"])
					parent, err = c.client.Config().ForceReadConfigByName(context.TODO(), hashedName)
					if err != nil {
						if errors.IsNotFound(err) {
							return
						}

						panic("error occurred while fetching parent " + err.Error())
					}
					panic(fmt.Sprintf("parent found (event loop is stalled) " + nc.DisplayName()))
				}

				if !gvkExist {
					// Check GVK

					if parent.Spec.SvcGrpInfoGvk == nil {
						return
					}

					panic(fmt.Sprintf("gvk found (event loop is stalled) " + nc.DisplayName()))
				}

				cbfn(nc)
			},
		})
	} else {
		log.Debugf("[RegisterAddCallback] ServicegroupSvcGroupLinkInfo Create New Informer")
		informer := informerservicegrouptsmtanzuvmwarecomv1.NewSvcGroupLinkInfoInformer(c.client.baseClient, 0, cache.Indexers{})
		registrationId, err = informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
			AddFunc: func(obj interface{}) {
				nc := &ServicegroupSvcGroupLinkInfo{
					client:           c.client,
					SvcGroupLinkInfo: obj.(*baseservicegrouptsmtanzuvmwarecomv1.SvcGroupLinkInfo),
				}

				var parent *ConfigConfig
				gvkExist := false
				for i := 0; i < 600; i++ {
					// Check if parent exists
					p, err := nc.GetParent(context.TODO())
					if err != nil || p == nil {
						time.Sleep(500 * time.Millisecond)
						continue
					}
					parent = p

					// Check GVK

					if parent.Spec.SvcGrpInfoGvk == nil {
						time.Sleep(500 * time.Millisecond)
						continue
					}

					gvkExist = true

					break
				}

				if parent == nil {
					hashedName := helper.GetHashedName("configs.config.tsm.tanzu.vmware.com", nc.Labels, nc.Labels["configs.config.tsm.tanzu.vmware.com"])
					parent, err = c.client.Config().ForceReadConfigByName(context.TODO(), hashedName)
					if err != nil {
						if errors.IsNotFound(err) {
							return
						}

						panic("error occurred while fetching parent " + err.Error())
					}
					panic(fmt.Sprintf("parent found (event loop is stalled) " + nc.DisplayName()))
				}

				if !gvkExist {
					// Check GVK

					if parent.Spec.SvcGrpInfoGvk == nil {
						return
					}

					panic(fmt.Sprintf("gvk found (event loop is stalled) " + nc.DisplayName()))
				}

				cbfn(nc)
			},
		})
		go informer.Run(stopper)
	}
	return registrationId, err
}

func (c *svcgrouplinkinfoServicegroupTsmV1Chainer) RegisterUpdateCallback(cbfn func(oldObj, newObj *ServicegroupSvcGroupLinkInfo)) (cache.ResourceEventHandlerRegistration, error) {
	log.Debugf("[RegisterUpdateCallback] Received for ServicegroupSvcGroupLinkInfo")
	var (
		registrationId cache.ResourceEventHandlerRegistration
		err            error
	)
	key := "svcgrouplinkinfos.servicegroup.tsm.tanzu.vmware.com"
	stopper := make(chan struct{})
	if s, ok := subscriptionMap.Load(key); ok {
		log.Debugf("[RegisterUpdateCallback] ServicegroupSvcGroupLinkInfo Use Subscription Informer")
		sub := s.(subscription)
		registrationId, err = sub.informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
			UpdateFunc: func(oldObj, newObj interface{}) {
				oldData := &ServicegroupSvcGroupLinkInfo{
					client:           c.client,
					SvcGroupLinkInfo: oldObj.(*baseservicegrouptsmtanzuvmwarecomv1.SvcGroupLinkInfo),
				}
				newData := &ServicegroupSvcGroupLinkInfo{
					client:           c.client,
					SvcGroupLinkInfo: newObj.(*baseservicegrouptsmtanzuvmwarecomv1.SvcGroupLinkInfo),
				}
				cbfn(oldData, newData)
			},
		})
	} else {
		log.Debugf("[RegisterUpdateCallback] ServicegroupSvcGroupLinkInfo Create New Informer")
		informer := informerservicegrouptsmtanzuvmwarecomv1.NewSvcGroupLinkInfoInformer(c.client.baseClient, 0, cache.Indexers{})
		registrationId, err = informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
			UpdateFunc: func(oldObj, newObj interface{}) {
				oldData := &ServicegroupSvcGroupLinkInfo{
					client:           c.client,
					SvcGroupLinkInfo: oldObj.(*baseservicegrouptsmtanzuvmwarecomv1.SvcGroupLinkInfo),
				}
				newData := &ServicegroupSvcGroupLinkInfo{
					client:           c.client,
					SvcGroupLinkInfo: newObj.(*baseservicegrouptsmtanzuvmwarecomv1.SvcGroupLinkInfo),
				}
				cbfn(oldData, newData)
			},
		})
		go informer.Run(stopper)
	}
	return registrationId, err
}

func (c *svcgrouplinkinfoServicegroupTsmV1Chainer) RegisterDeleteCallback(cbfn func(obj *ServicegroupSvcGroupLinkInfo)) (cache.ResourceEventHandlerRegistration, error) {
	log.Debugf("[RegisterDeleteCallback] Received for ServicegroupSvcGroupLinkInfo")
	var (
		registrationId cache.ResourceEventHandlerRegistration
		err            error
	)
	key := "svcgrouplinkinfos.servicegroup.tsm.tanzu.vmware.com"
	stopper := make(chan struct{})
	if s, ok := subscriptionMap.Load(key); ok {
		log.Debugf("[RegisterDeleteCallback] ServicegroupSvcGroupLinkInfo Use Subscription Informer")
		sub := s.(subscription)
		registrationId, err = sub.informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
			DeleteFunc: func(obj interface{}) {
				nc := &ServicegroupSvcGroupLinkInfo{
					client:           c.client,
					SvcGroupLinkInfo: obj.(*baseservicegrouptsmtanzuvmwarecomv1.SvcGroupLinkInfo),
				}

				var parent *ConfigConfig
				gvkExist := true
				for i := 0; i < 600; i++ {
					// Check if parent exists
					p, err := nc.GetParent(context.TODO())
					if err != nil || p == nil {
						time.Sleep(500 * time.Millisecond)
						continue
					}
					parent = p

					// Check GVK

					if parent.Spec.SvcGrpInfoGvk != nil {
						time.Sleep(500 * time.Millisecond)
						continue
					}

					gvkExist = false
					break
				}

				if parent == nil {
					hashedName := helper.GetHashedName("configs.config.tsm.tanzu.vmware.com", nc.Labels, nc.Labels["configs.config.tsm.tanzu.vmware.com"])
					parent, err = c.client.Config().ForceReadConfigByName(context.TODO(), hashedName)
					if err != nil {
						if errors.IsNotFound(err) {
							return
						}

						panic("error occurred while fetching parent " + err.Error())
					}
					panic(fmt.Sprintf("parent found (event loop is stalled) " + nc.DisplayName()))
				}

				if gvkExist {
					// Check GVK

					if parent.Spec.SvcGrpInfoGvk != nil {
						return
					}

					panic(fmt.Sprintf("gvk not found (event loop is stalled) " + nc.DisplayName()))
				}

				cbfn(nc)
			},
		})
	} else {
		log.Debugf("[RegisterDeleteCallback] ServicegroupSvcGroupLinkInfo Create New Informer")
		informer := informerservicegrouptsmtanzuvmwarecomv1.NewSvcGroupLinkInfoInformer(c.client.baseClient, 0, cache.Indexers{})
		registrationId, err = informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
			DeleteFunc: func(obj interface{}) {
				nc := &ServicegroupSvcGroupLinkInfo{
					client:           c.client,
					SvcGroupLinkInfo: obj.(*baseservicegrouptsmtanzuvmwarecomv1.SvcGroupLinkInfo),
				}

				var parent *ConfigConfig
				gvkExist := true
				for i := 0; i < 600; i++ {
					// Check if parent exists
					p, err := nc.GetParent(context.TODO())
					if err != nil || p == nil {
						time.Sleep(500 * time.Millisecond)
						continue
					}
					parent = p

					// Check GVK

					if parent.Spec.SvcGrpInfoGvk != nil {
						time.Sleep(500 * time.Millisecond)
						continue
					}

					gvkExist = false

					break
				}

				if parent == nil {
					hashedName := helper.GetHashedName("configs.config.tsm.tanzu.vmware.com", nc.Labels, nc.Labels["configs.config.tsm.tanzu.vmware.com"])
					parent, err = c.client.Config().ForceReadConfigByName(context.TODO(), hashedName)
					if err != nil {
						if errors.IsNotFound(err) {
							return
						}

						panic("error occurred while fetching parent " + err.Error())
					}
					panic(fmt.Sprintf("parent found (event loop is stalled) " + nc.DisplayName()))
				}

				if gvkExist {
					// Check GVK

					if parent.Spec.SvcGrpInfoGvk != nil {
						return
					}

					panic(fmt.Sprintf("gvk not found (event loop is stalled) " + nc.DisplayName()))
				}

				cbfn(nc)
			},
		})
		go informer.Run(stopper)
	}
	return registrationId, err
}

// GetAccessControlPolicyByName returns object stored in the database under the hashedName which is a hash of display
// name and parents names. Use it when you know hashed name of object.
func (group *PolicypkgTsmV1) GetAccessControlPolicyByName(ctx context.Context, hashedName string) (*PolicypkgAccessControlPolicy, error) {
	key := "accesscontrolpolicies.policypkg.tsm.tanzu.vmware.com"
	if s, ok := subscriptionMap.Load(key); ok {
		log.Debugf("[GetAccessControlPolicyByName] GetObject: %s from cache", hashedName)
		item, exists, err := s.(subscription).informer.GetStore().GetByKey(hashedName)
		if !exists {
			return nil, err
		}

		log.Debugf("[GetAccessControlPolicyByName] Object: %s exists in cache", hashedName)
		result, _ := item.(*basepolicypkgtsmtanzuvmwarecomv1.AccessControlPolicy)
		return &PolicypkgAccessControlPolicy{
			client:              group.client,
			AccessControlPolicy: result,
		}, nil
	} else {
		retryCount := 0
		for {
			result, err := group.client.baseClient.
				PolicypkgTsmV1().
				AccessControlPolicies().Get(ctx, hashedName, metav1.GetOptions{})
			if err != nil {
				log.Errorf("[GetAccessControlPolicyByName] Failed to Get AccessControlPolicies: %+v", err)
				if errors.IsTimeout(err) || customerrors.Is(err, context.DeadlineExceeded) {
					log.Errorf("[Retry Count: %d ] %+v", retryCount, err)
					if retryCount == maxRetryCount {
						log.Error("Max Retry exceed on Get AccessControlPolicies")
						return nil, err
					}
					retryCount += 1
					time.Sleep(sleepTime * time.Second)
				} else if customerrors.Is(err, context.Canceled) {
					log.Errorf("[GetAccessControlPolicyByName]: %+v", err)
					return nil, context.Canceled
				} else {
					log.Errorf("[GetAccessControlPolicyByName]: %+v", err)
					return nil, err
				}
			} else {
				return &PolicypkgAccessControlPolicy{
					client:              group.client,
					AccessControlPolicy: result,
				}, nil
			}
		}
	}
}

// ForceReadAccessControlPolicyByName read object directly from the database under the hashedName which is a hash of display
// name and parents names. Use it when you know hashed name of object.
func (group *PolicypkgTsmV1) ForceReadAccessControlPolicyByName(ctx context.Context, hashedName string) (*PolicypkgAccessControlPolicy, error) {
	log.Debugf("[ForceReadAccessControlPolicyByName] Received object :%s to read from DB", hashedName)
	retryCount := 0
	for {
		result, err := group.client.baseClient.
			PolicypkgTsmV1().
			AccessControlPolicies().Get(ctx, hashedName, metav1.GetOptions{})
		if err != nil {
			log.Errorf("[ForceReadAccessControlPolicyByName] Failed to Get AccessControlPolicies: %+v", err)
			if errors.IsTimeout(err) || customerrors.Is(err, context.DeadlineExceeded) {
				log.Errorf("[Retry Count: %d ] %+v", retryCount, err)
				if retryCount == maxRetryCount {
					log.Error("Max Retry exceed on Get AccessControlPolicies")
					return nil, err
				}
				retryCount += 1
				time.Sleep(sleepTime * time.Second)
			} else if customerrors.Is(err, context.Canceled) {
				log.Errorf("[ForceReadAccessControlPolicyByName]: %+v", err)
				return nil, context.Canceled
			} else {
				log.Errorf("[ForceReadAccessControlPolicyByName]: %+v", err)
				return nil, err
			}
		} else {
			log.Debugf("[ForceReadAccessControlPolicyByName] Executed Successfully :%s", hashedName)
			return &PolicypkgAccessControlPolicy{
				client:              group.client,
				AccessControlPolicy: result,
			}, nil
		}
	}
}

// DeleteAccessControlPolicyByName deletes object stored in the database under the hashedName which is a hash of
// display name and parents names. Use it when you know hashed name of object.
func (group *PolicypkgTsmV1) DeleteAccessControlPolicyByName(ctx context.Context, hashedName string) (err error) {
	log.Debugf("[DeleteAccessControlPolicyByName] Received objectToDelete: %s", hashedName)

	var (
		retryCount int
		result     *basepolicypkgtsmtanzuvmwarecomv1.AccessControlPolicy
	)
	retryCount = 0
	for {
		result, err = group.client.baseClient.
			PolicypkgTsmV1().
			AccessControlPolicies().Get(ctx, hashedName, metav1.GetOptions{})
		if err != nil {
			log.Errorf("[DeleteAccessControlPolicyByName] Failed to Get AccessControlPolicies: %+v", err)
			if errors.IsTimeout(err) || customerrors.Is(err, context.DeadlineExceeded) {
				log.Errorf("[Retry Count: %d ] %+v", retryCount, err)
				if retryCount == maxRetryCount {
					log.Error("Max Retry exceed on Get AccessControlPolicies")
					return err
				}
				retryCount += 1
				time.Sleep(sleepTime * time.Second)
			} else if customerrors.Is(err, context.Canceled) {
				log.Errorf("[DeleteAccessControlPolicyByName]: %+v", err)
				return context.Canceled
			} else if errors.IsNotFound(err) {
				log.Errorf("[DeleteAccessControlPolicyByName] Object Notfound: %+v", err)
				break
			} else {
				log.Errorf("[DeleteAccessControlPolicyByName]: %+v", err)
				return err
			}
		} else {
			break
		}
	}

	for _, v := range result.Spec.PolicyConfigsGvk {
		err := group.client.
			Policypkg().DeleteACPConfigByName(ctx, v.Name)
		if err != nil {
			if errors.IsNotFound(err) {
				continue
			} else {
				return err
			}
		}
	}

	retryCount = 0
	for {
		err = group.client.baseClient.
			PolicypkgTsmV1().
			AccessControlPolicies().Delete(ctx, hashedName, metav1.DeleteOptions{})
		if err != nil {
			log.Errorf("[DeleteAccessControlPolicyByName] failed to delete AccessControlPolicies: %+v", err)
			if errors.IsTimeout(err) || customerrors.Is(err, context.DeadlineExceeded) {
				log.Errorf("[Retry Count: %d ] %+v", retryCount, err)
				if retryCount == maxRetryCount {
					log.Error("Max retry exceed on delete AccessControlPolicies")
					return err
				}
				retryCount += 1
				time.Sleep(sleepTime * time.Second)
			} else if customerrors.Is(err, context.Canceled) {
				log.Errorf("[DeleteAccessControlPolicyByName]: %+v", err)
				return context.Canceled
			} else if errors.IsNotFound(err) {
				log.Errorf("[DeleteAccessControlPolicyByName] Object not found: %+v", err)
				break
			} else {
				log.Errorf("[DeleteAccessControlPolicyByName]: %+v", err)
				return err
			}
		}
	}
	// Get Parent Node and check if gvk present before patch

	var gvkPresent bool
	log.Debugf("[DeleteAccessControlPolicyByName] Get Parent details")
	var patch Patch
	parents := result.GetLabels()
	if parents == nil {
		parents = make(map[string]string)
	}
	parentName, ok := parents["gnses.gns.tsm.tanzu.vmware.com"]
	if !ok {
		parentName = helper.DEFAULT_KEY
	}
	if result.GetLabels() != nil {
		if parents[common.IS_NAME_HASHED_LABEL] == "true" {
			parentName = helper.GetHashedName("gnses.gns.tsm.tanzu.vmware.com", parents, parentName)
		}
	} else {
		parentName = helper.GetHashedName("gnses.gns.tsm.tanzu.vmware.com", parents, parentName)
	}
	parentData, err := group.client.baseClient.
		GnsTsmV1().
		Gnses().Get(ctx, parentName, metav1.GetOptions{})
	if err != nil {
		log.Errorf("[DeleteAccessControlPolicyByName] Failed to get Parent node: %+v", err)
		if errors.IsNotFound(err) {
			return nil
		} else {
			return err
		}
	}

	if parentData.Spec.GnsAccessControlPolicyGvk != nil {
		log.Debugf("[DeleteAccessControlPolicyByName] GVK present in parent for node: %s", hashedName)
		gvkPresent = true
	}

	if gvkPresent {

		patchOp := PatchOp{
			Op:   "remove",
			Path: "/spec/gnsAccessControlPolicyGvk",
		}

		patch = append(patch, patchOp)
		marshaled, err := patch.Marshal()
		if err != nil {
			return err
		}

		retryCount = 0
		newCtx := context.TODO()
		for {
			_, err = group.client.baseClient.
				GnsTsmV1().
				Gnses().Patch(newCtx, parentName, types.JSONPatchType, marshaled, metav1.PatchOptions{})
			if err != nil {
				log.Errorf("Failed to patch AccessControlPolicy gvk in parent node[Gnses]: %+v", err)
				if errors.IsTimeout(err) || customerrors.Is(err, context.DeadlineExceeded) {
					log.Errorf("[Retry Count: %d ] %+v", retryCount, err)
					if retryCount == maxRetryCount {
						log.Error("Max Retry exceed on patching gvk")
						return err
					}
					retryCount += 1
					time.Sleep(sleepTime * time.Second)
				} else if customerrors.Is(err, context.Canceled) {
					log.Errorf("[DeleteAccessControlPolicyByName]: %+v", err)
					return context.Canceled
				} else {
					log.Errorf("Unexpected Error occur AccessControlPolicy]: %+v", err)
					return err
				}
			} else {
				log.Debugf("[DeleteAccessControlPolicyByName] Patch AccessControlPolicy Success: %s", hashedName)
				break
			}
		}
		log.Debugf("[DeleteAccessControlPolicyByName] Executed Successfully: %s", hashedName)
	}

	return
}

// CreateAccessControlPolicyByName creates object in the database without hashing the name.
// Use it directly ONLY when objToCreate.Name is hashed name of the object.
func (group *PolicypkgTsmV1) CreateAccessControlPolicyByName(ctx context.Context,
	objToCreate *basepolicypkgtsmtanzuvmwarecomv1.AccessControlPolicy) (*PolicypkgAccessControlPolicy, error) {
	log.Debugf("[CreateAccessControlPolicyByName] Received objToCreate: %s", objToCreate.GetName())
	if objToCreate.GetLabels() == nil {
		objToCreate.Labels = make(map[string]string)
	}
	if _, ok := objToCreate.Labels[common.DISPLAY_NAME_LABEL]; !ok {
		objToCreate.Labels[common.DISPLAY_NAME_LABEL] = objToCreate.GetName()
	}

	objToCreate.Spec.PolicyConfigsGvk = nil

	var (
		retryCount int
		result     *basepolicypkgtsmtanzuvmwarecomv1.AccessControlPolicy
		err        error
	)
	retryCount = 0
	for {
		result, err = group.client.baseClient.
			PolicypkgTsmV1().
			AccessControlPolicies().Create(ctx, objToCreate, metav1.CreateOptions{})
		if err != nil {
			log.Errorf("[CreateAccessControlPolicyByName] Failed to Create AccessControlPolicies: %+v", err)
			if errors.IsTimeout(err) || customerrors.Is(err, context.DeadlineExceeded) {
				log.Errorf("[Retry Count: %d ] %+v", retryCount, err)
				if retryCount == maxRetryCount {
					log.Error("Max Retry exceed on Get AccessControlPolicies")
					return nil, err
				}
				retryCount += 1
				time.Sleep(sleepTime * time.Second)
			} else if customerrors.Is(err, context.Canceled) {
				log.Errorf("[CreateAccessControlPolicyByName]: %+v", err)
				return nil, context.Canceled
			} else {
				log.Errorf("[CreateAccessControlPolicyByName]: %+v", err)
				return nil, err
			}
		} else {
			break
		}
	}
	log.Debugf("[CreateAccessControlPolicyByName] AccessControlPolicies created successfully: %s", objToCreate.GetName())

	parentName, ok := objToCreate.GetLabels()["gnses.gns.tsm.tanzu.vmware.com"]
	if !ok {
		parentName = helper.DEFAULT_KEY
	}
	if objToCreate.Labels[common.IS_NAME_HASHED_LABEL] == "true" {
		parentName = helper.GetHashedName("gnses.gns.tsm.tanzu.vmware.com", objToCreate.GetLabels(), parentName)
	}

	var patch Patch
	patchOp := PatchOp{
		Op:   "replace",
		Path: "/spec/gnsAccessControlPolicyGvk",
		Value: basepolicypkgtsmtanzuvmwarecomv1.Child{
			Group: "policypkg.tsm.tanzu.vmware.com",
			Kind:  "AccessControlPolicy",
			Name:  objToCreate.Name,
		},
	}
	patch = append(patch, patchOp)
	marshaled, err := patch.Marshal()
	if err != nil {
		return nil, err
	}
	retryCount = 0
	newCtx := context.TODO()
	for {
		_, err = group.client.baseClient.
			GnsTsmV1().
			Gnses().Patch(newCtx, parentName, types.JSONPatchType, marshaled, metav1.PatchOptions{})
		if err != nil {
			log.Errorf("[CreateAccessControlPolicyByName] Failed to patch AccessControlPolicy gvk in parent node[Gnses]: %+v", err)
			if errors.IsTimeout(err) || customerrors.Is(err, context.DeadlineExceeded) {
				log.Errorf("[Retry Count: %d ] %+v", retryCount, err)
				if retryCount == maxRetryCount {
					log.Error("Max Retry exceed on patching gvk")
					log.Errorf("Trigger AccessControlPolicy Delete: %s", objToCreate.GetName())
					delErr := group.DeleteAccessControlPolicyByName(newCtx, objToCreate.GetName())
					if delErr != nil {
						log.Errorf("Error occur while deleting AccessControlPolicy: %s", objToCreate.GetName())
						return nil, delErr
					}
					log.Errorf("AccessControlPolicy Deleted: %s", objToCreate.GetName())
					return nil, err
				}
				retryCount += 1
				time.Sleep(sleepTime * time.Second)
			} else if customerrors.Is(err, context.Canceled) {
				log.Errorf("[CreateAccessControlPolicyByName]: %+v", err)
				return nil, context.Canceled
			} else {
				log.Errorf("[CreateAccessControlPolicyByName] Unexpected Error AccessControlPolicy] :%+v", err)
				log.Errorf("Trigger AccessControlPolicy Delete: %s", objToCreate.GetName())
				delErr := group.DeleteAccessControlPolicyByName(newCtx, objToCreate.GetName())
				if delErr != nil {
					log.Errorf("Error occur while deleting AccessControlPolicy: %+v", objToCreate.GetName())
					return nil, delErr
				}
				log.Errorf("AccessControlPolicy Deleted: %s", objToCreate.GetName())
				return nil, err
			}
		} else {
			log.Debugf("[CreateAccessControlPolicyByName] Patch AccessControlPolicy Success :%s", objToCreate.GetName())
			break
		}
	}

	log.Debugf("[CreateAccessControlPolicyByName] Executed Successfully: %s", objToCreate.GetName())
	return &PolicypkgAccessControlPolicy{
		client:              group.client,
		AccessControlPolicy: result,
	}, nil
}

// UpdateAccessControlPolicyByName updates object stored in the database under the hashedName which is a hash of
// display name and parents names.
func (group *PolicypkgTsmV1) UpdateAccessControlPolicyByName(ctx context.Context,
	objToUpdate *basepolicypkgtsmtanzuvmwarecomv1.AccessControlPolicy) (*PolicypkgAccessControlPolicy, error) {
	log.Debugf("[UpdateAccessControlPolicyByName] Received objToUpdate: %s", objToUpdate.GetName())

	var patch Patch

	if objToUpdate.Annotations != nil || objToUpdate.Labels != nil {
		current, err := group.client.Policypkg().GetAccessControlPolicyByName(ctx, objToUpdate.Name)
		if err != nil {
			return nil, err
		}

		if objToUpdate.Annotations != nil {
			if current.Annotations[ownershipAnnotation] != "" {
				objToUpdate.Annotations[ownershipAnnotation] = current.Annotations[ownershipAnnotation]
			}
			patch = append(patch, PatchOp{
				Op:    "replace",
				Path:  "/metadata/annotations",
				Value: objToUpdate.Annotations,
			})
		}

		if objToUpdate.Labels != nil {
			parentsList := helper.GetCRDParentsMap()["accesscontrolpolicies.policypkg.tsm.tanzu.vmware.com"]
			for _, k := range parentsList {
				objToUpdate.Labels[k] = current.Labels[k]
			}
			objToUpdate.Labels[common.IS_NAME_HASHED_LABEL] = current.Labels[common.IS_NAME_HASHED_LABEL]
			objToUpdate.Labels[common.DISPLAY_NAME_LABEL] = current.Labels[common.DISPLAY_NAME_LABEL]
			patch = append(patch, PatchOp{
				Op:    "replace",
				Path:  "/metadata/labels",
				Value: objToUpdate.Labels,
			})
		}
	}

	marshaled, err := patch.Marshal()
	if err != nil {
		return nil, err
	}

	var (
		result *basepolicypkgtsmtanzuvmwarecomv1.AccessControlPolicy
	)
	newCtx := context.TODO()
	retryCount := 0
	for {
		result, err = group.client.baseClient.
			PolicypkgTsmV1().
			AccessControlPolicies().Patch(newCtx, objToUpdate.GetName(), types.JSONPatchType, marshaled, metav1.PatchOptions{}, "")
		if err != nil {
			log.Errorf("[UpdateAccessControlPolicyByName] Failed to patch AccessControlPolicy gvk in parent node[Gnses]: %+v", err)
			if errors.IsTimeout(err) || customerrors.Is(err, context.DeadlineExceeded) {
				log.Errorf("[Retry Count: %d ] %+v", retryCount, err)
				if retryCount == maxRetryCount {
					log.Error("Max Retry exceed on patching gvk")
					log.Errorf("Trigger AccessControlPolicy Delete: %s", objToUpdate.GetName())
					delErr := group.DeleteAccessControlPolicyByName(newCtx, objToUpdate.GetName())
					if delErr != nil {
						log.Errorf("Error occur while deleting AccessControlPolicy: %s", objToUpdate.GetName())
						return nil, delErr
					}
					log.Errorf("AccessControlPolicy Deleted: %s", objToUpdate.GetName())
					return nil, err
				}
				retryCount += 1
				time.Sleep(sleepTime * time.Second)
			} else if customerrors.Is(err, context.Canceled) {
				log.Errorf("[CreateAccessControlPolicyByName]: %+v", err)
				return nil, context.Canceled
			} else {
				log.Errorf("[CreateAccessControlPolicyByName] Unexpected Error AccessControlPolicy] :%+v", err)
				log.Errorf("Trigger AccessControlPolicy Delete: %s", objToUpdate.GetName())
				delErr := group.DeleteAccessControlPolicyByName(newCtx, objToUpdate.GetName())
				if delErr != nil {
					log.Errorf("Error occur while deleting AccessControlPolicy: %+v", objToUpdate.GetName())
					return nil, delErr
				}
				log.Errorf("AccessControlPolicy Deleted: %s", objToUpdate.GetName())
				return nil, err
			}
		} else {
			log.Debugf("[CreateAccessControlPolicyByName] Patch AccessControlPolicy Success :%s", objToUpdate.GetName())
			break
		}
	}
	log.Debugf("[UpdateAccessControlPolicyByName] Executed Successfully %s", objToUpdate.GetName())
	return &PolicypkgAccessControlPolicy{
		client:              group.client,
		AccessControlPolicy: result,
	}, nil
}

// ListAccessControlPolicies returns slice of all existing objects of this type. Selectors can be provided in opts parameter.
func (group *PolicypkgTsmV1) ListAccessControlPolicies(ctx context.Context,
	opts metav1.ListOptions) (result []*PolicypkgAccessControlPolicy, err error) {
	key := "accesscontrolpolicies.policypkg.tsm.tanzu.vmware.com"
	if s, ok := subscriptionMap.Load(key); ok {
		items := s.(subscription).informer.GetStore().List()
		result = make([]*PolicypkgAccessControlPolicy, len(items))
		for k, v := range items {
			item, _ := v.(*basepolicypkgtsmtanzuvmwarecomv1.AccessControlPolicy)
			result[k] = &PolicypkgAccessControlPolicy{
				client:              group.client,
				AccessControlPolicy: item,
			}
		}
	} else {
		list, err := group.client.baseClient.PolicypkgTsmV1().
			AccessControlPolicies().List(ctx, opts)
		if err != nil {
			return nil, err
		}
		result = make([]*PolicypkgAccessControlPolicy, len(list.Items))
		for k, v := range list.Items {
			item := v
			result[k] = &PolicypkgAccessControlPolicy{
				client:              group.client,
				AccessControlPolicy: &item,
			}
		}
	}
	return
}

type PolicypkgAccessControlPolicy struct {
	client *Clientset
	*basepolicypkgtsmtanzuvmwarecomv1.AccessControlPolicy
}

// Delete removes obj and all it's children from the database.
func (obj *PolicypkgAccessControlPolicy) Delete(ctx context.Context) error {
	err := obj.client.Policypkg().DeleteAccessControlPolicyByName(ctx, obj.GetName())
	if err != nil {
		return err
	}
	obj.AccessControlPolicy = nil
	return nil
}

// Update updates spec of object in database. Children and Link can not be updated using this function.
func (obj *PolicypkgAccessControlPolicy) Update(ctx context.Context) error {
	result, err := obj.client.Policypkg().UpdateAccessControlPolicyByName(ctx, obj.AccessControlPolicy)
	if err != nil {
		return err
	}
	obj.AccessControlPolicy = result.AccessControlPolicy
	return nil
}

func (obj *PolicypkgAccessControlPolicy) GetParent(ctx context.Context) (result *GnsGns, err error) {
	hashedName := helper.GetHashedName("gnses.gns.tsm.tanzu.vmware.com", obj.Labels, obj.Labels["gnses.gns.tsm.tanzu.vmware.com"])
	return obj.client.Gns().GetGnsByName(ctx, hashedName)
}

// GetAllPolicyConfigs returns all children of given type
func (obj *PolicypkgAccessControlPolicy) GetAllPolicyConfigs(ctx context.Context) (
	result []*PolicypkgACPConfig, err error) {
	result = make([]*PolicypkgACPConfig, 0, len(obj.Spec.PolicyConfigsGvk))
	for _, v := range obj.Spec.PolicyConfigsGvk {
		l, err := obj.client.Policypkg().GetACPConfigByName(ctx, v.Name)
		if err != nil {
			return nil, err
		}
		result = append(result, l)
	}
	return
}

// GetPolicyConfigs returns child which has given displayName
func (obj *PolicypkgAccessControlPolicy) GetPolicyConfigs(ctx context.Context,
	displayName string) (result *PolicypkgACPConfig, err error) {
	l, ok := obj.Spec.PolicyConfigsGvk[displayName]
	if !ok {
		return nil, NewChildNotFound(obj.DisplayName(), "Policypkg.AccessControlPolicy", "PolicyConfigs", displayName)
	}
	result, err = obj.client.Policypkg().GetACPConfigByName(ctx, l.Name)
	return
}

// AddPolicyConfigs calculates hashed name of the child to create based on objToCreate.Name
// and parents names and creates it. objToCreate.Name is changed to the hashed name. Original name is preserved in
// nexus/display_name label and can be obtained using DisplayName() method.
func (obj *PolicypkgAccessControlPolicy) AddPolicyConfigs(ctx context.Context,
	objToCreate *basepolicypkgtsmtanzuvmwarecomv1.ACPConfig) (result *PolicypkgACPConfig, err error) {
	log.Debugf("[AddPolicyConfigs] Received objToCreate: %s", objToCreate.GetName())
	if objToCreate.Labels == nil {
		objToCreate.Labels = map[string]string{}
	}
	for _, v := range helper.GetCRDParentsMap()["accesscontrolpolicies.policypkg.tsm.tanzu.vmware.com"] {
		objToCreate.Labels[v] = obj.Labels[v]
	}
	objToCreate.Labels["accesscontrolpolicies.policypkg.tsm.tanzu.vmware.com"] = obj.DisplayName()
	if objToCreate.Labels[common.IS_NAME_HASHED_LABEL] != "true" {
		objToCreate.Labels[common.DISPLAY_NAME_LABEL] = objToCreate.GetName()
		objToCreate.Labels[common.IS_NAME_HASHED_LABEL] = "true"
		hashedName := helper.GetHashedName(objToCreate.CRDName(), objToCreate.Labels, objToCreate.GetName())
		objToCreate.Name = hashedName
	}
	result, err = obj.client.Policypkg().CreateACPConfigByName(ctx, objToCreate)
	log.Debugf("[AddPolicyConfigs] ApiSpecification created successfully: %s", objToCreate.GetName())
	updatedObj, getErr := obj.client.Policypkg().GetAccessControlPolicyByName(ctx, obj.GetName())
	if getErr == nil {
		obj.AccessControlPolicy = updatedObj.AccessControlPolicy
	}
	log.Debugf("[AddPolicyConfigs] Executed Successfully: %s", objToCreate.GetName())
	return
}

// DeletePolicyConfigs calculates hashed name of the child to delete based on displayName
// and parents names and deletes it.

func (obj *PolicypkgAccessControlPolicy) DeletePolicyConfigs(ctx context.Context, displayName string) (err error) {
	log.Debugf("[ DeletePolicyConfigs] Received for ACPConfig object: %s to delete", displayName)
	l, ok := obj.Spec.PolicyConfigsGvk[displayName]
	if !ok {
		return NewChildNotFound(obj.DisplayName(), "Policypkg.AccessControlPolicy", "PolicyConfigs", displayName)
	}
	err = obj.client.Policypkg().DeleteACPConfigByName(ctx, l.Name)
	if err != nil {
		return err
	}
	log.Debugf("[ DeletePolicyConfigs] ACPConfig object: %s deleted successfully", displayName)
	updatedObj, err := obj.client.Policypkg().GetAccessControlPolicyByName(ctx, obj.GetName())
	if err == nil {
		obj.AccessControlPolicy = updatedObj.AccessControlPolicy
	}
	return
}

type accesscontrolpolicyPolicypkgTsmV1Chainer struct {
	client       *Clientset
	name         string
	parentLabels map[string]string
}

func (c *accesscontrolpolicyPolicypkgTsmV1Chainer) Subscribe() {
	key := "accesscontrolpolicies.policypkg.tsm.tanzu.vmware.com"
	if _, ok := subscriptionMap.Load(key); !ok {
		informer := informerpolicypkgtsmtanzuvmwarecomv1.NewAccessControlPolicyInformer(c.client.baseClient, 0, cache.Indexers{})
		subscribe(key, informer)
	}
}

func (c *accesscontrolpolicyPolicypkgTsmV1Chainer) Unsubscribe() {
	key := "accesscontrolpolicies.policypkg.tsm.tanzu.vmware.com"
	if s, ok := subscriptionMap.Load(key); ok {
		close(s.(subscription).stop)
		subscriptionMap.Delete(key)
	}
}

func (c *accesscontrolpolicyPolicypkgTsmV1Chainer) IsSubscribed() bool {
	key := "accesscontrolpolicies.policypkg.tsm.tanzu.vmware.com"
	_, ok := subscriptionMap.Load(key)
	return ok
}

func (c *accesscontrolpolicyPolicypkgTsmV1Chainer) RegisterEventHandler(addCB func(obj *PolicypkgAccessControlPolicy), updateCB func(oldObj, newObj *PolicypkgAccessControlPolicy), deleteCB func(obj *PolicypkgAccessControlPolicy)) (cache.ResourceEventHandlerRegistration, error) {
	fmt.Println("RegisterEventHandler for PolicypkgAccessControlPolicy")
	var (
		registrationId cache.ResourceEventHandlerRegistration
		err            error
		informer       cache.SharedIndexInformer
	)
	key := "accesscontrolpolicies.policypkg.tsm.tanzu.vmware.com"
	stopper := make(chan struct{})
	if s, ok := subscriptionMap.Load(key); ok {
		fmt.Println("Informer exists for PolicypkgAccessControlPolicy")
		sub := s.(subscription)
		informer = sub.informer
	} else {
		fmt.Println("Informer doesn't exists for PolicypkgAccessControlPolicy, so creating a new one")
		informer = informerpolicypkgtsmtanzuvmwarecomv1.NewAccessControlPolicyInformer(c.client.baseClient, 0, cache.Indexers{})
		go informer.Run(stopper)
		subscribe(key, informer)
	}
	registrationId, err = informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
		AddFunc: func(obj interface{}) {
			nc := &PolicypkgAccessControlPolicy{
				client:              c.client,
				AccessControlPolicy: obj.(*basepolicypkgtsmtanzuvmwarecomv1.AccessControlPolicy),
			}

			var parent *GnsGns
			gvkExist := false
			for i := 0; i < 600; i++ {
				// Check if parent exists
				p, err := nc.GetParent(context.TODO())
				if err != nil || p == nil {
					time.Sleep(500 * time.Millisecond)
					continue
				}
				parent = p
				// Check GVK

				if parent.Spec.GnsAccessControlPolicyGvk == nil {
					time.Sleep(500 * time.Millisecond)
					continue
				}

				gvkExist = true
				break
			}
			if parent == nil {
				hashedName := helper.GetHashedName("gnses.gns.tsm.tanzu.vmware.com", nc.Labels, nc.Labels["gnses.gns.tsm.tanzu.vmware.com"])
				parent, err = c.client.Gns().ForceReadGnsByName(context.TODO(), hashedName)
				if err != nil {
					if errors.IsNotFound(err) {
						return
					}
					panic("error occurred while fetching parent " + err.Error())
				}
				panic(fmt.Sprintf("parent found (event loop is stalled) " + nc.DisplayName()))
			}
			if !gvkExist {
				// Check GVK

				if parent.Spec.GnsAccessControlPolicyGvk == nil {
					return
				}

				panic(fmt.Sprintf("gvk found (event loop is stalled) " + nc.DisplayName()))
			}

			addCB(nc)
		},

		UpdateFunc: func(oldObj, newObj interface{}) {
			oldData := &PolicypkgAccessControlPolicy{
				client:              c.client,
				AccessControlPolicy: oldObj.(*basepolicypkgtsmtanzuvmwarecomv1.AccessControlPolicy),
			}
			newData := &PolicypkgAccessControlPolicy{
				client:              c.client,
				AccessControlPolicy: newObj.(*basepolicypkgtsmtanzuvmwarecomv1.AccessControlPolicy),
			}
			updateCB(oldData, newData)
		},

		DeleteFunc: func(obj interface{}) {
			nc := &PolicypkgAccessControlPolicy{
				client:              c.client,
				AccessControlPolicy: obj.(*basepolicypkgtsmtanzuvmwarecomv1.AccessControlPolicy),
			}

			var parent *GnsGns
			gvkExist := true
			for i := 0; i < 600; i++ {
				// Check if parent exists
				p, err := nc.GetParent(context.TODO())
				if err != nil || p == nil {
					time.Sleep(500 * time.Millisecond)
					continue
				}
				parent = p
				// Check GVK

				if parent.Spec.GnsAccessControlPolicyGvk != nil {
					time.Sleep(500 * time.Millisecond)
					continue
				}

				gvkExist = false
				break
			}
			if parent == nil {
				hashedName := helper.GetHashedName("gnses.gns.tsm.tanzu.vmware.com", nc.Labels, nc.Labels["gnses.gns.tsm.tanzu.vmware.com"])
				parent, err = c.client.Gns().ForceReadGnsByName(context.TODO(), hashedName)
				if err != nil {
					if errors.IsNotFound(err) {
						return
					}
					panic("error occurred while fetching parent " + err.Error())
				}
				panic(fmt.Sprintf("parent found (event loop is stalled) " + nc.DisplayName()))
			}
			if gvkExist {
				// Check GVK

				if parent.Spec.GnsAccessControlPolicyGvk != nil {
					return
				}

				panic(fmt.Sprintf("gvk not found (event loop is stalled) " + nc.DisplayName()))
			}

			deleteCB(nc)
		},
	})
	return registrationId, err
}

func (c *accesscontrolpolicyPolicypkgTsmV1Chainer) RegisterAddCallback(cbfn func(obj *PolicypkgAccessControlPolicy)) (cache.ResourceEventHandlerRegistration, error) {
	log.Debugf("[RegisterAddCallback] Received for PolicypkgAccessControlPolicy")
	var (
		registrationId cache.ResourceEventHandlerRegistration
		err            error
	)
	key := "accesscontrolpolicies.policypkg.tsm.tanzu.vmware.com"
	stopper := make(chan struct{})
	if s, ok := subscriptionMap.Load(key); ok {
		log.Debugf("[RegisterAddCallback] PolicypkgAccessControlPolicy Use Subscription Informer")
		sub := s.(subscription)
		registrationId, err = sub.informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
			AddFunc: func(obj interface{}) {
				nc := &PolicypkgAccessControlPolicy{
					client:              c.client,
					AccessControlPolicy: obj.(*basepolicypkgtsmtanzuvmwarecomv1.AccessControlPolicy),
				}

				var parent *GnsGns
				gvkExist := false
				for i := 0; i < 600; i++ {
					// Check if parent exists
					p, err := nc.GetParent(context.TODO())
					if err != nil || p == nil {
						time.Sleep(500 * time.Millisecond)
						continue
					}
					parent = p

					// Check GVK

					if parent.Spec.GnsAccessControlPolicyGvk == nil {
						time.Sleep(500 * time.Millisecond)
						continue
					}

					gvkExist = true

					break
				}

				if parent == nil {
					hashedName := helper.GetHashedName("gnses.gns.tsm.tanzu.vmware.com", nc.Labels, nc.Labels["gnses.gns.tsm.tanzu.vmware.com"])
					parent, err = c.client.Gns().ForceReadGnsByName(context.TODO(), hashedName)
					if err != nil {
						if errors.IsNotFound(err) {
							return
						}

						panic("error occurred while fetching parent " + err.Error())
					}
					panic(fmt.Sprintf("parent found (event loop is stalled) " + nc.DisplayName()))
				}

				if !gvkExist {
					// Check GVK

					if parent.Spec.GnsAccessControlPolicyGvk == nil {
						return
					}

					panic(fmt.Sprintf("gvk found (event loop is stalled) " + nc.DisplayName()))
				}

				cbfn(nc)
			},
		})
	} else {
		log.Debugf("[RegisterAddCallback] PolicypkgAccessControlPolicy Create New Informer")
		informer := informerpolicypkgtsmtanzuvmwarecomv1.NewAccessControlPolicyInformer(c.client.baseClient, 0, cache.Indexers{})
		registrationId, err = informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
			AddFunc: func(obj interface{}) {
				nc := &PolicypkgAccessControlPolicy{
					client:              c.client,
					AccessControlPolicy: obj.(*basepolicypkgtsmtanzuvmwarecomv1.AccessControlPolicy),
				}

				var parent *GnsGns
				gvkExist := false
				for i := 0; i < 600; i++ {
					// Check if parent exists
					p, err := nc.GetParent(context.TODO())
					if err != nil || p == nil {
						time.Sleep(500 * time.Millisecond)
						continue
					}
					parent = p

					// Check GVK

					if parent.Spec.GnsAccessControlPolicyGvk == nil {
						time.Sleep(500 * time.Millisecond)
						continue
					}

					gvkExist = true

					break
				}

				if parent == nil {
					hashedName := helper.GetHashedName("gnses.gns.tsm.tanzu.vmware.com", nc.Labels, nc.Labels["gnses.gns.tsm.tanzu.vmware.com"])
					parent, err = c.client.Gns().ForceReadGnsByName(context.TODO(), hashedName)
					if err != nil {
						if errors.IsNotFound(err) {
							return
						}

						panic("error occurred while fetching parent " + err.Error())
					}
					panic(fmt.Sprintf("parent found (event loop is stalled) " + nc.DisplayName()))
				}

				if !gvkExist {
					// Check GVK

					if parent.Spec.GnsAccessControlPolicyGvk == nil {
						return
					}

					panic(fmt.Sprintf("gvk found (event loop is stalled) " + nc.DisplayName()))
				}

				cbfn(nc)
			},
		})
		go informer.Run(stopper)
	}
	return registrationId, err
}

func (c *accesscontrolpolicyPolicypkgTsmV1Chainer) RegisterUpdateCallback(cbfn func(oldObj, newObj *PolicypkgAccessControlPolicy)) (cache.ResourceEventHandlerRegistration, error) {
	log.Debugf("[RegisterUpdateCallback] Received for PolicypkgAccessControlPolicy")
	var (
		registrationId cache.ResourceEventHandlerRegistration
		err            error
	)
	key := "accesscontrolpolicies.policypkg.tsm.tanzu.vmware.com"
	stopper := make(chan struct{})
	if s, ok := subscriptionMap.Load(key); ok {
		log.Debugf("[RegisterUpdateCallback] PolicypkgAccessControlPolicy Use Subscription Informer")
		sub := s.(subscription)
		registrationId, err = sub.informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
			UpdateFunc: func(oldObj, newObj interface{}) {
				oldData := &PolicypkgAccessControlPolicy{
					client:              c.client,
					AccessControlPolicy: oldObj.(*basepolicypkgtsmtanzuvmwarecomv1.AccessControlPolicy),
				}
				newData := &PolicypkgAccessControlPolicy{
					client:              c.client,
					AccessControlPolicy: newObj.(*basepolicypkgtsmtanzuvmwarecomv1.AccessControlPolicy),
				}
				cbfn(oldData, newData)
			},
		})
	} else {
		log.Debugf("[RegisterUpdateCallback] PolicypkgAccessControlPolicy Create New Informer")
		informer := informerpolicypkgtsmtanzuvmwarecomv1.NewAccessControlPolicyInformer(c.client.baseClient, 0, cache.Indexers{})
		registrationId, err = informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
			UpdateFunc: func(oldObj, newObj interface{}) {
				oldData := &PolicypkgAccessControlPolicy{
					client:              c.client,
					AccessControlPolicy: oldObj.(*basepolicypkgtsmtanzuvmwarecomv1.AccessControlPolicy),
				}
				newData := &PolicypkgAccessControlPolicy{
					client:              c.client,
					AccessControlPolicy: newObj.(*basepolicypkgtsmtanzuvmwarecomv1.AccessControlPolicy),
				}
				cbfn(oldData, newData)
			},
		})
		go informer.Run(stopper)
	}
	return registrationId, err
}

func (c *accesscontrolpolicyPolicypkgTsmV1Chainer) RegisterDeleteCallback(cbfn func(obj *PolicypkgAccessControlPolicy)) (cache.ResourceEventHandlerRegistration, error) {
	log.Debugf("[RegisterDeleteCallback] Received for PolicypkgAccessControlPolicy")
	var (
		registrationId cache.ResourceEventHandlerRegistration
		err            error
	)
	key := "accesscontrolpolicies.policypkg.tsm.tanzu.vmware.com"
	stopper := make(chan struct{})
	if s, ok := subscriptionMap.Load(key); ok {
		log.Debugf("[RegisterDeleteCallback] PolicypkgAccessControlPolicy Use Subscription Informer")
		sub := s.(subscription)
		registrationId, err = sub.informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
			DeleteFunc: func(obj interface{}) {
				nc := &PolicypkgAccessControlPolicy{
					client:              c.client,
					AccessControlPolicy: obj.(*basepolicypkgtsmtanzuvmwarecomv1.AccessControlPolicy),
				}

				var parent *GnsGns
				gvkExist := true
				for i := 0; i < 600; i++ {
					// Check if parent exists
					p, err := nc.GetParent(context.TODO())
					if err != nil || p == nil {
						time.Sleep(500 * time.Millisecond)
						continue
					}
					parent = p

					// Check GVK

					if parent.Spec.GnsAccessControlPolicyGvk != nil {
						time.Sleep(500 * time.Millisecond)
						continue
					}

					gvkExist = false
					break
				}

				if parent == nil {
					hashedName := helper.GetHashedName("gnses.gns.tsm.tanzu.vmware.com", nc.Labels, nc.Labels["gnses.gns.tsm.tanzu.vmware.com"])
					parent, err = c.client.Gns().ForceReadGnsByName(context.TODO(), hashedName)
					if err != nil {
						if errors.IsNotFound(err) {
							return
						}

						panic("error occurred while fetching parent " + err.Error())
					}
					panic(fmt.Sprintf("parent found (event loop is stalled) " + nc.DisplayName()))
				}

				if gvkExist {
					// Check GVK

					if parent.Spec.GnsAccessControlPolicyGvk != nil {
						return
					}

					panic(fmt.Sprintf("gvk not found (event loop is stalled) " + nc.DisplayName()))
				}

				cbfn(nc)
			},
		})
	} else {
		log.Debugf("[RegisterDeleteCallback] PolicypkgAccessControlPolicy Create New Informer")
		informer := informerpolicypkgtsmtanzuvmwarecomv1.NewAccessControlPolicyInformer(c.client.baseClient, 0, cache.Indexers{})
		registrationId, err = informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
			DeleteFunc: func(obj interface{}) {
				nc := &PolicypkgAccessControlPolicy{
					client:              c.client,
					AccessControlPolicy: obj.(*basepolicypkgtsmtanzuvmwarecomv1.AccessControlPolicy),
				}

				var parent *GnsGns
				gvkExist := true
				for i := 0; i < 600; i++ {
					// Check if parent exists
					p, err := nc.GetParent(context.TODO())
					if err != nil || p == nil {
						time.Sleep(500 * time.Millisecond)
						continue
					}
					parent = p

					// Check GVK

					if parent.Spec.GnsAccessControlPolicyGvk != nil {
						time.Sleep(500 * time.Millisecond)
						continue
					}

					gvkExist = false

					break
				}

				if parent == nil {
					hashedName := helper.GetHashedName("gnses.gns.tsm.tanzu.vmware.com", nc.Labels, nc.Labels["gnses.gns.tsm.tanzu.vmware.com"])
					parent, err = c.client.Gns().ForceReadGnsByName(context.TODO(), hashedName)
					if err != nil {
						if errors.IsNotFound(err) {
							return
						}

						panic("error occurred while fetching parent " + err.Error())
					}
					panic(fmt.Sprintf("parent found (event loop is stalled) " + nc.DisplayName()))
				}

				if gvkExist {
					// Check GVK

					if parent.Spec.GnsAccessControlPolicyGvk != nil {
						return
					}

					panic(fmt.Sprintf("gvk not found (event loop is stalled) " + nc.DisplayName()))
				}

				cbfn(nc)
			},
		})
		go informer.Run(stopper)
	}
	return registrationId, err
}

func (c *accesscontrolpolicyPolicypkgTsmV1Chainer) PolicyConfigs(name string) *acpconfigPolicypkgTsmV1Chainer {
	parentLabels := c.parentLabels
	parentLabels["acpconfigs.policypkg.tsm.tanzu.vmware.com"] = name
	return &acpconfigPolicypkgTsmV1Chainer{
		client:       c.client,
		name:         name,
		parentLabels: parentLabels,
	}
}

// GetPolicyConfigs calculates hashed name of the object based on displayName and it's parents and returns the object
func (c *accesscontrolpolicyPolicypkgTsmV1Chainer) GetPolicyConfigs(ctx context.Context, displayName string) (result *PolicypkgACPConfig, err error) {
	hashedName := helper.GetHashedName("acpconfigs.policypkg.tsm.tanzu.vmware.com", c.parentLabels, displayName)
	return c.client.Policypkg().GetACPConfigByName(ctx, hashedName)
}

// AddPolicyConfigs calculates hashed name of the child to create based on objToCreate.Name
// and parents names and creates it. objToCreate.Name is changed to the hashed name. Original name is preserved in
// nexus/display_name label and can be obtained using DisplayName() method.
func (c *accesscontrolpolicyPolicypkgTsmV1Chainer) AddPolicyConfigs(ctx context.Context,
	objToCreate *basepolicypkgtsmtanzuvmwarecomv1.ACPConfig) (result *PolicypkgACPConfig, err error) {
	if objToCreate.Labels == nil {
		objToCreate.Labels = map[string]string{}
	}
	for k, v := range c.parentLabels {
		objToCreate.Labels[k] = v
	}
	if objToCreate.Labels[common.IS_NAME_HASHED_LABEL] != "true" {
		objToCreate.Labels[common.DISPLAY_NAME_LABEL] = objToCreate.GetName()
		objToCreate.Labels[common.IS_NAME_HASHED_LABEL] = "true"
		hashedName := helper.GetHashedName("acpconfigs.policypkg.tsm.tanzu.vmware.com", c.parentLabels, objToCreate.GetName())
		objToCreate.Name = hashedName
	}
	return c.client.Policypkg().CreateACPConfigByName(ctx, objToCreate)
}

// DeletePolicyConfigs calculates hashed name of the child to delete based on displayName
// and parents names and deletes it.
func (c *accesscontrolpolicyPolicypkgTsmV1Chainer) DeletePolicyConfigs(ctx context.Context, name string) (err error) {
	if c.parentLabels == nil {
		c.parentLabels = map[string]string{}
	}
	c.parentLabels[common.IS_NAME_HASHED_LABEL] = "true"
	hashedName := helper.GetHashedName("acpconfigs.policypkg.tsm.tanzu.vmware.com", c.parentLabels, name)
	return c.client.Policypkg().DeleteACPConfigByName(ctx, hashedName)
}

// GetACPConfigByName returns object stored in the database under the hashedName which is a hash of display
// name and parents names. Use it when you know hashed name of object.
func (group *PolicypkgTsmV1) GetACPConfigByName(ctx context.Context, hashedName string) (*PolicypkgACPConfig, error) {
	key := "acpconfigs.policypkg.tsm.tanzu.vmware.com"
	if s, ok := subscriptionMap.Load(key); ok {
		log.Debugf("[GetACPConfigByName] GetObject: %s from cache", hashedName)
		item, exists, err := s.(subscription).informer.GetStore().GetByKey(hashedName)
		if !exists {
			return nil, err
		}

		log.Debugf("[GetACPConfigByName] Object: %s exists in cache", hashedName)
		result, _ := item.(*basepolicypkgtsmtanzuvmwarecomv1.ACPConfig)
		return &PolicypkgACPConfig{
			client:    group.client,
			ACPConfig: result,
		}, nil
	} else {
		retryCount := 0
		for {
			result, err := group.client.baseClient.
				PolicypkgTsmV1().
				ACPConfigs().Get(ctx, hashedName, metav1.GetOptions{})
			if err != nil {
				log.Errorf("[GetACPConfigByName] Failed to Get ACPConfigs: %+v", err)
				if errors.IsTimeout(err) || customerrors.Is(err, context.DeadlineExceeded) {
					log.Errorf("[Retry Count: %d ] %+v", retryCount, err)
					if retryCount == maxRetryCount {
						log.Error("Max Retry exceed on Get ACPConfigs")
						return nil, err
					}
					retryCount += 1
					time.Sleep(sleepTime * time.Second)
				} else if customerrors.Is(err, context.Canceled) {
					log.Errorf("[GetACPConfigByName]: %+v", err)
					return nil, context.Canceled
				} else {
					log.Errorf("[GetACPConfigByName]: %+v", err)
					return nil, err
				}
			} else {
				return &PolicypkgACPConfig{
					client:    group.client,
					ACPConfig: result,
				}, nil
			}
		}
	}
}

// ForceReadACPConfigByName read object directly from the database under the hashedName which is a hash of display
// name and parents names. Use it when you know hashed name of object.
func (group *PolicypkgTsmV1) ForceReadACPConfigByName(ctx context.Context, hashedName string) (*PolicypkgACPConfig, error) {
	log.Debugf("[ForceReadACPConfigByName] Received object :%s to read from DB", hashedName)
	retryCount := 0
	for {
		result, err := group.client.baseClient.
			PolicypkgTsmV1().
			ACPConfigs().Get(ctx, hashedName, metav1.GetOptions{})
		if err != nil {
			log.Errorf("[ForceReadACPConfigByName] Failed to Get ACPConfigs: %+v", err)
			if errors.IsTimeout(err) || customerrors.Is(err, context.DeadlineExceeded) {
				log.Errorf("[Retry Count: %d ] %+v", retryCount, err)
				if retryCount == maxRetryCount {
					log.Error("Max Retry exceed on Get ACPConfigs")
					return nil, err
				}
				retryCount += 1
				time.Sleep(sleepTime * time.Second)
			} else if customerrors.Is(err, context.Canceled) {
				log.Errorf("[ForceReadACPConfigByName]: %+v", err)
				return nil, context.Canceled
			} else {
				log.Errorf("[ForceReadACPConfigByName]: %+v", err)
				return nil, err
			}
		} else {
			log.Debugf("[ForceReadACPConfigByName] Executed Successfully :%s", hashedName)
			return &PolicypkgACPConfig{
				client:    group.client,
				ACPConfig: result,
			}, nil
		}
	}
}

// DeleteACPConfigByName deletes object stored in the database under the hashedName which is a hash of
// display name and parents names. Use it when you know hashed name of object.
func (group *PolicypkgTsmV1) DeleteACPConfigByName(ctx context.Context, hashedName string) (err error) {
	log.Debugf("[DeleteACPConfigByName] Received objectToDelete: %s", hashedName)

	var (
		retryCount int
		result     *basepolicypkgtsmtanzuvmwarecomv1.ACPConfig
	)
	retryCount = 0
	for {
		result, err = group.client.baseClient.
			PolicypkgTsmV1().
			ACPConfigs().Get(ctx, hashedName, metav1.GetOptions{})
		if err != nil {
			log.Errorf("[DeleteACPConfigByName] Failed to Get ACPConfigs: %+v", err)
			if errors.IsTimeout(err) || customerrors.Is(err, context.DeadlineExceeded) {
				log.Errorf("[Retry Count: %d ] %+v", retryCount, err)
				if retryCount == maxRetryCount {
					log.Error("Max Retry exceed on Get ACPConfigs")
					return err
				}
				retryCount += 1
				time.Sleep(sleepTime * time.Second)
			} else if customerrors.Is(err, context.Canceled) {
				log.Errorf("[DeleteACPConfigByName]: %+v", err)
				return context.Canceled
			} else if errors.IsNotFound(err) {
				log.Errorf("[DeleteACPConfigByName] Object Notfound: %+v", err)
				break
			} else {
				log.Errorf("[DeleteACPConfigByName]: %+v", err)
				return err
			}
		} else {
			break
		}
	}

	retryCount = 0
	for {
		err = group.client.baseClient.
			PolicypkgTsmV1().
			ACPConfigs().Delete(ctx, hashedName, metav1.DeleteOptions{})
		if err != nil {
			log.Errorf("[DeleteACPConfigByName] failed to delete ACPConfigs: %+v", err)
			if errors.IsTimeout(err) || customerrors.Is(err, context.DeadlineExceeded) {
				log.Errorf("[Retry Count: %d ] %+v", retryCount, err)
				if retryCount == maxRetryCount {
					log.Error("Max retry exceed on delete ACPConfigs")
					return err
				}
				retryCount += 1
				time.Sleep(sleepTime * time.Second)
			} else if customerrors.Is(err, context.Canceled) {
				log.Errorf("[DeleteACPConfigByName]: %+v", err)
				return context.Canceled
			} else if errors.IsNotFound(err) {
				log.Errorf("[DeleteACPConfigByName] Object not found: %+v", err)
				break
			} else {
				log.Errorf("[DeleteACPConfigByName]: %+v", err)
				return err
			}
		}
	}
	// Get Parent Node and check if gvk present before patch

	var gvkPresent bool
	log.Debugf("[DeleteACPConfigByName] Get Parent details")
	var patch Patch
	parents := result.GetLabels()
	if parents == nil {
		parents = make(map[string]string)
	}
	parentName, ok := parents["accesscontrolpolicies.policypkg.tsm.tanzu.vmware.com"]
	if !ok {
		parentName = helper.DEFAULT_KEY
	}
	if result.GetLabels() != nil {
		if parents[common.IS_NAME_HASHED_LABEL] == "true" {
			parentName = helper.GetHashedName("accesscontrolpolicies.policypkg.tsm.tanzu.vmware.com", parents, parentName)
		}
	} else {
		parentName = helper.GetHashedName("accesscontrolpolicies.policypkg.tsm.tanzu.vmware.com", parents, parentName)
	}
	parentData, err := group.client.baseClient.
		PolicypkgTsmV1().
		AccessControlPolicies().Get(ctx, parentName, metav1.GetOptions{})
	if err != nil {
		log.Errorf("[DeleteACPConfigByName] Failed to get Parent node: %+v", err)
		if errors.IsNotFound(err) {
			return nil
		} else {
			return err
		}
	}

	var displayName string
	// Iterate Parent Gvk
	for k, v := range parentData.Spec.PolicyConfigsGvk {
		if hashedName == v.Name {
			displayName = k
			log.Debugf("[DeleteACPConfigByName] GVK %s is present in parent for node: %s", k, hashedName)
			gvkPresent = true
		}
	}

	if gvkPresent {

		patchOp := PatchOp{
			Op:   "remove",
			Path: "/spec/policyConfigsGvk/" + displayName,
		}

		patch = append(patch, patchOp)
		marshaled, err := patch.Marshal()
		if err != nil {
			return err
		}

		retryCount = 0
		newCtx := context.TODO()
		for {
			_, err = group.client.baseClient.
				PolicypkgTsmV1().
				AccessControlPolicies().Patch(newCtx, parentName, types.JSONPatchType, marshaled, metav1.PatchOptions{})
			if err != nil {
				log.Errorf("Failed to patch ACPConfig gvk in parent node[AccessControlPolicies]: %+v", err)
				if errors.IsTimeout(err) || customerrors.Is(err, context.DeadlineExceeded) {
					log.Errorf("[Retry Count: %d ] %+v", retryCount, err)
					if retryCount == maxRetryCount {
						log.Error("Max Retry exceed on patching gvk")
						return err
					}
					retryCount += 1
					time.Sleep(sleepTime * time.Second)
				} else if customerrors.Is(err, context.Canceled) {
					log.Errorf("[DeleteACPConfigByName]: %+v", err)
					return context.Canceled
				} else {
					log.Errorf("Unexpected Error occur ACPConfig]: %+v", err)
					return err
				}
			} else {
				log.Debugf("[DeleteACPConfigByName] Patch ACPConfig Success: %s", hashedName)
				break
			}
		}
		log.Debugf("[DeleteACPConfigByName] Executed Successfully: %s", hashedName)
	}

	return
}

// CreateACPConfigByName creates object in the database without hashing the name.
// Use it directly ONLY when objToCreate.Name is hashed name of the object.
func (group *PolicypkgTsmV1) CreateACPConfigByName(ctx context.Context,
	objToCreate *basepolicypkgtsmtanzuvmwarecomv1.ACPConfig) (*PolicypkgACPConfig, error) {
	log.Debugf("[CreateACPConfigByName] Received objToCreate: %s", objToCreate.GetName())
	if objToCreate.GetLabels() == nil {
		objToCreate.Labels = make(map[string]string)
	}
	if _, ok := objToCreate.Labels[common.DISPLAY_NAME_LABEL]; !ok {
		objToCreate.Labels[common.DISPLAY_NAME_LABEL] = objToCreate.GetName()
	}

	objToCreate.Spec.DestSvcGroupsGvk = nil
	objToCreate.Spec.SourceSvcGroupsGvk = nil

	var (
		retryCount int
		result     *basepolicypkgtsmtanzuvmwarecomv1.ACPConfig
		err        error
	)
	retryCount = 0
	for {
		result, err = group.client.baseClient.
			PolicypkgTsmV1().
			ACPConfigs().Create(ctx, objToCreate, metav1.CreateOptions{})
		if err != nil {
			log.Errorf("[CreateACPConfigByName] Failed to Create ACPConfigs: %+v", err)
			if errors.IsTimeout(err) || customerrors.Is(err, context.DeadlineExceeded) {
				log.Errorf("[Retry Count: %d ] %+v", retryCount, err)
				if retryCount == maxRetryCount {
					log.Error("Max Retry exceed on Get ACPConfigs")
					return nil, err
				}
				retryCount += 1
				time.Sleep(sleepTime * time.Second)
			} else if customerrors.Is(err, context.Canceled) {
				log.Errorf("[CreateACPConfigByName]: %+v", err)
				return nil, context.Canceled
			} else {
				log.Errorf("[CreateACPConfigByName]: %+v", err)
				return nil, err
			}
		} else {
			break
		}
	}
	log.Debugf("[CreateACPConfigByName] ACPConfigs created successfully: %s", objToCreate.GetName())

	parentName, ok := objToCreate.GetLabels()["accesscontrolpolicies.policypkg.tsm.tanzu.vmware.com"]
	if !ok {
		parentName = helper.DEFAULT_KEY
	}
	if objToCreate.Labels[common.IS_NAME_HASHED_LABEL] == "true" {
		parentName = helper.GetHashedName("accesscontrolpolicies.policypkg.tsm.tanzu.vmware.com", objToCreate.GetLabels(), parentName)
	}

	payload := "{\"spec\": {\"policyConfigsGvk\": {\"" + objToCreate.DisplayName() + "\": {\"name\": \"" + objToCreate.Name + "\",\"kind\": \"ACPConfig\", \"group\": \"policypkg.tsm.tanzu.vmware.com\"}}}}"

	retryCount = 0
	newCtx := context.TODO()
	for {
		_, err = group.client.baseClient.
			PolicypkgTsmV1().
			AccessControlPolicies().Patch(newCtx, parentName, types.MergePatchType, []byte(payload), metav1.PatchOptions{})
		if err != nil {
			log.Errorf("[CreateACPConfigByName] Failed to patch ACPConfig gvk in parent node[AccessControlPolicies] %+v", err)
			if errors.IsTimeout(err) || customerrors.Is(err, context.DeadlineExceeded) {
				log.Errorf("[Retry Count: %d ] %+v", retryCount, err)
				if retryCount == maxRetryCount {
					log.Error("Max Retry exceed on patching gvk")
					log.Errorf("Trigger ACPConfig Delete: %s", objToCreate.GetName())
					err = group.DeleteACPConfigByName(newCtx, objToCreate.GetName())
					if err != nil {
						log.Errorf("Error occur while deleting ACPConfig: %s", objToCreate.GetName())
						return nil, err
					}
					log.Errorf("ACPConfig Deleted: %s", objToCreate.GetName())
					return nil, err
				}
				retryCount += 1
				time.Sleep(sleepTime * time.Second)
			} else if customerrors.Is(err, context.Canceled) {
				log.Errorf("[CreateACPConfigByName]: %+v", err)
				return nil, context.Canceled
			} else {
				log.Errorf("[CreateACPConfigByName] Unexpected Error ACPConfig] %+v", err)
				log.Errorf("Trigger ACPConfig Delete: %s", objToCreate.GetName())
				err = group.DeleteACPConfigByName(newCtx, objToCreate.GetName())
				if err != nil {
					log.Errorf("Error occur while deleting ACPConfig: %+v", objToCreate.GetName())
					return nil, err
				}
				log.Errorf("ACPConfig Deleted: %s", objToCreate.GetName())
				return nil, err
			}
		} else {
			log.Debugf("[CreateACPConfigByName] Patch ACPConfig Success :%s", objToCreate.GetName())
			break
		}
	}

	log.Debugf("[CreateACPConfigByName] Executed Successfully: %s", objToCreate.GetName())
	return &PolicypkgACPConfig{
		client:    group.client,
		ACPConfig: result,
	}, nil
}

// SetACPConfigStatusByName sets user defined status
func (group *PolicypkgTsmV1) SetACPConfigStatusByName(ctx context.Context,
	objToUpdate *basepolicypkgtsmtanzuvmwarecomv1.ACPConfig, status *basepolicypkgtsmtanzuvmwarecomv1.ACPStatus) (*PolicypkgACPConfig, error) {
	log.Debugf("[SetACPConfigStatusByName] Received objToUpdate:%s", objToUpdate.GetName())
	// Make sure status field is present first
	m := []byte("{\"status\":{}}")
	result, err := group.client.baseClient.
		PolicypkgTsmV1().
		ACPConfigs().Patch(ctx, objToUpdate.GetName(), types.MergePatchType, m, metav1.PatchOptions{}, "status")
	if err != nil {
		return nil, err
	}

	patch := Patch{
		PatchOp{
			Op:    "replace",
			Path:  "/status/status",
			Value: status,
		},
	}
	marshaled, err := patch.Marshal()
	if err != nil {
		return nil, err
	}
	result, err = group.client.baseClient.
		PolicypkgTsmV1().
		ACPConfigs().Patch(ctx, objToUpdate.GetName(), types.JSONPatchType, marshaled, metav1.PatchOptions{}, "status")
	if err != nil {
		return nil, err
	}
	log.Debugf("[SetACPConfigStatusByName] Patch ACPConfigs Success: %s", objToUpdate.GetName())
	return &PolicypkgACPConfig{
		client:    group.client,
		ACPConfig: result,
	}, nil
}

// UpdateACPConfigByName updates object stored in the database under the hashedName which is a hash of
// display name and parents names.
func (group *PolicypkgTsmV1) UpdateACPConfigByName(ctx context.Context,
	objToUpdate *basepolicypkgtsmtanzuvmwarecomv1.ACPConfig) (*PolicypkgACPConfig, error) {
	log.Debugf("[UpdateACPConfigByName] Received objToUpdate: %s", objToUpdate.GetName())

	var patch Patch

	if objToUpdate.Annotations != nil || objToUpdate.Labels != nil {
		current, err := group.client.Policypkg().GetACPConfigByName(ctx, objToUpdate.Name)
		if err != nil {
			return nil, err
		}

		if objToUpdate.Annotations != nil {
			if current.Annotations[ownershipAnnotation] != "" {
				objToUpdate.Annotations[ownershipAnnotation] = current.Annotations[ownershipAnnotation]
			}
			patch = append(patch, PatchOp{
				Op:    "replace",
				Path:  "/metadata/annotations",
				Value: objToUpdate.Annotations,
			})
		}

		if objToUpdate.Labels != nil {
			parentsList := helper.GetCRDParentsMap()["acpconfigs.policypkg.tsm.tanzu.vmware.com"]
			for _, k := range parentsList {
				objToUpdate.Labels[k] = current.Labels[k]
			}
			objToUpdate.Labels[common.IS_NAME_HASHED_LABEL] = current.Labels[common.IS_NAME_HASHED_LABEL]
			objToUpdate.Labels[common.DISPLAY_NAME_LABEL] = current.Labels[common.DISPLAY_NAME_LABEL]
			patch = append(patch, PatchOp{
				Op:    "replace",
				Path:  "/metadata/labels",
				Value: objToUpdate.Labels,
			})
		}
	}

	var rt reflect.Type

	rt = reflect.TypeOf(objToUpdate.Spec.DisplayName)
	if rt.Kind() == reflect.Slice || rt.Kind() == reflect.Array || rt.Kind() == reflect.Map {
		if !reflect.ValueOf(objToUpdate.Spec.DisplayName).IsNil() {
			patchValueDisplayName := objToUpdate.Spec.DisplayName
			patchOpDisplayName := PatchOp{
				Op:    "replace",
				Path:  "/spec/displayName",
				Value: patchValueDisplayName,
			}
			patch = append(patch, patchOpDisplayName)
		}
	} else {
		patchValueDisplayName := objToUpdate.Spec.DisplayName
		patchOpDisplayName := PatchOp{
			Op:    "replace",
			Path:  "/spec/displayName",
			Value: patchValueDisplayName,
		}
		patch = append(patch, patchOpDisplayName)
	}

	rt = reflect.TypeOf(objToUpdate.Spec.Gns)
	if rt.Kind() == reflect.Slice || rt.Kind() == reflect.Array || rt.Kind() == reflect.Map {
		if !reflect.ValueOf(objToUpdate.Spec.Gns).IsNil() {
			patchValueGns := objToUpdate.Spec.Gns
			patchOpGns := PatchOp{
				Op:    "replace",
				Path:  "/spec/gns",
				Value: patchValueGns,
			}
			patch = append(patch, patchOpGns)
		}
	} else {
		patchValueGns := objToUpdate.Spec.Gns
		patchOpGns := PatchOp{
			Op:    "replace",
			Path:  "/spec/gns",
			Value: patchValueGns,
		}
		patch = append(patch, patchOpGns)
	}

	rt = reflect.TypeOf(objToUpdate.Spec.Description)
	if rt.Kind() == reflect.Slice || rt.Kind() == reflect.Array || rt.Kind() == reflect.Map {
		if !reflect.ValueOf(objToUpdate.Spec.Description).IsNil() {
			patchValueDescription := objToUpdate.Spec.Description
			patchOpDescription := PatchOp{
				Op:    "replace",
				Path:  "/spec/description",
				Value: patchValueDescription,
			}
			patch = append(patch, patchOpDescription)
		}
	} else {
		patchValueDescription := objToUpdate.Spec.Description
		patchOpDescription := PatchOp{
			Op:    "replace",
			Path:  "/spec/description",
			Value: patchValueDescription,
		}
		patch = append(patch, patchOpDescription)
	}

	rt = reflect.TypeOf(objToUpdate.Spec.Tags)
	if rt.Kind() == reflect.Slice || rt.Kind() == reflect.Array || rt.Kind() == reflect.Map {
		if !reflect.ValueOf(objToUpdate.Spec.Tags).IsNil() {
			patchValueTags := objToUpdate.Spec.Tags
			patchOpTags := PatchOp{
				Op:    "replace",
				Path:  "/spec/tags",
				Value: patchValueTags,
			}
			patch = append(patch, patchOpTags)
		}
	} else {
		patchValueTags := objToUpdate.Spec.Tags
		patchOpTags := PatchOp{
			Op:    "replace",
			Path:  "/spec/tags",
			Value: patchValueTags,
		}
		patch = append(patch, patchOpTags)
	}

	rt = reflect.TypeOf(objToUpdate.Spec.ProjectId)
	if rt.Kind() == reflect.Slice || rt.Kind() == reflect.Array || rt.Kind() == reflect.Map {
		if !reflect.ValueOf(objToUpdate.Spec.ProjectId).IsNil() {
			patchValueProjectId := objToUpdate.Spec.ProjectId
			patchOpProjectId := PatchOp{
				Op:    "replace",
				Path:  "/spec/projectId",
				Value: patchValueProjectId,
			}
			patch = append(patch, patchOpProjectId)
		}
	} else {
		patchValueProjectId := objToUpdate.Spec.ProjectId
		patchOpProjectId := PatchOp{
			Op:    "replace",
			Path:  "/spec/projectId",
			Value: patchValueProjectId,
		}
		patch = append(patch, patchOpProjectId)
	}

	rt = reflect.TypeOf(objToUpdate.Spec.Conditions)
	if rt.Kind() == reflect.Slice || rt.Kind() == reflect.Array || rt.Kind() == reflect.Map {
		if !reflect.ValueOf(objToUpdate.Spec.Conditions).IsNil() {
			patchValueConditions := objToUpdate.Spec.Conditions
			patchOpConditions := PatchOp{
				Op:    "replace",
				Path:  "/spec/conditions",
				Value: patchValueConditions,
			}
			patch = append(patch, patchOpConditions)
		}
	} else {
		patchValueConditions := objToUpdate.Spec.Conditions
		patchOpConditions := PatchOp{
			Op:    "replace",
			Path:  "/spec/conditions",
			Value: patchValueConditions,
		}
		patch = append(patch, patchOpConditions)
	}

	marshaled, err := patch.Marshal()
	if err != nil {
		return nil, err
	}

	var (
		result *basepolicypkgtsmtanzuvmwarecomv1.ACPConfig
	)
	newCtx := context.TODO()
	retryCount := 0
	for {
		result, err = group.client.baseClient.
			PolicypkgTsmV1().
			ACPConfigs().Patch(newCtx, objToUpdate.GetName(), types.JSONPatchType, marshaled, metav1.PatchOptions{}, "")
		if err != nil {
			log.Errorf("[UpdateACPConfigByName] Failed to patch ACPConfig gvk in parent node[AccessControlPolicies]: %+v", err)
			if errors.IsTimeout(err) || customerrors.Is(err, context.DeadlineExceeded) {
				log.Errorf("[Retry Count: %d ] %+v", retryCount, err)
				if retryCount == maxRetryCount {
					log.Error("Max Retry exceed on patching gvk")
					log.Errorf("Trigger ACPConfig Delete: %s", objToUpdate.GetName())
					delErr := group.DeleteACPConfigByName(newCtx, objToUpdate.GetName())
					if delErr != nil {
						log.Errorf("Error occur while deleting ACPConfig: %s", objToUpdate.GetName())
						return nil, delErr
					}
					log.Errorf("ACPConfig Deleted: %s", objToUpdate.GetName())
					return nil, err
				}
				retryCount += 1
				time.Sleep(sleepTime * time.Second)
			} else if customerrors.Is(err, context.Canceled) {
				log.Errorf("[CreateACPConfigByName]: %+v", err)
				return nil, context.Canceled
			} else {
				log.Errorf("[CreateACPConfigByName] Unexpected Error ACPConfig] :%+v", err)
				log.Errorf("Trigger ACPConfig Delete: %s", objToUpdate.GetName())
				delErr := group.DeleteACPConfigByName(newCtx, objToUpdate.GetName())
				if delErr != nil {
					log.Errorf("Error occur while deleting ACPConfig: %+v", objToUpdate.GetName())
					return nil, delErr
				}
				log.Errorf("ACPConfig Deleted: %s", objToUpdate.GetName())
				return nil, err
			}
		} else {
			log.Debugf("[CreateACPConfigByName] Patch ACPConfig Success :%s", objToUpdate.GetName())
			break
		}
	}
	log.Debugf("[UpdateACPConfigByName] Executed Successfully %s", objToUpdate.GetName())
	return &PolicypkgACPConfig{
		client:    group.client,
		ACPConfig: result,
	}, nil
}

// ListACPConfigs returns slice of all existing objects of this type. Selectors can be provided in opts parameter.
func (group *PolicypkgTsmV1) ListACPConfigs(ctx context.Context,
	opts metav1.ListOptions) (result []*PolicypkgACPConfig, err error) {
	key := "acpconfigs.policypkg.tsm.tanzu.vmware.com"
	if s, ok := subscriptionMap.Load(key); ok {
		items := s.(subscription).informer.GetStore().List()
		result = make([]*PolicypkgACPConfig, len(items))
		for k, v := range items {
			item, _ := v.(*basepolicypkgtsmtanzuvmwarecomv1.ACPConfig)
			result[k] = &PolicypkgACPConfig{
				client:    group.client,
				ACPConfig: item,
			}
		}
	} else {
		list, err := group.client.baseClient.PolicypkgTsmV1().
			ACPConfigs().List(ctx, opts)
		if err != nil {
			return nil, err
		}
		result = make([]*PolicypkgACPConfig, len(list.Items))
		for k, v := range list.Items {
			item := v
			result[k] = &PolicypkgACPConfig{
				client:    group.client,
				ACPConfig: &item,
			}
		}
	}
	return
}

type PolicypkgACPConfig struct {
	client *Clientset
	*basepolicypkgtsmtanzuvmwarecomv1.ACPConfig
}

// Delete removes obj and all it's children from the database.
func (obj *PolicypkgACPConfig) Delete(ctx context.Context) error {
	err := obj.client.Policypkg().DeleteACPConfigByName(ctx, obj.GetName())
	if err != nil {
		return err
	}
	obj.ACPConfig = nil
	return nil
}

// Update updates spec of object in database. Children and Link can not be updated using this function.
func (obj *PolicypkgACPConfig) Update(ctx context.Context) error {
	result, err := obj.client.Policypkg().UpdateACPConfigByName(ctx, obj.ACPConfig)
	if err != nil {
		return err
	}
	obj.ACPConfig = result.ACPConfig
	return nil
}

// SetStatus sets user defined status
func (obj *PolicypkgACPConfig) SetStatus(ctx context.Context, status *basepolicypkgtsmtanzuvmwarecomv1.ACPStatus) error {
	result, err := obj.client.Policypkg().SetACPConfigStatusByName(ctx, obj.ACPConfig, status)
	if err != nil {
		return err
	}
	obj.ACPConfig = result.ACPConfig
	return nil
}

// GetStatus to get user defined status
func (obj *PolicypkgACPConfig) GetStatus(ctx context.Context) (*basepolicypkgtsmtanzuvmwarecomv1.ACPStatus, error) {
	getObj, err := obj.client.Policypkg().GetACPConfigByName(ctx, obj.GetName())
	if err != nil {
		return nil, err
	}
	return &getObj.Status.Status, nil
}

// ClearStatus to clear user defined status
func (obj *PolicypkgACPConfig) ClearStatus(ctx context.Context) error {
	result, err := obj.client.Policypkg().SetACPConfigStatusByName(ctx, obj.ACPConfig, &basepolicypkgtsmtanzuvmwarecomv1.ACPStatus{})
	if err != nil {
		return err
	}
	obj.ACPConfig = result.ACPConfig
	return nil
}

func (obj *PolicypkgACPConfig) GetParent(ctx context.Context) (result *PolicypkgAccessControlPolicy, err error) {
	hashedName := helper.GetHashedName("accesscontrolpolicies.policypkg.tsm.tanzu.vmware.com", obj.Labels, obj.Labels["accesscontrolpolicies.policypkg.tsm.tanzu.vmware.com"])
	return obj.client.Policypkg().GetAccessControlPolicyByName(ctx, hashedName)
}

// GetAllDestSvcGroups returns all links of given type
func (obj *PolicypkgACPConfig) GetAllDestSvcGroups(ctx context.Context) (
	result []*ServicegroupSvcGroup, err error) {
	result = make([]*ServicegroupSvcGroup, 0, len(obj.Spec.DestSvcGroupsGvk))
	for _, v := range obj.Spec.DestSvcGroupsGvk {
		l, err := obj.client.Servicegroup().GetSvcGroupByName(ctx, v.Name)
		if err != nil {
			return nil, err
		}
		result = append(result, l)
	}
	return
}

// GetDestSvcGroups returns link which has given displayName
func (obj *PolicypkgACPConfig) GetDestSvcGroups(ctx context.Context,
	displayName string) (result *ServicegroupSvcGroup, err error) {
	l, ok := obj.Spec.DestSvcGroupsGvk[displayName]
	if !ok {
		return nil, NewLinkNotFound(obj.DisplayName(), "Policypkg.ACPConfig", "DestSvcGroups", displayName)
	}
	result, err = obj.client.Servicegroup().GetSvcGroupByName(ctx, l.Name)
	return
}

// LinkDestSvcGroups links obj with linkToAdd object. This function doesn't create linked object, it must be
// already created.
func (obj *PolicypkgACPConfig) LinkDestSvcGroups(ctx context.Context,
	linkToAdd *ServicegroupSvcGroup) error {

	payload := "{\"spec\": {\"destSvcGroupsGvk\": {\"" + linkToAdd.DisplayName() + "\": {\"name\": \"" + linkToAdd.Name + "\",\"kind\": \"SvcGroup\", \"group\": \"servicegroup.tsm.tanzu.vmware.com\"}}}}"
	result, err := obj.client.baseClient.PolicypkgTsmV1().ACPConfigs().Patch(ctx, obj.Name, types.MergePatchType, []byte(payload), metav1.PatchOptions{})
	if err != nil {
		return err
	}

	obj.ACPConfig = result
	return nil
}

// UnlinkDestSvcGroups unlinks linkToRemove object from obj. This function doesn't delete linked object.
func (obj *PolicypkgACPConfig) UnlinkDestSvcGroups(ctx context.Context,
	linkToRemove *ServicegroupSvcGroup) (err error) {
	var patch Patch

	patchOp := PatchOp{
		Op:   "remove",
		Path: "/spec/destSvcGroupsGvk/" + linkToRemove.DisplayName(),
	}

	patch = append(patch, patchOp)
	marshaled, err := patch.Marshal()
	if err != nil {
		return err
	}
	result, err := obj.client.baseClient.PolicypkgTsmV1().ACPConfigs().Patch(ctx, obj.Name, types.JSONPatchType, marshaled, metav1.PatchOptions{})
	if err != nil {
		return err
	}
	obj.ACPConfig = result
	return nil

}

// GetAllSourceSvcGroups returns all links of given type
func (obj *PolicypkgACPConfig) GetAllSourceSvcGroups(ctx context.Context) (
	result []*ServicegroupSvcGroup, err error) {
	result = make([]*ServicegroupSvcGroup, 0, len(obj.Spec.SourceSvcGroupsGvk))
	for _, v := range obj.Spec.SourceSvcGroupsGvk {
		l, err := obj.client.Servicegroup().GetSvcGroupByName(ctx, v.Name)
		if err != nil {
			return nil, err
		}
		result = append(result, l)
	}
	return
}

// GetSourceSvcGroups returns link which has given displayName
func (obj *PolicypkgACPConfig) GetSourceSvcGroups(ctx context.Context,
	displayName string) (result *ServicegroupSvcGroup, err error) {
	l, ok := obj.Spec.SourceSvcGroupsGvk[displayName]
	if !ok {
		return nil, NewLinkNotFound(obj.DisplayName(), "Policypkg.ACPConfig", "SourceSvcGroups", displayName)
	}
	result, err = obj.client.Servicegroup().GetSvcGroupByName(ctx, l.Name)
	return
}

// LinkSourceSvcGroups links obj with linkToAdd object. This function doesn't create linked object, it must be
// already created.
func (obj *PolicypkgACPConfig) LinkSourceSvcGroups(ctx context.Context,
	linkToAdd *ServicegroupSvcGroup) error {

	payload := "{\"spec\": {\"sourceSvcGroupsGvk\": {\"" + linkToAdd.DisplayName() + "\": {\"name\": \"" + linkToAdd.Name + "\",\"kind\": \"SvcGroup\", \"group\": \"servicegroup.tsm.tanzu.vmware.com\"}}}}"
	result, err := obj.client.baseClient.PolicypkgTsmV1().ACPConfigs().Patch(ctx, obj.Name, types.MergePatchType, []byte(payload), metav1.PatchOptions{})
	if err != nil {
		return err
	}

	obj.ACPConfig = result
	return nil
}

// UnlinkSourceSvcGroups unlinks linkToRemove object from obj. This function doesn't delete linked object.
func (obj *PolicypkgACPConfig) UnlinkSourceSvcGroups(ctx context.Context,
	linkToRemove *ServicegroupSvcGroup) (err error) {
	var patch Patch

	patchOp := PatchOp{
		Op:   "remove",
		Path: "/spec/sourceSvcGroupsGvk/" + linkToRemove.DisplayName(),
	}

	patch = append(patch, patchOp)
	marshaled, err := patch.Marshal()
	if err != nil {
		return err
	}
	result, err := obj.client.baseClient.PolicypkgTsmV1().ACPConfigs().Patch(ctx, obj.Name, types.JSONPatchType, marshaled, metav1.PatchOptions{})
	if err != nil {
		return err
	}
	obj.ACPConfig = result
	return nil

}

type acpconfigPolicypkgTsmV1Chainer struct {
	client       *Clientset
	name         string
	parentLabels map[string]string
}

func (c *acpconfigPolicypkgTsmV1Chainer) Subscribe() {
	key := "acpconfigs.policypkg.tsm.tanzu.vmware.com"
	if _, ok := subscriptionMap.Load(key); !ok {
		informer := informerpolicypkgtsmtanzuvmwarecomv1.NewACPConfigInformer(c.client.baseClient, 0, cache.Indexers{})
		subscribe(key, informer)
	}
}

func (c *acpconfigPolicypkgTsmV1Chainer) Unsubscribe() {
	key := "acpconfigs.policypkg.tsm.tanzu.vmware.com"
	if s, ok := subscriptionMap.Load(key); ok {
		close(s.(subscription).stop)
		subscriptionMap.Delete(key)
	}
}

func (c *acpconfigPolicypkgTsmV1Chainer) IsSubscribed() bool {
	key := "acpconfigs.policypkg.tsm.tanzu.vmware.com"
	_, ok := subscriptionMap.Load(key)
	return ok
}

func (c *acpconfigPolicypkgTsmV1Chainer) RegisterEventHandler(addCB func(obj *PolicypkgACPConfig), updateCB func(oldObj, newObj *PolicypkgACPConfig), deleteCB func(obj *PolicypkgACPConfig)) (cache.ResourceEventHandlerRegistration, error) {
	fmt.Println("RegisterEventHandler for PolicypkgACPConfig")
	var (
		registrationId cache.ResourceEventHandlerRegistration
		err            error
		informer       cache.SharedIndexInformer
	)
	key := "acpconfigs.policypkg.tsm.tanzu.vmware.com"
	stopper := make(chan struct{})
	if s, ok := subscriptionMap.Load(key); ok {
		fmt.Println("Informer exists for PolicypkgACPConfig")
		sub := s.(subscription)
		informer = sub.informer
	} else {
		fmt.Println("Informer doesn't exists for PolicypkgACPConfig, so creating a new one")
		informer = informerpolicypkgtsmtanzuvmwarecomv1.NewACPConfigInformer(c.client.baseClient, 0, cache.Indexers{})
		go informer.Run(stopper)
		subscribe(key, informer)
	}
	registrationId, err = informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
		AddFunc: func(obj interface{}) {
			nc := &PolicypkgACPConfig{
				client:    c.client,
				ACPConfig: obj.(*basepolicypkgtsmtanzuvmwarecomv1.ACPConfig),
			}

			var parent *PolicypkgAccessControlPolicy
			gvkExist := false
			for i := 0; i < 600; i++ {
				// Check if parent exists
				p, err := nc.GetParent(context.TODO())
				if err != nil || p == nil {
					time.Sleep(500 * time.Millisecond)
					continue
				}
				parent = p
				// Check GVK

				if _, ok := parent.Spec.PolicyConfigsGvk[nc.DisplayName()]; !ok {
					time.Sleep(500 * time.Millisecond)
					continue
				}

				gvkExist = true
				break
			}
			if parent == nil {
				hashedName := helper.GetHashedName("accesscontrolpolicies.policypkg.tsm.tanzu.vmware.com", nc.Labels, nc.Labels["accesscontrolpolicies.policypkg.tsm.tanzu.vmware.com"])
				parent, err = c.client.Policypkg().ForceReadAccessControlPolicyByName(context.TODO(), hashedName)
				if err != nil {
					if errors.IsNotFound(err) {
						return
					}
					panic("error occurred while fetching parent " + err.Error())
				}
				panic(fmt.Sprintf("parent found (event loop is stalled) " + nc.DisplayName()))
			}
			if !gvkExist {
				// Check GVK

				if _, ok := parent.Spec.PolicyConfigsGvk[nc.DisplayName()]; !ok {
					return
				}

				panic(fmt.Sprintf("gvk found (event loop is stalled) " + nc.DisplayName()))
			}

			addCB(nc)
		},

		UpdateFunc: func(oldObj, newObj interface{}) {
			oldData := &PolicypkgACPConfig{
				client:    c.client,
				ACPConfig: oldObj.(*basepolicypkgtsmtanzuvmwarecomv1.ACPConfig),
			}
			newData := &PolicypkgACPConfig{
				client:    c.client,
				ACPConfig: newObj.(*basepolicypkgtsmtanzuvmwarecomv1.ACPConfig),
			}
			updateCB(oldData, newData)
		},

		DeleteFunc: func(obj interface{}) {
			nc := &PolicypkgACPConfig{
				client:    c.client,
				ACPConfig: obj.(*basepolicypkgtsmtanzuvmwarecomv1.ACPConfig),
			}

			var parent *PolicypkgAccessControlPolicy
			gvkExist := true
			for i := 0; i < 600; i++ {
				// Check if parent exists
				p, err := nc.GetParent(context.TODO())
				if err != nil || p == nil {
					time.Sleep(500 * time.Millisecond)
					continue
				}
				parent = p
				// Check GVK

				if _, ok := parent.Spec.PolicyConfigsGvk[nc.DisplayName()]; ok {
					time.Sleep(500 * time.Millisecond)
					continue
				}

				gvkExist = false
				break
			}
			if parent == nil {
				hashedName := helper.GetHashedName("accesscontrolpolicies.policypkg.tsm.tanzu.vmware.com", nc.Labels, nc.Labels["accesscontrolpolicies.policypkg.tsm.tanzu.vmware.com"])
				parent, err = c.client.Policypkg().ForceReadAccessControlPolicyByName(context.TODO(), hashedName)
				if err != nil {
					if errors.IsNotFound(err) {
						return
					}
					panic("error occurred while fetching parent " + err.Error())
				}
				panic(fmt.Sprintf("parent found (event loop is stalled) " + nc.DisplayName()))
			}
			if gvkExist {
				// Check GVK

				if _, ok := parent.Spec.PolicyConfigsGvk[nc.DisplayName()]; ok {
					return
				}

				panic(fmt.Sprintf("gvk not found (event loop is stalled) " + nc.DisplayName()))
			}

			deleteCB(nc)
		},
	})
	return registrationId, err
}

func (c *acpconfigPolicypkgTsmV1Chainer) RegisterAddCallback(cbfn func(obj *PolicypkgACPConfig)) (cache.ResourceEventHandlerRegistration, error) {
	log.Debugf("[RegisterAddCallback] Received for PolicypkgACPConfig")
	var (
		registrationId cache.ResourceEventHandlerRegistration
		err            error
	)
	key := "acpconfigs.policypkg.tsm.tanzu.vmware.com"
	stopper := make(chan struct{})
	if s, ok := subscriptionMap.Load(key); ok {
		log.Debugf("[RegisterAddCallback] PolicypkgACPConfig Use Subscription Informer")
		sub := s.(subscription)
		registrationId, err = sub.informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
			AddFunc: func(obj interface{}) {
				nc := &PolicypkgACPConfig{
					client:    c.client,
					ACPConfig: obj.(*basepolicypkgtsmtanzuvmwarecomv1.ACPConfig),
				}

				var parent *PolicypkgAccessControlPolicy
				gvkExist := false
				for i := 0; i < 600; i++ {
					// Check if parent exists
					p, err := nc.GetParent(context.TODO())
					if err != nil || p == nil {
						time.Sleep(500 * time.Millisecond)
						continue
					}
					parent = p

					// Check GVK

					if _, ok := parent.Spec.PolicyConfigsGvk[nc.DisplayName()]; !ok {
						time.Sleep(500 * time.Millisecond)
						continue
					}

					gvkExist = true

					break
				}

				if parent == nil {
					hashedName := helper.GetHashedName("accesscontrolpolicies.policypkg.tsm.tanzu.vmware.com", nc.Labels, nc.Labels["accesscontrolpolicies.policypkg.tsm.tanzu.vmware.com"])
					parent, err = c.client.Policypkg().ForceReadAccessControlPolicyByName(context.TODO(), hashedName)
					if err != nil {
						if errors.IsNotFound(err) {
							return
						}

						panic("error occurred while fetching parent " + err.Error())
					}
					panic(fmt.Sprintf("parent found (event loop is stalled) " + nc.DisplayName()))
				}

				if !gvkExist {
					// Check GVK

					if _, ok := parent.Spec.PolicyConfigsGvk[nc.DisplayName()]; !ok {
						return
					}

					panic(fmt.Sprintf("gvk found (event loop is stalled) " + nc.DisplayName()))
				}

				cbfn(nc)
			},
		})
	} else {
		log.Debugf("[RegisterAddCallback] PolicypkgACPConfig Create New Informer")
		informer := informerpolicypkgtsmtanzuvmwarecomv1.NewACPConfigInformer(c.client.baseClient, 0, cache.Indexers{})
		registrationId, err = informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
			AddFunc: func(obj interface{}) {
				nc := &PolicypkgACPConfig{
					client:    c.client,
					ACPConfig: obj.(*basepolicypkgtsmtanzuvmwarecomv1.ACPConfig),
				}

				var parent *PolicypkgAccessControlPolicy
				gvkExist := false
				for i := 0; i < 600; i++ {
					// Check if parent exists
					p, err := nc.GetParent(context.TODO())
					if err != nil || p == nil {
						time.Sleep(500 * time.Millisecond)
						continue
					}
					parent = p

					// Check GVK

					if _, ok := parent.Spec.PolicyConfigsGvk[nc.DisplayName()]; !ok {
						time.Sleep(500 * time.Millisecond)
						continue
					}

					gvkExist = true

					break
				}

				if parent == nil {
					hashedName := helper.GetHashedName("accesscontrolpolicies.policypkg.tsm.tanzu.vmware.com", nc.Labels, nc.Labels["accesscontrolpolicies.policypkg.tsm.tanzu.vmware.com"])
					parent, err = c.client.Policypkg().ForceReadAccessControlPolicyByName(context.TODO(), hashedName)
					if err != nil {
						if errors.IsNotFound(err) {
							return
						}

						panic("error occurred while fetching parent " + err.Error())
					}
					panic(fmt.Sprintf("parent found (event loop is stalled) " + nc.DisplayName()))
				}

				if !gvkExist {
					// Check GVK

					if _, ok := parent.Spec.PolicyConfigsGvk[nc.DisplayName()]; !ok {
						return
					}

					panic(fmt.Sprintf("gvk found (event loop is stalled) " + nc.DisplayName()))
				}

				cbfn(nc)
			},
		})
		go informer.Run(stopper)
	}
	return registrationId, err
}

func (c *acpconfigPolicypkgTsmV1Chainer) RegisterUpdateCallback(cbfn func(oldObj, newObj *PolicypkgACPConfig)) (cache.ResourceEventHandlerRegistration, error) {
	log.Debugf("[RegisterUpdateCallback] Received for PolicypkgACPConfig")
	var (
		registrationId cache.ResourceEventHandlerRegistration
		err            error
	)
	key := "acpconfigs.policypkg.tsm.tanzu.vmware.com"
	stopper := make(chan struct{})
	if s, ok := subscriptionMap.Load(key); ok {
		log.Debugf("[RegisterUpdateCallback] PolicypkgACPConfig Use Subscription Informer")
		sub := s.(subscription)
		registrationId, err = sub.informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
			UpdateFunc: func(oldObj, newObj interface{}) {
				oldData := &PolicypkgACPConfig{
					client:    c.client,
					ACPConfig: oldObj.(*basepolicypkgtsmtanzuvmwarecomv1.ACPConfig),
				}
				newData := &PolicypkgACPConfig{
					client:    c.client,
					ACPConfig: newObj.(*basepolicypkgtsmtanzuvmwarecomv1.ACPConfig),
				}
				cbfn(oldData, newData)
			},
		})
	} else {
		log.Debugf("[RegisterUpdateCallback] PolicypkgACPConfig Create New Informer")
		informer := informerpolicypkgtsmtanzuvmwarecomv1.NewACPConfigInformer(c.client.baseClient, 0, cache.Indexers{})
		registrationId, err = informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
			UpdateFunc: func(oldObj, newObj interface{}) {
				oldData := &PolicypkgACPConfig{
					client:    c.client,
					ACPConfig: oldObj.(*basepolicypkgtsmtanzuvmwarecomv1.ACPConfig),
				}
				newData := &PolicypkgACPConfig{
					client:    c.client,
					ACPConfig: newObj.(*basepolicypkgtsmtanzuvmwarecomv1.ACPConfig),
				}
				cbfn(oldData, newData)
			},
		})
		go informer.Run(stopper)
	}
	return registrationId, err
}

func (c *acpconfigPolicypkgTsmV1Chainer) RegisterDeleteCallback(cbfn func(obj *PolicypkgACPConfig)) (cache.ResourceEventHandlerRegistration, error) {
	log.Debugf("[RegisterDeleteCallback] Received for PolicypkgACPConfig")
	var (
		registrationId cache.ResourceEventHandlerRegistration
		err            error
	)
	key := "acpconfigs.policypkg.tsm.tanzu.vmware.com"
	stopper := make(chan struct{})
	if s, ok := subscriptionMap.Load(key); ok {
		log.Debugf("[RegisterDeleteCallback] PolicypkgACPConfig Use Subscription Informer")
		sub := s.(subscription)
		registrationId, err = sub.informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
			DeleteFunc: func(obj interface{}) {
				nc := &PolicypkgACPConfig{
					client:    c.client,
					ACPConfig: obj.(*basepolicypkgtsmtanzuvmwarecomv1.ACPConfig),
				}

				var parent *PolicypkgAccessControlPolicy
				gvkExist := true
				for i := 0; i < 600; i++ {
					// Check if parent exists
					p, err := nc.GetParent(context.TODO())
					if err != nil || p == nil {
						time.Sleep(500 * time.Millisecond)
						continue
					}
					parent = p

					// Check GVK

					if _, ok := parent.Spec.PolicyConfigsGvk[nc.DisplayName()]; ok {
						time.Sleep(500 * time.Millisecond)
						continue
					}

					gvkExist = false
					break
				}

				if parent == nil {
					hashedName := helper.GetHashedName("accesscontrolpolicies.policypkg.tsm.tanzu.vmware.com", nc.Labels, nc.Labels["accesscontrolpolicies.policypkg.tsm.tanzu.vmware.com"])
					parent, err = c.client.Policypkg().ForceReadAccessControlPolicyByName(context.TODO(), hashedName)
					if err != nil {
						if errors.IsNotFound(err) {
							return
						}

						panic("error occurred while fetching parent " + err.Error())
					}
					panic(fmt.Sprintf("parent found (event loop is stalled) " + nc.DisplayName()))
				}

				if gvkExist {
					// Check GVK

					if _, ok := parent.Spec.PolicyConfigsGvk[nc.DisplayName()]; ok {
						return
					}

					panic(fmt.Sprintf("gvk not found (event loop is stalled) " + nc.DisplayName()))
				}

				cbfn(nc)
			},
		})
	} else {
		log.Debugf("[RegisterDeleteCallback] PolicypkgACPConfig Create New Informer")
		informer := informerpolicypkgtsmtanzuvmwarecomv1.NewACPConfigInformer(c.client.baseClient, 0, cache.Indexers{})
		registrationId, err = informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
			DeleteFunc: func(obj interface{}) {
				nc := &PolicypkgACPConfig{
					client:    c.client,
					ACPConfig: obj.(*basepolicypkgtsmtanzuvmwarecomv1.ACPConfig),
				}

				var parent *PolicypkgAccessControlPolicy
				gvkExist := true
				for i := 0; i < 600; i++ {
					// Check if parent exists
					p, err := nc.GetParent(context.TODO())
					if err != nil || p == nil {
						time.Sleep(500 * time.Millisecond)
						continue
					}
					parent = p

					// Check GVK

					if _, ok := parent.Spec.PolicyConfigsGvk[nc.DisplayName()]; ok {
						time.Sleep(500 * time.Millisecond)
						continue
					}

					gvkExist = false

					break
				}

				if parent == nil {
					hashedName := helper.GetHashedName("accesscontrolpolicies.policypkg.tsm.tanzu.vmware.com", nc.Labels, nc.Labels["accesscontrolpolicies.policypkg.tsm.tanzu.vmware.com"])
					parent, err = c.client.Policypkg().ForceReadAccessControlPolicyByName(context.TODO(), hashedName)
					if err != nil {
						if errors.IsNotFound(err) {
							return
						}

						panic("error occurred while fetching parent " + err.Error())
					}
					panic(fmt.Sprintf("parent found (event loop is stalled) " + nc.DisplayName()))
				}

				if gvkExist {
					// Check GVK

					if _, ok := parent.Spec.PolicyConfigsGvk[nc.DisplayName()]; ok {
						return
					}

					panic(fmt.Sprintf("gvk not found (event loop is stalled) " + nc.DisplayName()))
				}

				cbfn(nc)
			},
		})
		go informer.Run(stopper)
	}
	return registrationId, err
}

// ClearStatus to clear user defined status
func (c *acpconfigPolicypkgTsmV1Chainer) ClearStatus(ctx context.Context) (err error) {
	hashedName := helper.GetHashedName("acpconfigs.policypkg.tsm.tanzu.vmware.com", c.parentLabels, c.name)
	obj, err := c.client.Policypkg().GetACPConfigByName(ctx, hashedName)
	if err != nil {
		return err
	}
	_, err = c.client.Policypkg().SetACPConfigStatusByName(ctx, obj.ACPConfig, nil)
	return err
}

// GetStatus to get user defined status
func (c *acpconfigPolicypkgTsmV1Chainer) GetStatus(ctx context.Context) (result *basepolicypkgtsmtanzuvmwarecomv1.ACPStatus, err error) {
	hashedName := helper.GetHashedName("acpconfigs.policypkg.tsm.tanzu.vmware.com", c.parentLabels, c.name)
	obj, err := c.client.Policypkg().GetACPConfigByName(ctx, hashedName)
	if err != nil {
		return nil, err
	}
	return &obj.Status.Status, nil
}

// SetStatus sets user defined status
func (c *acpconfigPolicypkgTsmV1Chainer) SetStatus(ctx context.Context, status *basepolicypkgtsmtanzuvmwarecomv1.ACPStatus) (err error) {
	hashedName := helper.GetHashedName("acpconfigs.policypkg.tsm.tanzu.vmware.com", c.parentLabels, c.name)
	obj, err := c.client.Policypkg().GetACPConfigByName(ctx, hashedName)
	if err != nil {
		return err
	}
	_, err = c.client.Policypkg().SetACPConfigStatusByName(ctx, obj.ACPConfig, status)
	return err
}

// GetVMpolicyByName returns object stored in the database under the hashedName which is a hash of display
// name and parents names. Use it when you know hashed name of object.
func (group *PolicypkgTsmV1) GetVMpolicyByName(ctx context.Context, hashedName string) (*PolicypkgVMpolicy, error) {
	key := "vmpolicies.policypkg.tsm.tanzu.vmware.com"
	if s, ok := subscriptionMap.Load(key); ok {
		log.Debugf("[GetVMpolicyByName] GetObject: %s from cache", hashedName)
		item, exists, err := s.(subscription).informer.GetStore().GetByKey(hashedName)
		if !exists {
			return nil, err
		}

		log.Debugf("[GetVMpolicyByName] Object: %s exists in cache", hashedName)
		result, _ := item.(*basepolicypkgtsmtanzuvmwarecomv1.VMpolicy)
		return &PolicypkgVMpolicy{
			client:   group.client,
			VMpolicy: result,
		}, nil
	} else {
		retryCount := 0
		for {
			result, err := group.client.baseClient.
				PolicypkgTsmV1().
				VMpolicies().Get(ctx, hashedName, metav1.GetOptions{})
			if err != nil {
				log.Errorf("[GetVMpolicyByName] Failed to Get VMpolicies: %+v", err)
				if errors.IsTimeout(err) || customerrors.Is(err, context.DeadlineExceeded) {
					log.Errorf("[Retry Count: %d ] %+v", retryCount, err)
					if retryCount == maxRetryCount {
						log.Error("Max Retry exceed on Get VMpolicies")
						return nil, err
					}
					retryCount += 1
					time.Sleep(sleepTime * time.Second)
				} else if customerrors.Is(err, context.Canceled) {
					log.Errorf("[GetVMpolicyByName]: %+v", err)
					return nil, context.Canceled
				} else {
					log.Errorf("[GetVMpolicyByName]: %+v", err)
					return nil, err
				}
			} else {
				return &PolicypkgVMpolicy{
					client:   group.client,
					VMpolicy: result,
				}, nil
			}
		}
	}
}

// ForceReadVMpolicyByName read object directly from the database under the hashedName which is a hash of display
// name and parents names. Use it when you know hashed name of object.
func (group *PolicypkgTsmV1) ForceReadVMpolicyByName(ctx context.Context, hashedName string) (*PolicypkgVMpolicy, error) {
	log.Debugf("[ForceReadVMpolicyByName] Received object :%s to read from DB", hashedName)
	retryCount := 0
	for {
		result, err := group.client.baseClient.
			PolicypkgTsmV1().
			VMpolicies().Get(ctx, hashedName, metav1.GetOptions{})
		if err != nil {
			log.Errorf("[ForceReadVMpolicyByName] Failed to Get VMpolicies: %+v", err)
			if errors.IsTimeout(err) || customerrors.Is(err, context.DeadlineExceeded) {
				log.Errorf("[Retry Count: %d ] %+v", retryCount, err)
				if retryCount == maxRetryCount {
					log.Error("Max Retry exceed on Get VMpolicies")
					return nil, err
				}
				retryCount += 1
				time.Sleep(sleepTime * time.Second)
			} else if customerrors.Is(err, context.Canceled) {
				log.Errorf("[ForceReadVMpolicyByName]: %+v", err)
				return nil, context.Canceled
			} else {
				log.Errorf("[ForceReadVMpolicyByName]: %+v", err)
				return nil, err
			}
		} else {
			log.Debugf("[ForceReadVMpolicyByName] Executed Successfully :%s", hashedName)
			return &PolicypkgVMpolicy{
				client:   group.client,
				VMpolicy: result,
			}, nil
		}
	}
}

// DeleteVMpolicyByName deletes object stored in the database under the hashedName which is a hash of
// display name and parents names. Use it when you know hashed name of object.
func (group *PolicypkgTsmV1) DeleteVMpolicyByName(ctx context.Context, hashedName string) (err error) {
	log.Debugf("[DeleteVMpolicyByName] Received objectToDelete: %s", hashedName)

	var (
		retryCount int
		result     *basepolicypkgtsmtanzuvmwarecomv1.VMpolicy
	)
	retryCount = 0
	for {
		result, err = group.client.baseClient.
			PolicypkgTsmV1().
			VMpolicies().Get(ctx, hashedName, metav1.GetOptions{})
		if err != nil {
			log.Errorf("[DeleteVMpolicyByName] Failed to Get VMpolicies: %+v", err)
			if errors.IsTimeout(err) || customerrors.Is(err, context.DeadlineExceeded) {
				log.Errorf("[Retry Count: %d ] %+v", retryCount, err)
				if retryCount == maxRetryCount {
					log.Error("Max Retry exceed on Get VMpolicies")
					return err
				}
				retryCount += 1
				time.Sleep(sleepTime * time.Second)
			} else if customerrors.Is(err, context.Canceled) {
				log.Errorf("[DeleteVMpolicyByName]: %+v", err)
				return context.Canceled
			} else if errors.IsNotFound(err) {
				log.Errorf("[DeleteVMpolicyByName] Object Notfound: %+v", err)
				break
			} else {
				log.Errorf("[DeleteVMpolicyByName]: %+v", err)
				return err
			}
		} else {
			break
		}
	}

	retryCount = 0
	for {
		err = group.client.baseClient.
			PolicypkgTsmV1().
			VMpolicies().Delete(ctx, hashedName, metav1.DeleteOptions{})
		if err != nil {
			log.Errorf("[DeleteVMpolicyByName] failed to delete VMpolicies: %+v", err)
			if errors.IsTimeout(err) || customerrors.Is(err, context.DeadlineExceeded) {
				log.Errorf("[Retry Count: %d ] %+v", retryCount, err)
				if retryCount == maxRetryCount {
					log.Error("Max retry exceed on delete VMpolicies")
					return err
				}
				retryCount += 1
				time.Sleep(sleepTime * time.Second)
			} else if customerrors.Is(err, context.Canceled) {
				log.Errorf("[DeleteVMpolicyByName]: %+v", err)
				return context.Canceled
			} else if errors.IsNotFound(err) {
				log.Errorf("[DeleteVMpolicyByName] Object not found: %+v", err)
				break
			} else {
				log.Errorf("[DeleteVMpolicyByName]: %+v", err)
				return err
			}
		}
	}
	// Get Parent Node and check if gvk present before patch

	var gvkPresent bool
	log.Debugf("[DeleteVMpolicyByName] Get Parent details")
	var patch Patch
	parents := result.GetLabels()
	if parents == nil {
		parents = make(map[string]string)
	}
	parentName, ok := parents["configs.config.tsm.tanzu.vmware.com"]
	if !ok {
		parentName = helper.DEFAULT_KEY
	}
	if result.GetLabels() != nil {
		if parents[common.IS_NAME_HASHED_LABEL] == "true" {
			parentName = helper.GetHashedName("configs.config.tsm.tanzu.vmware.com", parents, parentName)
		}
	} else {
		parentName = helper.GetHashedName("configs.config.tsm.tanzu.vmware.com", parents, parentName)
	}
	parentData, err := group.client.baseClient.
		ConfigTsmV1().
		Configs().Get(ctx, parentName, metav1.GetOptions{})
	if err != nil {
		log.Errorf("[DeleteVMpolicyByName] Failed to get Parent node: %+v", err)
		if errors.IsNotFound(err) {
			return nil
		} else {
			return err
		}
	}

	if parentData.Spec.VMPPoliciesGvk != nil {
		log.Debugf("[DeleteVMpolicyByName] GVK present in parent for node: %s", hashedName)
		gvkPresent = true
	}

	if gvkPresent {

		patchOp := PatchOp{
			Op:   "remove",
			Path: "/spec/vMPPoliciesGvk",
		}

		patch = append(patch, patchOp)
		marshaled, err := patch.Marshal()
		if err != nil {
			return err
		}

		retryCount = 0
		newCtx := context.TODO()
		for {
			_, err = group.client.baseClient.
				ConfigTsmV1().
				Configs().Patch(newCtx, parentName, types.JSONPatchType, marshaled, metav1.PatchOptions{})
			if err != nil {
				log.Errorf("Failed to patch VMpolicy gvk in parent node[Configs]: %+v", err)
				if errors.IsTimeout(err) || customerrors.Is(err, context.DeadlineExceeded) {
					log.Errorf("[Retry Count: %d ] %+v", retryCount, err)
					if retryCount == maxRetryCount {
						log.Error("Max Retry exceed on patching gvk")
						return err
					}
					retryCount += 1
					time.Sleep(sleepTime * time.Second)
				} else if customerrors.Is(err, context.Canceled) {
					log.Errorf("[DeleteVMpolicyByName]: %+v", err)
					return context.Canceled
				} else {
					log.Errorf("Unexpected Error occur VMpolicy]: %+v", err)
					return err
				}
			} else {
				log.Debugf("[DeleteVMpolicyByName] Patch VMpolicy Success: %s", hashedName)
				break
			}
		}
		log.Debugf("[DeleteVMpolicyByName] Executed Successfully: %s", hashedName)
	}

	return
}

// CreateVMpolicyByName creates object in the database without hashing the name.
// Use it directly ONLY when objToCreate.Name is hashed name of the object.
func (group *PolicypkgTsmV1) CreateVMpolicyByName(ctx context.Context,
	objToCreate *basepolicypkgtsmtanzuvmwarecomv1.VMpolicy) (*PolicypkgVMpolicy, error) {
	log.Debugf("[CreateVMpolicyByName] Received objToCreate: %s", objToCreate.GetName())
	if objToCreate.GetLabels() == nil {
		objToCreate.Labels = make(map[string]string)
	}
	if _, ok := objToCreate.Labels[common.DISPLAY_NAME_LABEL]; !ok {
		objToCreate.Labels[common.DISPLAY_NAME_LABEL] = objToCreate.GetName()
	}

	var (
		retryCount int
		result     *basepolicypkgtsmtanzuvmwarecomv1.VMpolicy
		err        error
	)
	retryCount = 0
	for {
		result, err = group.client.baseClient.
			PolicypkgTsmV1().
			VMpolicies().Create(ctx, objToCreate, metav1.CreateOptions{})
		if err != nil {
			log.Errorf("[CreateVMpolicyByName] Failed to Create VMpolicies: %+v", err)
			if errors.IsTimeout(err) || customerrors.Is(err, context.DeadlineExceeded) {
				log.Errorf("[Retry Count: %d ] %+v", retryCount, err)
				if retryCount == maxRetryCount {
					log.Error("Max Retry exceed on Get VMpolicies")
					return nil, err
				}
				retryCount += 1
				time.Sleep(sleepTime * time.Second)
			} else if customerrors.Is(err, context.Canceled) {
				log.Errorf("[CreateVMpolicyByName]: %+v", err)
				return nil, context.Canceled
			} else {
				log.Errorf("[CreateVMpolicyByName]: %+v", err)
				return nil, err
			}
		} else {
			break
		}
	}
	log.Debugf("[CreateVMpolicyByName] VMpolicies created successfully: %s", objToCreate.GetName())

	parentName, ok := objToCreate.GetLabels()["configs.config.tsm.tanzu.vmware.com"]
	if !ok {
		parentName = helper.DEFAULT_KEY
	}
	if objToCreate.Labels[common.IS_NAME_HASHED_LABEL] == "true" {
		parentName = helper.GetHashedName("configs.config.tsm.tanzu.vmware.com", objToCreate.GetLabels(), parentName)
	}

	var patch Patch
	patchOp := PatchOp{
		Op:   "replace",
		Path: "/spec/vMPPoliciesGvk",
		Value: basepolicypkgtsmtanzuvmwarecomv1.Child{
			Group: "policypkg.tsm.tanzu.vmware.com",
			Kind:  "VMpolicy",
			Name:  objToCreate.Name,
		},
	}
	patch = append(patch, patchOp)
	marshaled, err := patch.Marshal()
	if err != nil {
		return nil, err
	}
	retryCount = 0
	newCtx := context.TODO()
	for {
		_, err = group.client.baseClient.
			ConfigTsmV1().
			Configs().Patch(newCtx, parentName, types.JSONPatchType, marshaled, metav1.PatchOptions{})
		if err != nil {
			log.Errorf("[CreateVMpolicyByName] Failed to patch VMpolicy gvk in parent node[Configs]: %+v", err)
			if errors.IsTimeout(err) || customerrors.Is(err, context.DeadlineExceeded) {
				log.Errorf("[Retry Count: %d ] %+v", retryCount, err)
				if retryCount == maxRetryCount {
					log.Error("Max Retry exceed on patching gvk")
					log.Errorf("Trigger VMpolicy Delete: %s", objToCreate.GetName())
					delErr := group.DeleteVMpolicyByName(newCtx, objToCreate.GetName())
					if delErr != nil {
						log.Errorf("Error occur while deleting VMpolicy: %s", objToCreate.GetName())
						return nil, delErr
					}
					log.Errorf("VMpolicy Deleted: %s", objToCreate.GetName())
					return nil, err
				}
				retryCount += 1
				time.Sleep(sleepTime * time.Second)
			} else if customerrors.Is(err, context.Canceled) {
				log.Errorf("[CreateVMpolicyByName]: %+v", err)
				return nil, context.Canceled
			} else {
				log.Errorf("[CreateVMpolicyByName] Unexpected Error VMpolicy] :%+v", err)
				log.Errorf("Trigger VMpolicy Delete: %s", objToCreate.GetName())
				delErr := group.DeleteVMpolicyByName(newCtx, objToCreate.GetName())
				if delErr != nil {
					log.Errorf("Error occur while deleting VMpolicy: %+v", objToCreate.GetName())
					return nil, delErr
				}
				log.Errorf("VMpolicy Deleted: %s", objToCreate.GetName())
				return nil, err
			}
		} else {
			log.Debugf("[CreateVMpolicyByName] Patch VMpolicy Success :%s", objToCreate.GetName())
			break
		}
	}

	log.Debugf("[CreateVMpolicyByName] Executed Successfully: %s", objToCreate.GetName())
	return &PolicypkgVMpolicy{
		client:   group.client,
		VMpolicy: result,
	}, nil
}

// UpdateVMpolicyByName updates object stored in the database under the hashedName which is a hash of
// display name and parents names.
func (group *PolicypkgTsmV1) UpdateVMpolicyByName(ctx context.Context,
	objToUpdate *basepolicypkgtsmtanzuvmwarecomv1.VMpolicy) (*PolicypkgVMpolicy, error) {
	log.Debugf("[UpdateVMpolicyByName] Received objToUpdate: %s", objToUpdate.GetName())

	var patch Patch

	if objToUpdate.Annotations != nil || objToUpdate.Labels != nil {
		current, err := group.client.Policypkg().GetVMpolicyByName(ctx, objToUpdate.Name)
		if err != nil {
			return nil, err
		}

		if objToUpdate.Annotations != nil {
			if current.Annotations[ownershipAnnotation] != "" {
				objToUpdate.Annotations[ownershipAnnotation] = current.Annotations[ownershipAnnotation]
			}
			patch = append(patch, PatchOp{
				Op:    "replace",
				Path:  "/metadata/annotations",
				Value: objToUpdate.Annotations,
			})
		}

		if objToUpdate.Labels != nil {
			parentsList := helper.GetCRDParentsMap()["vmpolicies.policypkg.tsm.tanzu.vmware.com"]
			for _, k := range parentsList {
				objToUpdate.Labels[k] = current.Labels[k]
			}
			objToUpdate.Labels[common.IS_NAME_HASHED_LABEL] = current.Labels[common.IS_NAME_HASHED_LABEL]
			objToUpdate.Labels[common.DISPLAY_NAME_LABEL] = current.Labels[common.DISPLAY_NAME_LABEL]
			patch = append(patch, PatchOp{
				Op:    "replace",
				Path:  "/metadata/labels",
				Value: objToUpdate.Labels,
			})
		}
	}

	marshaled, err := patch.Marshal()
	if err != nil {
		return nil, err
	}

	var (
		result *basepolicypkgtsmtanzuvmwarecomv1.VMpolicy
	)
	newCtx := context.TODO()
	retryCount := 0
	for {
		result, err = group.client.baseClient.
			PolicypkgTsmV1().
			VMpolicies().Patch(newCtx, objToUpdate.GetName(), types.JSONPatchType, marshaled, metav1.PatchOptions{}, "")
		if err != nil {
			log.Errorf("[UpdateVMpolicyByName] Failed to patch VMpolicy gvk in parent node[Configs]: %+v", err)
			if errors.IsTimeout(err) || customerrors.Is(err, context.DeadlineExceeded) {
				log.Errorf("[Retry Count: %d ] %+v", retryCount, err)
				if retryCount == maxRetryCount {
					log.Error("Max Retry exceed on patching gvk")
					log.Errorf("Trigger VMpolicy Delete: %s", objToUpdate.GetName())
					delErr := group.DeleteVMpolicyByName(newCtx, objToUpdate.GetName())
					if delErr != nil {
						log.Errorf("Error occur while deleting VMpolicy: %s", objToUpdate.GetName())
						return nil, delErr
					}
					log.Errorf("VMpolicy Deleted: %s", objToUpdate.GetName())
					return nil, err
				}
				retryCount += 1
				time.Sleep(sleepTime * time.Second)
			} else if customerrors.Is(err, context.Canceled) {
				log.Errorf("[CreateVMpolicyByName]: %+v", err)
				return nil, context.Canceled
			} else {
				log.Errorf("[CreateVMpolicyByName] Unexpected Error VMpolicy] :%+v", err)
				log.Errorf("Trigger VMpolicy Delete: %s", objToUpdate.GetName())
				delErr := group.DeleteVMpolicyByName(newCtx, objToUpdate.GetName())
				if delErr != nil {
					log.Errorf("Error occur while deleting VMpolicy: %+v", objToUpdate.GetName())
					return nil, delErr
				}
				log.Errorf("VMpolicy Deleted: %s", objToUpdate.GetName())
				return nil, err
			}
		} else {
			log.Debugf("[CreateVMpolicyByName] Patch VMpolicy Success :%s", objToUpdate.GetName())
			break
		}
	}
	log.Debugf("[UpdateVMpolicyByName] Executed Successfully %s", objToUpdate.GetName())
	return &PolicypkgVMpolicy{
		client:   group.client,
		VMpolicy: result,
	}, nil
}

// ListVMpolicies returns slice of all existing objects of this type. Selectors can be provided in opts parameter.
func (group *PolicypkgTsmV1) ListVMpolicies(ctx context.Context,
	opts metav1.ListOptions) (result []*PolicypkgVMpolicy, err error) {
	key := "vmpolicies.policypkg.tsm.tanzu.vmware.com"
	if s, ok := subscriptionMap.Load(key); ok {
		items := s.(subscription).informer.GetStore().List()
		result = make([]*PolicypkgVMpolicy, len(items))
		for k, v := range items {
			item, _ := v.(*basepolicypkgtsmtanzuvmwarecomv1.VMpolicy)
			result[k] = &PolicypkgVMpolicy{
				client:   group.client,
				VMpolicy: item,
			}
		}
	} else {
		list, err := group.client.baseClient.PolicypkgTsmV1().
			VMpolicies().List(ctx, opts)
		if err != nil {
			return nil, err
		}
		result = make([]*PolicypkgVMpolicy, len(list.Items))
		for k, v := range list.Items {
			item := v
			result[k] = &PolicypkgVMpolicy{
				client:   group.client,
				VMpolicy: &item,
			}
		}
	}
	return
}

type PolicypkgVMpolicy struct {
	client *Clientset
	*basepolicypkgtsmtanzuvmwarecomv1.VMpolicy
}

// Delete removes obj and all it's children from the database.
func (obj *PolicypkgVMpolicy) Delete(ctx context.Context) error {
	err := obj.client.Policypkg().DeleteVMpolicyByName(ctx, obj.GetName())
	if err != nil {
		return err
	}
	obj.VMpolicy = nil
	return nil
}

// Update updates spec of object in database. Children and Link can not be updated using this function.
func (obj *PolicypkgVMpolicy) Update(ctx context.Context) error {
	result, err := obj.client.Policypkg().UpdateVMpolicyByName(ctx, obj.VMpolicy)
	if err != nil {
		return err
	}
	obj.VMpolicy = result.VMpolicy
	return nil
}

func (obj *PolicypkgVMpolicy) GetParent(ctx context.Context) (result *ConfigConfig, err error) {
	hashedName := helper.GetHashedName("configs.config.tsm.tanzu.vmware.com", obj.Labels, obj.Labels["configs.config.tsm.tanzu.vmware.com"])
	return obj.client.Config().GetConfigByName(ctx, hashedName)
}

type vmpolicyPolicypkgTsmV1Chainer struct {
	client       *Clientset
	name         string
	parentLabels map[string]string
}

func (c *vmpolicyPolicypkgTsmV1Chainer) Subscribe() {
	key := "vmpolicies.policypkg.tsm.tanzu.vmware.com"
	if _, ok := subscriptionMap.Load(key); !ok {
		informer := informerpolicypkgtsmtanzuvmwarecomv1.NewVMpolicyInformer(c.client.baseClient, 0, cache.Indexers{})
		subscribe(key, informer)
	}
}

func (c *vmpolicyPolicypkgTsmV1Chainer) Unsubscribe() {
	key := "vmpolicies.policypkg.tsm.tanzu.vmware.com"
	if s, ok := subscriptionMap.Load(key); ok {
		close(s.(subscription).stop)
		subscriptionMap.Delete(key)
	}
}

func (c *vmpolicyPolicypkgTsmV1Chainer) IsSubscribed() bool {
	key := "vmpolicies.policypkg.tsm.tanzu.vmware.com"
	_, ok := subscriptionMap.Load(key)
	return ok
}

func (c *vmpolicyPolicypkgTsmV1Chainer) RegisterEventHandler(addCB func(obj *PolicypkgVMpolicy), updateCB func(oldObj, newObj *PolicypkgVMpolicy), deleteCB func(obj *PolicypkgVMpolicy)) (cache.ResourceEventHandlerRegistration, error) {
	fmt.Println("RegisterEventHandler for PolicypkgVMpolicy")
	var (
		registrationId cache.ResourceEventHandlerRegistration
		err            error
		informer       cache.SharedIndexInformer
	)
	key := "vmpolicies.policypkg.tsm.tanzu.vmware.com"
	stopper := make(chan struct{})
	if s, ok := subscriptionMap.Load(key); ok {
		fmt.Println("Informer exists for PolicypkgVMpolicy")
		sub := s.(subscription)
		informer = sub.informer
	} else {
		fmt.Println("Informer doesn't exists for PolicypkgVMpolicy, so creating a new one")
		informer = informerpolicypkgtsmtanzuvmwarecomv1.NewVMpolicyInformer(c.client.baseClient, 0, cache.Indexers{})
		go informer.Run(stopper)
		subscribe(key, informer)
	}
	registrationId, err = informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
		AddFunc: func(obj interface{}) {
			nc := &PolicypkgVMpolicy{
				client:   c.client,
				VMpolicy: obj.(*basepolicypkgtsmtanzuvmwarecomv1.VMpolicy),
			}

			var parent *ConfigConfig
			gvkExist := false
			for i := 0; i < 600; i++ {
				// Check if parent exists
				p, err := nc.GetParent(context.TODO())
				if err != nil || p == nil {
					time.Sleep(500 * time.Millisecond)
					continue
				}
				parent = p
				// Check GVK

				if parent.Spec.VMPPoliciesGvk == nil {
					time.Sleep(500 * time.Millisecond)
					continue
				}

				gvkExist = true
				break
			}
			if parent == nil {
				hashedName := helper.GetHashedName("configs.config.tsm.tanzu.vmware.com", nc.Labels, nc.Labels["configs.config.tsm.tanzu.vmware.com"])
				parent, err = c.client.Config().ForceReadConfigByName(context.TODO(), hashedName)
				if err != nil {
					if errors.IsNotFound(err) {
						return
					}
					panic("error occurred while fetching parent " + err.Error())
				}
				panic(fmt.Sprintf("parent found (event loop is stalled) " + nc.DisplayName()))
			}
			if !gvkExist {
				// Check GVK

				if parent.Spec.VMPPoliciesGvk == nil {
					return
				}

				panic(fmt.Sprintf("gvk found (event loop is stalled) " + nc.DisplayName()))
			}

			addCB(nc)
		},

		UpdateFunc: func(oldObj, newObj interface{}) {
			oldData := &PolicypkgVMpolicy{
				client:   c.client,
				VMpolicy: oldObj.(*basepolicypkgtsmtanzuvmwarecomv1.VMpolicy),
			}
			newData := &PolicypkgVMpolicy{
				client:   c.client,
				VMpolicy: newObj.(*basepolicypkgtsmtanzuvmwarecomv1.VMpolicy),
			}
			updateCB(oldData, newData)
		},

		DeleteFunc: func(obj interface{}) {
			nc := &PolicypkgVMpolicy{
				client:   c.client,
				VMpolicy: obj.(*basepolicypkgtsmtanzuvmwarecomv1.VMpolicy),
			}

			var parent *ConfigConfig
			gvkExist := true
			for i := 0; i < 600; i++ {
				// Check if parent exists
				p, err := nc.GetParent(context.TODO())
				if err != nil || p == nil {
					time.Sleep(500 * time.Millisecond)
					continue
				}
				parent = p
				// Check GVK

				if parent.Spec.VMPPoliciesGvk != nil {
					time.Sleep(500 * time.Millisecond)
					continue
				}

				gvkExist = false
				break
			}
			if parent == nil {
				hashedName := helper.GetHashedName("configs.config.tsm.tanzu.vmware.com", nc.Labels, nc.Labels["configs.config.tsm.tanzu.vmware.com"])
				parent, err = c.client.Config().ForceReadConfigByName(context.TODO(), hashedName)
				if err != nil {
					if errors.IsNotFound(err) {
						return
					}
					panic("error occurred while fetching parent " + err.Error())
				}
				panic(fmt.Sprintf("parent found (event loop is stalled) " + nc.DisplayName()))
			}
			if gvkExist {
				// Check GVK

				if parent.Spec.VMPPoliciesGvk != nil {
					return
				}

				panic(fmt.Sprintf("gvk not found (event loop is stalled) " + nc.DisplayName()))
			}

			deleteCB(nc)
		},
	})
	return registrationId, err
}

func (c *vmpolicyPolicypkgTsmV1Chainer) RegisterAddCallback(cbfn func(obj *PolicypkgVMpolicy)) (cache.ResourceEventHandlerRegistration, error) {
	log.Debugf("[RegisterAddCallback] Received for PolicypkgVMpolicy")
	var (
		registrationId cache.ResourceEventHandlerRegistration
		err            error
	)
	key := "vmpolicies.policypkg.tsm.tanzu.vmware.com"
	stopper := make(chan struct{})
	if s, ok := subscriptionMap.Load(key); ok {
		log.Debugf("[RegisterAddCallback] PolicypkgVMpolicy Use Subscription Informer")
		sub := s.(subscription)
		registrationId, err = sub.informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
			AddFunc: func(obj interface{}) {
				nc := &PolicypkgVMpolicy{
					client:   c.client,
					VMpolicy: obj.(*basepolicypkgtsmtanzuvmwarecomv1.VMpolicy),
				}

				var parent *ConfigConfig
				gvkExist := false
				for i := 0; i < 600; i++ {
					// Check if parent exists
					p, err := nc.GetParent(context.TODO())
					if err != nil || p == nil {
						time.Sleep(500 * time.Millisecond)
						continue
					}
					parent = p

					// Check GVK

					if parent.Spec.VMPPoliciesGvk == nil {
						time.Sleep(500 * time.Millisecond)
						continue
					}

					gvkExist = true

					break
				}

				if parent == nil {
					hashedName := helper.GetHashedName("configs.config.tsm.tanzu.vmware.com", nc.Labels, nc.Labels["configs.config.tsm.tanzu.vmware.com"])
					parent, err = c.client.Config().ForceReadConfigByName(context.TODO(), hashedName)
					if err != nil {
						if errors.IsNotFound(err) {
							return
						}

						panic("error occurred while fetching parent " + err.Error())
					}
					panic(fmt.Sprintf("parent found (event loop is stalled) " + nc.DisplayName()))
				}

				if !gvkExist {
					// Check GVK

					if parent.Spec.VMPPoliciesGvk == nil {
						return
					}

					panic(fmt.Sprintf("gvk found (event loop is stalled) " + nc.DisplayName()))
				}

				cbfn(nc)
			},
		})
	} else {
		log.Debugf("[RegisterAddCallback] PolicypkgVMpolicy Create New Informer")
		informer := informerpolicypkgtsmtanzuvmwarecomv1.NewVMpolicyInformer(c.client.baseClient, 0, cache.Indexers{})
		registrationId, err = informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
			AddFunc: func(obj interface{}) {
				nc := &PolicypkgVMpolicy{
					client:   c.client,
					VMpolicy: obj.(*basepolicypkgtsmtanzuvmwarecomv1.VMpolicy),
				}

				var parent *ConfigConfig
				gvkExist := false
				for i := 0; i < 600; i++ {
					// Check if parent exists
					p, err := nc.GetParent(context.TODO())
					if err != nil || p == nil {
						time.Sleep(500 * time.Millisecond)
						continue
					}
					parent = p

					// Check GVK

					if parent.Spec.VMPPoliciesGvk == nil {
						time.Sleep(500 * time.Millisecond)
						continue
					}

					gvkExist = true

					break
				}

				if parent == nil {
					hashedName := helper.GetHashedName("configs.config.tsm.tanzu.vmware.com", nc.Labels, nc.Labels["configs.config.tsm.tanzu.vmware.com"])
					parent, err = c.client.Config().ForceReadConfigByName(context.TODO(), hashedName)
					if err != nil {
						if errors.IsNotFound(err) {
							return
						}

						panic("error occurred while fetching parent " + err.Error())
					}
					panic(fmt.Sprintf("parent found (event loop is stalled) " + nc.DisplayName()))
				}

				if !gvkExist {
					// Check GVK

					if parent.Spec.VMPPoliciesGvk == nil {
						return
					}

					panic(fmt.Sprintf("gvk found (event loop is stalled) " + nc.DisplayName()))
				}

				cbfn(nc)
			},
		})
		go informer.Run(stopper)
	}
	return registrationId, err
}

func (c *vmpolicyPolicypkgTsmV1Chainer) RegisterUpdateCallback(cbfn func(oldObj, newObj *PolicypkgVMpolicy)) (cache.ResourceEventHandlerRegistration, error) {
	log.Debugf("[RegisterUpdateCallback] Received for PolicypkgVMpolicy")
	var (
		registrationId cache.ResourceEventHandlerRegistration
		err            error
	)
	key := "vmpolicies.policypkg.tsm.tanzu.vmware.com"
	stopper := make(chan struct{})
	if s, ok := subscriptionMap.Load(key); ok {
		log.Debugf("[RegisterUpdateCallback] PolicypkgVMpolicy Use Subscription Informer")
		sub := s.(subscription)
		registrationId, err = sub.informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
			UpdateFunc: func(oldObj, newObj interface{}) {
				oldData := &PolicypkgVMpolicy{
					client:   c.client,
					VMpolicy: oldObj.(*basepolicypkgtsmtanzuvmwarecomv1.VMpolicy),
				}
				newData := &PolicypkgVMpolicy{
					client:   c.client,
					VMpolicy: newObj.(*basepolicypkgtsmtanzuvmwarecomv1.VMpolicy),
				}
				cbfn(oldData, newData)
			},
		})
	} else {
		log.Debugf("[RegisterUpdateCallback] PolicypkgVMpolicy Create New Informer")
		informer := informerpolicypkgtsmtanzuvmwarecomv1.NewVMpolicyInformer(c.client.baseClient, 0, cache.Indexers{})
		registrationId, err = informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
			UpdateFunc: func(oldObj, newObj interface{}) {
				oldData := &PolicypkgVMpolicy{
					client:   c.client,
					VMpolicy: oldObj.(*basepolicypkgtsmtanzuvmwarecomv1.VMpolicy),
				}
				newData := &PolicypkgVMpolicy{
					client:   c.client,
					VMpolicy: newObj.(*basepolicypkgtsmtanzuvmwarecomv1.VMpolicy),
				}
				cbfn(oldData, newData)
			},
		})
		go informer.Run(stopper)
	}
	return registrationId, err
}

func (c *vmpolicyPolicypkgTsmV1Chainer) RegisterDeleteCallback(cbfn func(obj *PolicypkgVMpolicy)) (cache.ResourceEventHandlerRegistration, error) {
	log.Debugf("[RegisterDeleteCallback] Received for PolicypkgVMpolicy")
	var (
		registrationId cache.ResourceEventHandlerRegistration
		err            error
	)
	key := "vmpolicies.policypkg.tsm.tanzu.vmware.com"
	stopper := make(chan struct{})
	if s, ok := subscriptionMap.Load(key); ok {
		log.Debugf("[RegisterDeleteCallback] PolicypkgVMpolicy Use Subscription Informer")
		sub := s.(subscription)
		registrationId, err = sub.informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
			DeleteFunc: func(obj interface{}) {
				nc := &PolicypkgVMpolicy{
					client:   c.client,
					VMpolicy: obj.(*basepolicypkgtsmtanzuvmwarecomv1.VMpolicy),
				}

				var parent *ConfigConfig
				gvkExist := true
				for i := 0; i < 600; i++ {
					// Check if parent exists
					p, err := nc.GetParent(context.TODO())
					if err != nil || p == nil {
						time.Sleep(500 * time.Millisecond)
						continue
					}
					parent = p

					// Check GVK

					if parent.Spec.VMPPoliciesGvk != nil {
						time.Sleep(500 * time.Millisecond)
						continue
					}

					gvkExist = false
					break
				}

				if parent == nil {
					hashedName := helper.GetHashedName("configs.config.tsm.tanzu.vmware.com", nc.Labels, nc.Labels["configs.config.tsm.tanzu.vmware.com"])
					parent, err = c.client.Config().ForceReadConfigByName(context.TODO(), hashedName)
					if err != nil {
						if errors.IsNotFound(err) {
							return
						}

						panic("error occurred while fetching parent " + err.Error())
					}
					panic(fmt.Sprintf("parent found (event loop is stalled) " + nc.DisplayName()))
				}

				if gvkExist {
					// Check GVK

					if parent.Spec.VMPPoliciesGvk != nil {
						return
					}

					panic(fmt.Sprintf("gvk not found (event loop is stalled) " + nc.DisplayName()))
				}

				cbfn(nc)
			},
		})
	} else {
		log.Debugf("[RegisterDeleteCallback] PolicypkgVMpolicy Create New Informer")
		informer := informerpolicypkgtsmtanzuvmwarecomv1.NewVMpolicyInformer(c.client.baseClient, 0, cache.Indexers{})
		registrationId, err = informer.AddEventHandler(cache.ResourceEventHandlerFuncs{
			DeleteFunc: func(obj interface{}) {
				nc := &PolicypkgVMpolicy{
					client:   c.client,
					VMpolicy: obj.(*basepolicypkgtsmtanzuvmwarecomv1.VMpolicy),
				}

				var parent *ConfigConfig
				gvkExist := true
				for i := 0; i < 600; i++ {
					// Check if parent exists
					p, err := nc.GetParent(context.TODO())
					if err != nil || p == nil {
						time.Sleep(500 * time.Millisecond)
						continue
					}
					parent = p

					// Check GVK

					if parent.Spec.VMPPoliciesGvk != nil {
						time.Sleep(500 * time.Millisecond)
						continue
					}

					gvkExist = false

					break
				}

				if parent == nil {
					hashedName := helper.GetHashedName("configs.config.tsm.tanzu.vmware.com", nc.Labels, nc.Labels["configs.config.tsm.tanzu.vmware.com"])
					parent, err = c.client.Config().ForceReadConfigByName(context.TODO(), hashedName)
					if err != nil {
						if errors.IsNotFound(err) {
							return
						}

						panic("error occurred while fetching parent " + err.Error())
					}
					panic(fmt.Sprintf("parent found (event loop is stalled) " + nc.DisplayName()))
				}

				if gvkExist {
					// Check GVK

					if parent.Spec.VMPPoliciesGvk != nil {
						return
					}

					panic(fmt.Sprintf("gvk not found (event loop is stalled) " + nc.DisplayName()))
				}

				cbfn(nc)
			},
		})
		go informer.Run(stopper)
	}
	return registrationId, err
}
