

type Root_Root @nexus(group:"root.tsm.tanzu.vmware.com",version:"v1",kind:"Root",resource:"roots",name:"Root",crdName:"roots.root.tsm.tanzu.vmware.com",singleton:"true"){
    id: ID
    config: Config_Config
}

type Config_Config @nexus(group:"config.tsm.tanzu.vmware.com",version:"v1",kind:"Config",resource:"configs",name:"Config",crdName:"configs.config.tsm.tanzu.vmware.com",singleton:"false"){
    id: ID
    QueryExample(
        StartTime: String
        EndTime: String
        Interval: String
        IsServiceDeployment: Boolean
        StartVal: Int
    ): NexusGraphqlResponse
    gNS: Gns_Gns
    dNS: Gns_Dns
    vMPPolicies: Policypkg_VMpolicy
    aCPPolicies(id: ID): [Policypkg_AccessControlPolicy!] @relation(softlink: "true")
    domain: Config_Domain
    fooExample(id: ID): [Config_FooTypeABC!]
    svcGrpInfo: Servicegroup_SvcGroupLinkInfo
    myStr0: String
    myStr1: String
    myStr2: String
    xYZPort: String @jsonencoded(gofile:"model.go", name:"Port", goname:"nexus_gns.Port")
    aBCHost: String
    clusterNamespaces: String
    testValMarkers: String @jsonencoded(gofile:"model.go", name:"TestValMarkers", goname:"nexus_config.TestValMarkers")
    instance: Float
    cuOption: String
}

type Config_FooTypeABC @nexus(group:"config.tsm.tanzu.vmware.com",version:"v1",kind:"FooTypeABC",resource:"footypeabcs",name:"FooTypeABC",crdName:"footypeabcs.config.tsm.tanzu.vmware.com",singleton:"false"){
    id: ID
    fooA: String @jsonencoded(gofile:"model.go", name:"AMap", goname:"nexus_config.AMap")
    fooB: String @jsonencoded(gofile:"model.go", name:"BArray", goname:"nexus_config.BArray")
    fooD: String @jsonencoded(gofile:"model.go", name:"DFloat", goname:"nexus_config.DFloat")
    fooF: String @jsonencoded(gofile:"model.go", name:"DFloat", goname:"nexus_config.DFloat")
}

type Config_Domain @nexus(group:"config.tsm.tanzu.vmware.com",version:"v1",kind:"Domain",resource:"domains",name:"Domain",crdName:"domains.config.tsm.tanzu.vmware.com",singleton:"false"){
    id: ID
    pointPort: String
    pointString: String
    pointInt: Int
    pointMap: String
    pointSlice: String
    sliceOfPoints: [String]
    sliceOfArrPoints: String
    mapOfArrsPoints: String
    pointStruct: String
}

type Gns_RandomGnsData @nexus(group:"gns.tsm.tanzu.vmware.com",version:"v1",kind:"RandomGnsData",resource:"randomgnsdatas",name:"RandomGnsData",crdName:"randomgnsdatas.gns.tsm.tanzu.vmware.com",singleton:"false"){
    id: ID
    description: String @jsonencoded(gofile:"model.go", name:"RandomDescription", goname:"nexus_gns.RandomDescription")
}

type Gns_Gns @nexus(group:"gns.tsm.tanzu.vmware.com",version:"v1",kind:"Gns",resource:"gnses",name:"Gns",crdName:"gnses.gns.tsm.tanzu.vmware.com",singleton:"false"){
    id: ID
    queryGns1(
        StartTime: String
        EndTime: String
        Interval: String
        IsServiceDeployment: Boolean
        StartVal: Int
    ): NexusGraphqlResponse
    queryGnsQM1: TimeSeriesData @timeseriesAPI(file: "../../tsquery/timeSeriesQuery", handler: "queryGnsQM1")
    queryGnsQM(
        StartTime: String
        EndTime: String
        TimeInterval: String
        SomeUserArg1: String
        SomeUserArg2: Int
        SomeUserArg3: Boolean
    ): TimeSeriesData @timeseriesAPI(file: "../../tsquery/timeSeriesQuery", handler: "queryGnsQM")
    gnsAccessControlPolicy: String
    fooChild: String
    additionalGnsData: Gns_AdditionalGnsData
    domain: String
    useSharedGateway: Boolean
    annotations: String @jsonencoded
    targetPort: String @jsonencoded(gofile:"model.go", name:"IntOrString")
    description: String @jsonencoded(gofile:"model.go", name:"Description", goname:"nexus_gns.Description")
    meta: String
    port: Int
    otherDescription: String
    mapPointer: String
    slicePointer: String
    workloadSpec: String @jsonencoded(gofile:"model.go", name:"WorkloadSpec")
    differentSpec: String
    serviceSegmentRef: String @jsonencoded(gofile:"model.go", name:"ServiceSegmentRef", goname:"nexus_gns.ServiceSegmentRef")
    serviceSegmentRefPointer: String
    serviceSegmentRefs: String
    serviceSegmentRefMap: String
}

type Gns_BarChild @nexus(group:"gns.tsm.tanzu.vmware.com",version:"v1",kind:"BarChild",resource:"barchilds",name:"BarChild",crdName:"barchilds.gns.tsm.tanzu.vmware.com",singleton:"true"){
    id: ID
    randomGnsData: Gns_RandomGnsData
    name: String
}

type Gns_IgnoreChild @nexus(group:"gns.tsm.tanzu.vmware.com",version:"v1",kind:"IgnoreChild",resource:"ignorechilds",name:"IgnoreChild",crdName:"ignorechilds.gns.tsm.tanzu.vmware.com",singleton:"false"){
    id: ID
    name: String
}

type Gns_Dns @nexus(group:"gns.tsm.tanzu.vmware.com",version:"v1",kind:"Dns",resource:"dnses",name:"Dns",crdName:"dnses.gns.tsm.tanzu.vmware.com",singleton:"true"){
    id: ID
}

type Gns_AdditionalGnsData @nexus(group:"gns.tsm.tanzu.vmware.com",version:"v1",kind:"AdditionalGnsData",resource:"additionalgnsdatas",name:"AdditionalGnsData",crdName:"additionalgnsdatas.gns.tsm.tanzu.vmware.com",singleton:"false"){
    id: ID
    description: String @jsonencoded(gofile:"model.go", name:"AdditionalDescription", goname:"nexus_gns.AdditionalDescription")
}

type Servicegroup_SvcGroupLinkInfo @nexus(group:"servicegroup.tsm.tanzu.vmware.com",version:"v1",kind:"SvcGroupLinkInfo",resource:"svcgrouplinkinfos",name:"SvcGroupLinkInfo",crdName:"svcgrouplinkinfos.servicegroup.tsm.tanzu.vmware.com",singleton:"false"){
    id: ID
    clusterName: String
    domainName: String
    serviceName: String
    serviceType: String
}

type Policypkg_AdditionalPolicyData @nexus(group:"policypkg.tsm.tanzu.vmware.com",version:"v1",kind:"AdditionalPolicyData",resource:"additionalpolicydatas",name:"AdditionalPolicyData",crdName:"additionalpolicydatas.policypkg.tsm.tanzu.vmware.com",singleton:"false"){
    id: ID
    description: String @jsonencoded(gofile:"model.go", name:"AdditionalDescription", goname:"nexus_policy.AdditionalDescription")
}

type Policypkg_AccessControlPolicy @nexus(group:"policypkg.tsm.tanzu.vmware.com",version:"v1",kind:"AccessControlPolicy",resource:"accesscontrolpolicies",name:"AccessControlPolicy",crdName:"accesscontrolpolicies.policypkg.tsm.tanzu.vmware.com",singleton:"false"){
    id: ID
    policyConfigs(id: ID): [Policypkg_ACPConfig!]
}

type Policypkg_ACPConfig @nexus(group:"policypkg.tsm.tanzu.vmware.com",version:"v1",kind:"ACPConfig",resource:"acpconfigs",name:"ACPConfig",crdName:"acpconfigs.policypkg.tsm.tanzu.vmware.com",singleton:"false"){
    id: ID
    additionalPolicyData: Policypkg_AdditionalPolicyData
    randomPolicyData: Policypkg_RandomPolicyData
    displayName: String
    gns: String
    description: String
    tags: [String]
    projectId: String
    conditions: [String]
}

type Policypkg_VMpolicy @nexus(group:"policypkg.tsm.tanzu.vmware.com",version:"v1",kind:"VMpolicy",resource:"vmpolicies",name:"VMpolicy",crdName:"vmpolicies.policypkg.tsm.tanzu.vmware.com",singleton:"false"){
    id: ID
    queryGns1(
        StartTime: String
        EndTime: String
        Interval: String
        IsServiceDeployment: Boolean
        StartVal: Int
    ): NexusGraphqlResponse
    queryGnsQM1: TimeSeriesData @timeseriesAPI(file: "../../tsquery/timeSeriesQuery", handler: "queryGnsQM1")
    queryGnsQM(
        StartTime: String
        EndTime: String
        TimeInterval: String
        SomeUserArg1: String
        SomeUserArg2: Int
        SomeUserArg3: Boolean
    ): TimeSeriesData @timeseriesAPI(file: "../../tsquery/timeSeriesQuery", handler: "queryGnsQM")
}

type Policypkg_RandomPolicyData @nexus(group:"policypkg.tsm.tanzu.vmware.com",version:"v1",kind:"RandomPolicyData",resource:"randompolicydatas",name:"RandomPolicyData",crdName:"randompolicydatas.policypkg.tsm.tanzu.vmware.com",singleton:"false"){
    id: ID
    description: String @jsonencoded(gofile:"model.go", name:"RandomDescription", goname:"nexus_policy.RandomDescription")
}
