// Code generated by nexus. DO NOT EDIT.

package v1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	"nexustempmodule/common"
)

// +k8s:openapi-gen=true
type Child struct {
	Group string `json:"group" yaml:"group"`
	Kind  string `json:"kind" yaml:"kind"`
	Name  string `json:"name" yaml:"name"`
}

// +k8s:openapi-gen=true
type Link struct {
	Group string `json:"group" yaml:"group"`
	Kind  string `json:"kind" yaml:"kind"`
	Name  string `json:"name" yaml:"name"`
}

// +k8s:openapi-gen=true
type SyncerStatus struct {
	EtcdVersion    int64 `json:"etcdVersion, omitempty" yaml:"etcdVersion, omitempty"`
	CRGenerationId int64 `json:"cRGenerationId, omitempty" yaml:"cRGenerationId, omitempty"`
}

// +k8s:openapi-gen=true
type NexusStatus struct {
	SourceGeneration int64        `json:"sourceGeneration, omitempty" yaml:"sourceGeneration, omitempty"`
	RemoteGeneration int64        `json:"remoteGeneration, omitempty" yaml:"remoteGeneration, omitempty"`
	SyncerStatus     SyncerStatus `json:"syncerStatus, omitempty" yaml:"syncerStatus, omitempty"`
}

/* ------------------- CRDs definitions ------------------- */

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type AdditionalPolicyData struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              AdditionalPolicyDataSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            AdditionalPolicyDataNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type AdditionalPolicyDataNexusStatus struct {
	Status AdditionalStatus `json:"status,omitempty" yaml:"status,omitempty"`
	Nexus  NexusStatus      `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *AdditionalPolicyData) CRDName() string {
	return "additionalpolicydatas.policypkg.tsm.tanzu.vmware.com"
}

func (c *AdditionalPolicyData) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type AdditionalPolicyDataSpec struct {
	Description AdditionalDescription `json:"description" yaml:"description"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type AdditionalPolicyDataList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []AdditionalPolicyData `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type AccessControlPolicy struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              AccessControlPolicySpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            AccessControlPolicyNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type AccessControlPolicyNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *AccessControlPolicy) CRDName() string {
	return "accesscontrolpolicies.policypkg.tsm.tanzu.vmware.com"
}

func (c *AccessControlPolicy) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type AccessControlPolicySpec struct {
	PolicyConfigsGvk map[string]Child `json:"policyConfigsGvk,omitempty" yaml:"policyConfigsGvk,omitempty" nexus:"children"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type AccessControlPolicyList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []AccessControlPolicy `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type ACPConfig struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              ACPConfigSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            ACPConfigNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type ACPConfigNexusStatus struct {
	Status ACPStatus   `json:"status,omitempty" yaml:"status,omitempty"`
	Nexus  NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *ACPConfig) CRDName() string {
	return "acpconfigs.policypkg.tsm.tanzu.vmware.com"
}

func (c *ACPConfig) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type ACPConfigSpec struct {
	DisplayName        string          `json:"displayName" yaml:"displayName"`
	Gns                string          `json:"gns" yaml:"gns"`
	Description        string          `json:"description" yaml:"description"`
	Tags               []string        `json:"tags" yaml:"tags"`
	ProjectId          string          `json:"projectId" yaml:"projectId"`
	Conditions         []string        `json:"conditions" yaml:"conditions"`
	DestSvcGroupsGvk   map[string]Link `json:"destSvcGroupsGvk,omitempty" yaml:"destSvcGroupsGvk,omitempty" nexus:"links"`
	SourceSvcGroupsGvk map[string]Link `json:"sourceSvcGroupsGvk,omitempty" yaml:"sourceSvcGroupsGvk,omitempty" nexus:"links"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type ACPConfigList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []ACPConfig `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type VMpolicy struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`

	Status VMpolicyNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type VMpolicyNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *VMpolicy) CRDName() string {
	return "vmpolicies.policypkg.tsm.tanzu.vmware.com"
}

func (c *VMpolicy) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type VMpolicyList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []VMpolicy `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type RandomPolicyData struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              RandomPolicyDataSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            RandomPolicyDataNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type RandomPolicyDataNexusStatus struct {
	Status RandomStatus `json:"status,omitempty" yaml:"status,omitempty"`
	Nexus  NexusStatus  `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *RandomPolicyData) CRDName() string {
	return "randompolicydatas.policypkg.tsm.tanzu.vmware.com"
}

func (c *RandomPolicyData) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type RandomPolicyDataSpec struct {
	Description RandomDescription `json:"description" yaml:"description"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type RandomPolicyDataList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []RandomPolicyData `json:"items" yaml:"items"`
}

// +k8s:openapi-gen=true
type AdditionalDescription struct {
	DiscriptionA string `json:"discriptionA" yaml:"discriptionA"`
	DiscriptionB string `json:"discriptionB" yaml:"discriptionB"`
	DiscriptionC string `json:"discriptionC" yaml:"discriptionC"`
	DiscriptionD string `json:"discriptionD" yaml:"discriptionD"`
}

// +k8s:openapi-gen=true
type AdditionalStatus struct {
	StatusX int `json:"statusX" yaml:"statusX"`
	StatusY int `json:"statusY" yaml:"statusY"`
}

// +k8s:openapi-gen=true
type ACPStatus struct {
	StatusABC int `json:"statusABC" yaml:"statusABC"`
	StatusXYZ int `json:"statusXYZ" yaml:"statusXYZ"`
}

// +k8s:openapi-gen=true
type ResourceGroupRef struct {
	Name string `json:"name" yaml:"name"`
	Type string `json:"type" yaml:"type"`
}

// +k8s:openapi-gen=true
type ACPSvcGroupLinkInfo struct {
	ServiceName string `json:"serviceName" yaml:"serviceName"`
	ServiceType string `json:"serviceType" yaml:"serviceType"`
}

// +k8s:openapi-gen=true
type PolicyCfgAction struct {
	Action PolicyActionType `json:"action" mapstructure:"action" yaml:"action"`
}

// +k8s:openapi-gen=true
type ResourceGroupID struct {
	Name string `json:"name" mapstruction:"name" yaml:"name"`
	Type string `json:"type" mapstruction:"type" yaml:"type"`
}

// +k8s:openapi-gen=true
type RandomDescription struct {
	DiscriptionA string `json:"discriptionA" yaml:"discriptionA"`
	DiscriptionB string `json:"discriptionB" yaml:"discriptionB"`
	DiscriptionC string `json:"discriptionC" yaml:"discriptionC"`
	DiscriptionD string `json:"discriptionD" yaml:"discriptionD"`
}

// +k8s:openapi-gen=true
type RandomStatus struct {
	StatusX int `json:"statusX" yaml:"statusX"`
	StatusY int `json:"statusY" yaml:"statusY"`
}

type TempConst1 string
type TempConst2 string
type TempConst3 string
type PolicyActionType string
type PolicyCfgActions []PolicyCfgAction
type ResourceGroupIDs []ResourceGroupID
type RandomConst1 string
type RandomConst2 string
type RandomConst3 string

const (
	Const3                  TempConst3       = "Const3"
	Const2                  TempConst2       = "Const2"
	Const1                  TempConst1       = "Const1"
	PolicyActionType_Allow  PolicyActionType = "ALLOW"
	PolicyActionType_Deny   PolicyActionType = "DENY"
	PolicyActionType_Log    PolicyActionType = "LOG"
	PolicyActionType_Mirror PolicyActionType = "MIRROR"
	MyConst3                RandomConst3     = "Const3"
	MyConst2                RandomConst2     = "Const2"
	MyConst1                RandomConst1     = "Const1"
)
