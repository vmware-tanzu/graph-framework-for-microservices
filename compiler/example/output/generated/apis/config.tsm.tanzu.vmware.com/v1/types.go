// Code generated by nexus. DO NOT EDIT.

package v1

import (
	gnstsmtanzuvmwarecomv1 "github.com/vmware-tanzu/graph-framework-for-microservices/compiler/example/output/generated/apis/gns.tsm.tanzu.vmware.com/v1"

	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	"github.com/vmware-tanzu/graph-framework-for-microservices/compiler/example/output/generated/common"
)

// +k8s:openapi-gen=true
type Child struct {
	Group string `json:"group" yaml:"group"`
	Kind  string `json:"kind" yaml:"kind"`
	Name  string `json:"name" yaml:"name"`
}

// +k8s:openapi-gen=true
type Link struct {
	Group string `json:"group" yaml:"group"`
	Kind  string `json:"kind" yaml:"kind"`
	Name  string `json:"name" yaml:"name"`
}

// +k8s:openapi-gen=true
type NexusStatus struct {
	SourceGeneration int64 `json:"sourceGeneration" yaml:"sourceGeneration"`
	RemoteGeneration int64 `json:"remoteGeneration" yaml:"remoteGeneration"`
}

/* ------------------- CRDs definitions ------------------- */

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type Config struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              ConfigSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            ConfigNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type ConfigNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *Config) CRDName() string {
	return "configs.config.tsm.tanzu.vmware.com"
}

func (c *Config) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type ConfigSpec struct {
	MyStr0            *gnstsmtanzuvmwarecomv1.MyStr           `json:"my_str_0" yaml:"my_str_0"`
	MyStr1            []gnstsmtanzuvmwarecomv1.MyStr          `json:"my_str_1" yaml:"my_str_1"`
	MyStr2            map[string]gnstsmtanzuvmwarecomv1.MyStr `json:"my_str_2" yaml:"my_str_2"`
	XYZPort           gnstsmtanzuvmwarecomv1.Port             `json:"xyz_port" yaml:"xyz_port"`
	ABCHost           []gnstsmtanzuvmwarecomv1.Host           `json:"abc_host" yaml:"abc_host"`
	ClusterNamespaces []ClusterNamespace                      `json:"cluster_namespaces" yaml:"cluster_namespaces"`
	TestValMarkers    TestValMarkers                          `json:"testValMarkers" yaml:"testValMarkers"`
	Instance          float32                                 `json:"instance" yaml:"instance"`
	CuOption          string                                  `json:"option_cu"`
	GNSGvk            *Child                                  `json:"gns_gvk,omitempty" yaml:"gns_gvk,omitempty" nexus:"child"`
	DNSGvk            *Child                                  `json:"dns_gvk,omitempty" yaml:"dns_gvk,omitempty" nexus:"child"`
	VMPPoliciesGvk    *Child                                  `json:"vmp_policies_gvk,omitempty" yaml:"vmp_policies_gvk,omitempty" nexus:"child"`
	DomainGvk         *Child                                  `json:"domain_gvk,omitempty" yaml:"domain_gvk,omitempty" nexus:"child"`
	FooExampleGvk     map[string]Child                        `json:"foo_example_gvk,omitempty" yaml:"foo_example_gvk,omitempty" nexus:"children"`
	SvcGrpInfoGvk     *Child                                  `json:"svc_grp_info_gvk,omitempty" yaml:"svc_grp_info_gvk,omitempty" nexus:"child"`
	ACPPoliciesGvk    map[string]Link                         `json:"acp_policies_gvk,omitempty" yaml:"acp_policies_gvk,omitempty" nexus:"links"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type ConfigList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []Config `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type FooTypeABC struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              FooTypeABCSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            FooTypeABCNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type FooTypeABCNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *FooTypeABC) CRDName() string {
	return "footypeabcs.config.tsm.tanzu.vmware.com"
}

func (c *FooTypeABC) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type FooTypeABCSpec struct {
	FooA AMap   `json:"foo_a" yaml:"foo_a"`
	FooB BArray `json:"foo_b" yaml:"foo_b"`
	FooC CInt   `nexus-graphql:"ignore:true"`
	FooD DFloat `nexus-graphql:"type:string"`
	FooE CInt   `json:"foo_e" nexus-graphql:"ignore:true"`
	FooF DFloat `json:"foo_f" yaml:"c_int" nexus-graphql:"type:string"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type FooTypeABCList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []FooTypeABC `json:"items" yaml:"items"`
}

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type Domain struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              DomainSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            DomainNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type DomainNexusStatus struct {
	Nexus NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *Domain) CRDName() string {
	return "domains.config.tsm.tanzu.vmware.com"
}

func (c *Domain) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DISPLAY_NAME_LABEL]
	}
	return ""
}

// +k8s:openapi-gen=true
type DomainSpec struct {
	PointPort        *gnstsmtanzuvmwarecomv1.Port `json:"point_port" yaml:"point_port"`
	PointString      *string                      `json:"point_string" yaml:"point_string"`
	PointInt         *int                         `json:"point_int" yaml:"point_int"`
	PointMap         *map[string]string           `json:"point_map" yaml:"point_map"`
	PointSlice       *[]string                    `json:"point_slice" yaml:"point_slice"`
	SliceOfPoints    []*string                    `json:"slice_of_points" yaml:"slice_of_points"`
	SliceOfArrPoints []*BArray                    `json:"slice_of_arr_points" yaml:"slice_of_arr_points"`
	MapOfArrsPoints  map[string]*BArray           `json:"map_of_arrs_points" yaml:"map_of_arrs_points"`
	PointStruct      *Cluster                     `json:"point_struct" yaml:"point_struct"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type DomainList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []Domain `json:"items" yaml:"items"`
}

// +k8s:openapi-gen=true
type ClusterNamespace struct {
	Cluster   MatchCondition `json:"cluster" yaml:"cluster"`
	Namespace MatchCondition `json:"namespace" yaml:"namespace"`
}

// +k8s:openapi-gen=true
type MatchCondition struct {
	Name string                      `json:"name" yaml:"name"`
	Type gnstsmtanzuvmwarecomv1.Host `json:"type" yaml:"type"`
}

// +k8s:openapi-gen=true
type Cluster struct {
	Name string `json:"name" yaml:"name"`
	MyID int    `json:"my_id" yaml:"my_id"`
}

// +k8s:openapi-gen=true
type CrossPackageTester struct {
	Test gnstsmtanzuvmwarecomv1.MyStr `json:"test" yaml:"test"`
}

// +k8s:openapi-gen=true
type EmptyStructTest struct {
}

// +k8s:openapi-gen=true
type TestValMarkers struct {
	//nexus-validation: MaxLength=8, MinLength=2, Pattern=ab
	MyStr string `json:"myStr" yaml:"myStr"`
	//nexus-validation: Maximum=8, Minimum=2
	//nexus-validation: ExclusiveMaximum=true
	MyInt int `json:"myInt" yaml:"myInt"`
	//nexus-validation: MaxItems=3, MinItems=2
	//nexus-validation: UniqueItems=true
	MySlice []string `json:"mySlice" yaml:"mySlice"`
}

// +k8s:openapi-gen=true
type SomeStruct struct {
}

// +k8s:openapi-gen=true
type StructWithEmbeddedField struct {
	SomeStruct
	gnstsmtanzuvmwarecomv1.MyStr
}

type AMap map[string]string
type BArray []string
type CInt uint8
type DFloat float32
