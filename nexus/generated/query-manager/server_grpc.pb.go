// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package query_manager

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ServerClient is the client API for Server service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServerClient interface {
	// Create a new Resource Group
	GetMetrics(ctx context.Context, in *MetricArg, opts ...grpc.CallOption) (*TimeSeriesResponse, error)
}

type serverClient struct {
	cc grpc.ClientConnInterface
}

func NewServerClient(cc grpc.ClientConnInterface) ServerClient {
	return &serverClient{cc}
}

var serverGetMetricsStreamDesc = &grpc.StreamDesc{
	StreamName: "GetMetrics",
}

func (c *serverClient) GetMetrics(ctx context.Context, in *MetricArg, opts ...grpc.CallOption) (*TimeSeriesResponse, error) {
	out := new(TimeSeriesResponse)
	err := c.cc.Invoke(ctx, "/queryManager.Server/GetMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServerService is the service API for Server service.
// Fields should be assigned to their respective handler implementations only before
// RegisterServerService is called.  Any unassigned fields will result in the
// handler for that method returning an Unimplemented error.
type ServerService struct {
	// Create a new Resource Group
	GetMetrics func(context.Context, *MetricArg) (*TimeSeriesResponse, error)
}

func (s *ServerService) getMetrics(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.GetMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/queryManager.Server/GetMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetMetrics(ctx, req.(*MetricArg))
	}
	return interceptor(ctx, in, info, handler)
}

// RegisterServerService registers a service implementation with a gRPC server.
func RegisterServerService(s grpc.ServiceRegistrar, srv *ServerService) {
	srvCopy := *srv
	if srvCopy.GetMetrics == nil {
		srvCopy.GetMetrics = func(context.Context, *MetricArg) (*TimeSeriesResponse, error) {
			return nil, status.Errorf(codes.Unimplemented, "method GetMetrics not implemented")
		}
	}
	sd := grpc.ServiceDesc{
		ServiceName: "queryManager.Server",
		Methods: []grpc.MethodDesc{
			{
				MethodName: "GetMetrics",
				Handler:    srvCopy.getMetrics,
			},
		},
		Streams:  []grpc.StreamDesc{},
		Metadata: "proto/query-manager/server.proto",
	}

	s.RegisterService(&sd, nil)
}

// NewServerService creates a new ServerService containing the
// implemented methods of the Server service in s.  Any unimplemented
// methods will result in the gRPC server returning an UNIMPLEMENTED status to the client.
// This includes situations where the method handler is misspelled or has the wrong
// signature.  For this reason, this function should be used with great care and
// is not recommended to be used by most users.
func NewServerService(s interface{}) *ServerService {
	ns := &ServerService{}
	if h, ok := s.(interface {
		GetMetrics(context.Context, *MetricArg) (*TimeSeriesResponse, error)
	}); ok {
		ns.GetMetrics = h.GetMetrics
	}
	return ns
}

// UnstableServerService is the service API for Server service.
// New methods may be added to this interface if they are added to the service
// definition, which is not a backward-compatible change.  For this reason,
// use of this type is not recommended.
type UnstableServerService interface {
	// Create a new Resource Group
	GetMetrics(context.Context, *MetricArg) (*TimeSeriesResponse, error)
}
